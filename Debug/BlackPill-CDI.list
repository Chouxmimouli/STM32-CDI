
BlackPill-CDI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b47c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800b620  0800b620  0000c620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6f8  0800b6f8  0000d198  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6f8  0800b6f8  0000c6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b700  0800b700  0000d198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b700  0800b700  0000c700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b704  0800b704  0000c704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  0800b708  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002128  20000198  0800b8a0  0000d198  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200022c0  0800b8a0  0000d2c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d198  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c1a  00000000  00000000  0000d1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003515  00000000  00000000  00020de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  000242f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da2  00000000  00000000  000254e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192df  00000000  00000000  00026282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016481  00000000  00000000  0003f561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090be5  00000000  00000000  000559e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e65c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005470  00000000  00000000  000e660c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000eba7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000198 	.word	0x20000198
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b604 	.word	0x0800b604

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000019c 	.word	0x2000019c
 80001dc:	0800b604 	.word	0x0800b604

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <LedInit>:
// Storing the LED data
#define MAX_LED 11
uint8_t LED_Data[MAX_LED][4]; // before brightness correction
uint8_t LED_Mod[MAX_LED][4]; // after  brightness correction

void LedInit() {
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 11; ++i) {
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	e01b      	b.n	8000f7c <LedInit+0x44>
		for (int j = 0; j < 4; ++j) {
 8000f44:	2300      	movs	r3, #0
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	e012      	b.n	8000f70 <LedInit+0x38>
			LED_Data[i][j] = 0;
 8000f4a:	4a11      	ldr	r2, [pc, #68]	@ (8000f90 <LedInit+0x58>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	441a      	add	r2, r3
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	4413      	add	r3, r2
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
			LED_Mod[i][j] = 0;
 8000f5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f94 <LedInit+0x5c>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	441a      	add	r2, r3
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	4413      	add	r3, r2
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 4; ++j) {
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	dde9      	ble.n	8000f4a <LedInit+0x12>
	for (int i = 0; i < 11; ++i) {
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b0a      	cmp	r3, #10
 8000f80:	dde0      	ble.n	8000f44 <LedInit+0xc>
	    }
	}
}
 8000f82:	bf00      	nop
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	200002c0 	.word	0x200002c0
 8000f94:	200002ec 	.word	0x200002ec

08000f98 <LedSetBrightness>:

void LedSetBrightness(const float *brightness) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	float GammaBrightness = pow(*brightness, 2.2);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fad7 	bl	8000558 <__aeabi_f2d>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	ed9f 1b30 	vldr	d1, [pc, #192]	@ 8001070 <LedSetBrightness+0xd8>
 8000fb2:	ec43 2b10 	vmov	d0, r2, r3
 8000fb6:	f009 fb81 	bl	800a6bc <pow>
 8000fba:	ec53 2b10 	vmov	r2, r3, d0
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f7ff fdf1 	bl	8000ba8 <__aeabi_d2f>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	617b      	str	r3, [r7, #20]

	if (GammaBrightness > 1) GammaBrightness = 1;
 8000fca:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000fd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fda:	dd02      	ble.n	8000fe2 <LedSetBrightness+0x4a>
 8000fdc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000fe0:	617b      	str	r3, [r7, #20]
	if (GammaBrightness < 0) GammaBrightness = 0;
 8000fe2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fe6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fee:	d502      	bpl.n	8000ff6 <LedSetBrightness+0x5e>
 8000ff0:	f04f 0300 	mov.w	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]

	for (int i=0; i<MAX_LED; i++) {
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	e030      	b.n	800105e <LedSetBrightness+0xc6>
		LED_Mod[i][0] = LED_Data[i][0];
 8000ffc:	4a1e      	ldr	r2, [pc, #120]	@ (8001078 <LedSetBrightness+0xe0>)
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8001004:	4a1d      	ldr	r2, [pc, #116]	@ (800107c <LedSetBrightness+0xe4>)
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++) {
 800100c:	2301      	movs	r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	e01f      	b.n	8001052 <LedSetBrightness+0xba>
			LED_Mod[i][j] = (LED_Data[i][j])*GammaBrightness;
 8001012:	4a19      	ldr	r2, [pc, #100]	@ (8001078 <LedSetBrightness+0xe0>)
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	441a      	add	r2, r3
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4413      	add	r3, r2
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	ee07 3a90 	vmov	s15, r3
 8001024:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001028:	edd7 7a05 	vldr	s15, [r7, #20]
 800102c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001034:	edc7 7a00 	vstr	s15, [r7]
 8001038:	783b      	ldrb	r3, [r7, #0]
 800103a:	b2d9      	uxtb	r1, r3
 800103c:	4a0f      	ldr	r2, [pc, #60]	@ (800107c <LedSetBrightness+0xe4>)
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	441a      	add	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4413      	add	r3, r2
 8001048:	460a      	mov	r2, r1
 800104a:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++) {
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	3301      	adds	r3, #1
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2b03      	cmp	r3, #3
 8001056:	dddc      	ble.n	8001012 <LedSetBrightness+0x7a>
	for (int i=0; i<MAX_LED; i++) {
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	3301      	adds	r3, #1
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	2b0a      	cmp	r3, #10
 8001062:	ddcb      	ble.n	8000ffc <LedSetBrightness+0x64>
		}
	}
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	9999999a 	.word	0x9999999a
 8001074:	40019999 	.word	0x40019999
 8001078:	200002c0 	.word	0x200002c0
 800107c:	200002ec 	.word	0x200002ec

08001080 <LedSetColor>:

void LedSetColor (const uint8_t LEDnum, const uint8_t Red, const uint8_t Green, const uint8_t Blue) {
 8001080:	b490      	push	{r4, r7}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	4604      	mov	r4, r0
 8001088:	4608      	mov	r0, r1
 800108a:	4611      	mov	r1, r2
 800108c:	461a      	mov	r2, r3
 800108e:	4623      	mov	r3, r4
 8001090:	71fb      	strb	r3, [r7, #7]
 8001092:	4603      	mov	r3, r0
 8001094:	71bb      	strb	r3, [r7, #6]
 8001096:	460b      	mov	r3, r1
 8001098:	717b      	strb	r3, [r7, #5]
 800109a:	4613      	mov	r3, r2
 800109c:	713b      	strb	r3, [r7, #4]
	LED_Data[LEDnum][0] = LEDnum;
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	490d      	ldr	r1, [pc, #52]	@ (80010d8 <LedSetColor+0x58>)
 80010a2:	79fa      	ldrb	r2, [r7, #7]
 80010a4:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	4a0b      	ldr	r2, [pc, #44]	@ (80010d8 <LedSetColor+0x58>)
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	797a      	ldrb	r2, [r7, #5]
 80010b2:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	4a08      	ldr	r2, [pc, #32]	@ (80010d8 <LedSetColor+0x58>)
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	79ba      	ldrb	r2, [r7, #6]
 80010be:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	4a05      	ldr	r2, [pc, #20]	@ (80010d8 <LedSetColor+0x58>)
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	793a      	ldrb	r2, [r7, #4]
 80010ca:	70da      	strb	r2, [r3, #3]
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc90      	pop	{r4, r7}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	200002c0 	.word	0x200002c0

080010dc <LedSend>:

// Convert and send the data to DMA
uint16_t pwmData[(24 * MAX_LED) + 50];

void LedSend (const float brightness) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	ed87 0a01 	vstr	s0, [r7, #4]
	LedSetBrightness(&brightness);
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff55 	bl	8000f98 <LedSetBrightness>

	uint32_t color, index = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]

	for (int i= 0; i<MAX_LED; i++) {
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	e036      	b.n	8001166 <LedSend+0x8a>
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 80010f8:	4a30      	ldr	r2, [pc, #192]	@ (80011bc <LedSend+0xe0>)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	785b      	ldrb	r3, [r3, #1]
 8001102:	041a      	lsls	r2, r3, #16
 8001104:	492d      	ldr	r1, [pc, #180]	@ (80011bc <LedSend+0xe0>)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	440b      	add	r3, r1
 800110c:	789b      	ldrb	r3, [r3, #2]
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	431a      	orrs	r2, r3
 8001112:	492a      	ldr	r1, [pc, #168]	@ (80011bc <LedSend+0xe0>)
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	440b      	add	r3, r1
 800111a:	78db      	ldrb	r3, [r3, #3]
 800111c:	4313      	orrs	r3, r2
 800111e:	60fb      	str	r3, [r7, #12]
		for (int i=23; i>=0; i--) {
 8001120:	2317      	movs	r3, #23
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	e019      	b.n	800115a <LedSend+0x7e>
			if (color&(1<<i)) {
 8001126:	2201      	movs	r2, #1
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	461a      	mov	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4013      	ands	r3, r2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d005      	beq.n	8001144 <LedSend+0x68>
				pwmData[index] = 71;  // 105*0.68
 8001138:	4a21      	ldr	r2, [pc, #132]	@ (80011c0 <LedSend+0xe4>)
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	2147      	movs	r1, #71	@ 0x47
 800113e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001142:	e004      	b.n	800114e <LedSend+0x72>
			}

			else pwmData[index] = 34;  // 105-71
 8001144:	4a1e      	ldr	r2, [pc, #120]	@ (80011c0 <LedSend+0xe4>)
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	2122      	movs	r1, #34	@ 0x22
 800114a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			index++;
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3301      	adds	r3, #1
 8001152:	61fb      	str	r3, [r7, #28]
		for (int i=23; i>=0; i--) {
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	3b01      	subs	r3, #1
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2b00      	cmp	r3, #0
 800115e:	dae2      	bge.n	8001126 <LedSend+0x4a>
	for (int i= 0; i<MAX_LED; i++) {
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	3301      	adds	r3, #1
 8001164:	61bb      	str	r3, [r7, #24]
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	2b0a      	cmp	r3, #10
 800116a:	ddc5      	ble.n	80010f8 <LedSend+0x1c>
		}

	}

	for (int i=0; i<50; i++) {
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	e00a      	b.n	8001188 <LedSend+0xac>
		pwmData[index] = 0;
 8001172:	4a13      	ldr	r2, [pc, #76]	@ (80011c0 <LedSend+0xe4>)
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	2100      	movs	r1, #0
 8001178:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		index++;
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	3301      	adds	r3, #1
 8001180:	61fb      	str	r3, [r7, #28]
	for (int i=0; i<50; i++) {
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	3301      	adds	r3, #1
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	2b31      	cmp	r3, #49	@ 0x31
 800118c:	ddf1      	ble.n	8001172 <LedSend+0x96>
	}

	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_2, (uint32_t *)pwmData, index);
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	b29b      	uxth	r3, r3
 8001192:	4a0b      	ldr	r2, [pc, #44]	@ (80011c0 <LedSend+0xe4>)
 8001194:	2104      	movs	r1, #4
 8001196:	480b      	ldr	r0, [pc, #44]	@ (80011c4 <LedSend+0xe8>)
 8001198:	f003 fc5c 	bl	8004a54 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 800119c:	bf00      	nop
 800119e:	4b0a      	ldr	r3, [pc, #40]	@ (80011c8 <LedSend+0xec>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	f083 0301 	eor.w	r3, r3, #1
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1f8      	bne.n	800119e <LedSend+0xc2>
	datasentflag = 0;
 80011ac:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <LedSend+0xec>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
}
 80011b2:	bf00      	nop
 80011b4:	3720      	adds	r7, #32
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200002ec 	.word	0x200002ec
 80011c0:	20000318 	.word	0x20000318
 80011c4:	200001fc 	.word	0x200001fc
 80011c8:	200002b0 	.word	0x200002b0

080011cc <HAL_TIM_PWM_PulseFinishedCallback>:
	if (HAL_GPIO_ReadPin(Trigger_GPIO_Port, Trigger_Pin) == GPIO_PIN_SET) {
		LedSetColor(10, 28, 119, 255);
	}
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_2);
 80011d4:	2104      	movs	r1, #4
 80011d6:	4805      	ldr	r0, [pc, #20]	@ (80011ec <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80011d8:	f003 fdec 	bl	8004db4 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = true;
 80011dc:	4b04      	ldr	r3, [pc, #16]	@ (80011f0 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200001fc 	.word	0x200001fc
 80011f0:	200002b0 	.word	0x200002b0

080011f4 <CalculateDelayTime>:

/* Ignition code -------------------------------------------------------------*/



void CalculateDelayTime() {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	MapIndex = round(Rpm / 250.0f);
 80011f8:	4b24      	ldr	r3, [pc, #144]	@ (800128c <CalculateDelayTime+0x98>)
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001204:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001290 <CalculateDelayTime+0x9c>
 8001208:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800120c:	ee16 0a90 	vmov	r0, s13
 8001210:	f7ff f9a2 	bl	8000558 <__aeabi_f2d>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	ec43 2b10 	vmov	d0, r2, r3
 800121c:	f009 faca 	bl	800a7b4 <round>
 8001220:	ec53 2b10 	vmov	r2, r3, d0
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fc9e 	bl	8000b68 <__aeabi_d2uiz>
 800122c:	4603      	mov	r3, r0
 800122e:	b2da      	uxtb	r2, r3
 8001230:	4b18      	ldr	r3, [pc, #96]	@ (8001294 <CalculateDelayTime+0xa0>)
 8001232:	701a      	strb	r2, [r3, #0]

	if (MapIndex > 16) {
 8001234:	4b17      	ldr	r3, [pc, #92]	@ (8001294 <CalculateDelayTime+0xa0>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b10      	cmp	r3, #16
 800123a:	d902      	bls.n	8001242 <CalculateDelayTime+0x4e>
		MapIndex = 16;
 800123c:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <CalculateDelayTime+0xa0>)
 800123e:	2210      	movs	r2, #16
 8001240:	701a      	strb	r2, [r3, #0]
	}

	AngleDifference = TriggerCoilAngle - ignition_map[MapIndex];
 8001242:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <CalculateDelayTime+0xa0>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	4b13      	ldr	r3, [pc, #76]	@ (8001298 <CalculateDelayTime+0xa4>)
 800124a:	5c9b      	ldrb	r3, [r3, r2]
 800124c:	f1c3 0310 	rsb	r3, r3, #16
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4b12      	ldr	r3, [pc, #72]	@ (800129c <CalculateDelayTime+0xa8>)
 8001254:	701a      	strb	r2, [r3, #0]
	DelayTime = (PulseInterval / 360.0f) * AngleDifference;
 8001256:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <CalculateDelayTime+0xac>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	ee07 3a90 	vmov	s15, r3
 800125e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001262:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80012a4 <CalculateDelayTime+0xb0>
 8001266:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800126a:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <CalculateDelayTime+0xa8>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	ee07 3a90 	vmov	s15, r3
 8001272:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800127a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800127e:	ee17 2a90 	vmov	r2, s15
 8001282:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <CalculateDelayTime+0xb4>)
 8001284:	601a      	str	r2, [r3, #0]
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200002a6 	.word	0x200002a6
 8001290:	437a0000 	.word	0x437a0000
 8001294:	200002a4 	.word	0x200002a4
 8001298:	20000024 	.word	0x20000024
 800129c:	200002a5 	.word	0x200002a5
 80012a0:	200002ac 	.word	0x200002ac
 80012a4:	43b40000 	.word	0x43b40000
 80012a8:	200002a8 	.word	0x200002a8

080012ac <CalculateDwell>:

void CalculateDwell() {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	switch (TriggerNum) {
 80012b0:	4b0d      	ldr	r3, [pc, #52]	@ (80012e8 <CalculateDwell+0x3c>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b07      	cmp	r3, #7
 80012b6:	d002      	beq.n	80012be <CalculateDwell+0x12>
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d00c      	beq.n	80012d6 <CalculateDwell+0x2a>
			//CDC_Transmit_FS(Buf, strlen((char *)Buf));

			HAL_GPIO_WritePin(Ignition_GPIO_Port, Ignition_Pin, GPIO_PIN_RESET); // Dwell
			break;
	}
}
 80012bc:	e012      	b.n	80012e4 <CalculateDwell+0x38>
			if (Rpm > 6000) {
 80012be:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <CalculateDwell+0x40>)
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	f241 7270 	movw	r2, #6000	@ 0x1770
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d90b      	bls.n	80012e2 <CalculateDwell+0x36>
				HAL_GPIO_WritePin(Ignition_GPIO_Port, Ignition_Pin, GPIO_PIN_RESET); // Dwell
 80012ca:	2200      	movs	r2, #0
 80012cc:	2120      	movs	r1, #32
 80012ce:	4808      	ldr	r0, [pc, #32]	@ (80012f0 <CalculateDwell+0x44>)
 80012d0:	f001 fc0c 	bl	8002aec <HAL_GPIO_WritePin>
			break;
 80012d4:	e005      	b.n	80012e2 <CalculateDwell+0x36>
			HAL_GPIO_WritePin(Ignition_GPIO_Port, Ignition_Pin, GPIO_PIN_RESET); // Dwell
 80012d6:	2200      	movs	r2, #0
 80012d8:	2120      	movs	r1, #32
 80012da:	4805      	ldr	r0, [pc, #20]	@ (80012f0 <CalculateDwell+0x44>)
 80012dc:	f001 fc06 	bl	8002aec <HAL_GPIO_WritePin>
			break;
 80012e0:	e000      	b.n	80012e4 <CalculateDwell+0x38>
			break;
 80012e2:	bf00      	nop
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000021 	.word	0x20000021
 80012ec:	200002a6 	.word	0x200002a6
 80012f0:	40020000 	.word	0x40020000

080012f4 <IsQuickShifterOn>:

bool IsQuickShifterOn(){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	// returns true only if QuickShifter is on and Ignition pin is off, otherwise it returns false
	if (HAL_GPIO_ReadPin(QuickShifter_GPIO_Port, QuickShifter_Pin) == GPIO_PIN_SET || HAL_GPIO_ReadPin(Ignition_GPIO_Port, Ignition_Pin) == GPIO_PIN_RESET) {
 80012f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012fc:	4808      	ldr	r0, [pc, #32]	@ (8001320 <IsQuickShifterOn+0x2c>)
 80012fe:	f001 fbdd 	bl	8002abc <HAL_GPIO_ReadPin>
 8001302:	4603      	mov	r3, r0
 8001304:	2b01      	cmp	r3, #1
 8001306:	d006      	beq.n	8001316 <IsQuickShifterOn+0x22>
 8001308:	2120      	movs	r1, #32
 800130a:	4806      	ldr	r0, [pc, #24]	@ (8001324 <IsQuickShifterOn+0x30>)
 800130c:	f001 fbd6 	bl	8002abc <HAL_GPIO_ReadPin>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <IsQuickShifterOn+0x26>
		return false;
 8001316:	2300      	movs	r3, #0
 8001318:	e000      	b.n	800131c <IsQuickShifterOn+0x28>
	}

	return true;
 800131a:	2301      	movs	r3, #1
}
 800131c:	4618      	mov	r0, r3
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40020400 	.word	0x40020400
 8001324:	40020000 	.word	0x40020000

08001328 <DoesRpmExeedRevLimit>:

bool DoesRpmExeedRevLimit(){
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	// returns true only if Rpm is above the Rev Limit and Ignition pin is off, otherwise it returns false
	if (Rpm < RevLimit || HAL_GPIO_ReadPin(Ignition_GPIO_Port, Ignition_Pin) == GPIO_PIN_RESET) {
 800132c:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <DoesRpmExeedRevLimit+0x28>)
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	f242 3227 	movw	r2, #8999	@ 0x2327
 8001334:	4293      	cmp	r3, r2
 8001336:	d906      	bls.n	8001346 <DoesRpmExeedRevLimit+0x1e>
 8001338:	2120      	movs	r1, #32
 800133a:	4806      	ldr	r0, [pc, #24]	@ (8001354 <DoesRpmExeedRevLimit+0x2c>)
 800133c:	f001 fbbe 	bl	8002abc <HAL_GPIO_ReadPin>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <DoesRpmExeedRevLimit+0x22>
		return false;
 8001346:	2300      	movs	r3, #0
 8001348:	e000      	b.n	800134c <DoesRpmExeedRevLimit+0x24>
	}

	return true;
 800134a:	2301      	movs	r3, #1
}
 800134c:	4618      	mov	r0, r3
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200002a6 	.word	0x200002a6
 8001354:	40020000 	.word	0x40020000

08001358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001358:	b5b0      	push	{r4, r5, r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800135e:	f000 fcef 	bl	8001d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001362:	f000 f917 	bl	8001594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001366:	f000 fa45 	bl	80017f4 <MX_GPIO_Init>
  MX_DMA_Init();
 800136a:	f000 fa23 	bl	80017b4 <MX_DMA_Init>
  MX_TIM4_Init();
 800136e:	f000 f9c9 	bl	8001704 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001372:	f000 f979 	bl	8001668 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8001376:	f007 ffc1 	bl	80092fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 800137a:	2201      	movs	r2, #1
 800137c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001380:	4875      	ldr	r0, [pc, #468]	@ (8001558 <main+0x200>)
 8001382:	f001 fbb3 	bl	8002aec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Ignition_GPIO_Port, Ignition_Pin, GPIO_PIN_SET);
 8001386:	2201      	movs	r2, #1
 8001388:	2120      	movs	r1, #32
 800138a:	4874      	ldr	r0, [pc, #464]	@ (800155c <main+0x204>)
 800138c:	f001 fbae 	bl	8002aec <HAL_GPIO_WritePin>

  LedInit();
 8001390:	f7ff fdd2 	bl	8000f38 <LedInit>

  // LEDs startup animation
  HAL_Delay(100);
 8001394:	2064      	movs	r0, #100	@ 0x64
 8001396:	f000 fd45 	bl	8001e24 <HAL_Delay>
  for (int i = 0; i < 11; i++)
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	e025      	b.n	80013ec <main+0x94>
  {   // Loop through the LEDs from 0 to 10
	  LedSetColor(i, Colors[i][0], Colors[i][1], Colors[i][2]);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	b2d8      	uxtb	r0, r3
 80013a4:	496e      	ldr	r1, [pc, #440]	@ (8001560 <main+0x208>)
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	4613      	mov	r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4413      	add	r3, r2
 80013ae:	440b      	add	r3, r1
 80013b0:	7819      	ldrb	r1, [r3, #0]
 80013b2:	4c6b      	ldr	r4, [pc, #428]	@ (8001560 <main+0x208>)
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	4613      	mov	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	4423      	add	r3, r4
 80013be:	3301      	adds	r3, #1
 80013c0:	781c      	ldrb	r4, [r3, #0]
 80013c2:	4d67      	ldr	r5, [pc, #412]	@ (8001560 <main+0x208>)
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	442b      	add	r3, r5
 80013ce:	3302      	adds	r3, #2
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	4622      	mov	r2, r4
 80013d4:	f7ff fe54 	bl	8001080 <LedSetColor>
	  LedSend(0.3);
 80013d8:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 8001564 <main+0x20c>
 80013dc:	f7ff fe7e 	bl	80010dc <LedSend>
 	  HAL_Delay(100);
 80013e0:	2064      	movs	r0, #100	@ 0x64
 80013e2:	f000 fd1f 	bl	8001e24 <HAL_Delay>
  for (int i = 0; i < 11; i++)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3301      	adds	r3, #1
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b0a      	cmp	r3, #10
 80013f0:	ddd6      	ble.n	80013a0 <main+0x48>
  }

  HAL_Delay(500);
 80013f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013f6:	f000 fd15 	bl	8001e24 <HAL_Delay>

  for (float i = 0.3; i >= 0; i-=0.005)
 80013fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001568 <main+0x210>)
 80013fc:	603b      	str	r3, [r7, #0]
 80013fe:	e016      	b.n	800142e <main+0xd6>
  {
	  LedSend(i);
 8001400:	ed97 0a00 	vldr	s0, [r7]
 8001404:	f7ff fe6a 	bl	80010dc <LedSend>
 	  HAL_Delay(15);
 8001408:	200f      	movs	r0, #15
 800140a:	f000 fd0b 	bl	8001e24 <HAL_Delay>
  for (float i = 0.3; i >= 0; i-=0.005)
 800140e:	6838      	ldr	r0, [r7, #0]
 8001410:	f7ff f8a2 	bl	8000558 <__aeabi_f2d>
 8001414:	a34e      	add	r3, pc, #312	@ (adr r3, 8001550 <main+0x1f8>)
 8001416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141a:	f7fe ff3d 	bl	8000298 <__aeabi_dsub>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4610      	mov	r0, r2
 8001424:	4619      	mov	r1, r3
 8001426:	f7ff fbbf 	bl	8000ba8 <__aeabi_d2f>
 800142a:	4603      	mov	r3, r0
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	edd7 7a00 	vldr	s15, [r7]
 8001432:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143a:	dae1      	bge.n	8001400 <main+0xa8>
  }

  // Start timer
  HAL_TIM_Base_Start_IT(&htim2);
 800143c:	484b      	ldr	r0, [pc, #300]	@ (800156c <main+0x214>)
 800143e:	f003 fa57 	bl	80048f0 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001448:	4843      	ldr	r0, [pc, #268]	@ (8001558 <main+0x200>)
 800144a:	f001 fb4f 	bl	8002aec <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if (HAL_GPIO_ReadPin(Trigger_GPIO_Port, Trigger_Pin) == GPIO_PIN_SET) {
 800144e:	2108      	movs	r1, #8
 8001450:	4842      	ldr	r0, [pc, #264]	@ (800155c <main+0x204>)
 8001452:	f001 fb33 	bl	8002abc <HAL_GPIO_ReadPin>
 8001456:	4603      	mov	r3, r0
 8001458:	2b01      	cmp	r3, #1
 800145a:	d1f8      	bne.n	800144e <main+0xf6>

		if (FirstCycle == false) {
 800145c:	4b44      	ldr	r3, [pc, #272]	@ (8001570 <main+0x218>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	f083 0301 	eor.w	r3, r3, #1
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d04d      	beq.n	8001506 <main+0x1ae>
			// Calculate Rpm
			Rpm = 15000000 / PulseInterval;
 800146a:	4b42      	ldr	r3, [pc, #264]	@ (8001574 <main+0x21c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a42      	ldr	r2, [pc, #264]	@ (8001578 <main+0x220>)
 8001470:	fbb2 f3f3 	udiv	r3, r2, r3
 8001474:	b29a      	uxth	r2, r3
 8001476:	4b41      	ldr	r3, [pc, #260]	@ (800157c <main+0x224>)
 8001478:	801a      	strh	r2, [r3, #0]

			if (IsQuickShifterOn() == false) {
 800147a:	f7ff ff3b 	bl	80012f4 <IsQuickShifterOn>
 800147e:	4603      	mov	r3, r0
 8001480:	f083 0301 	eor.w	r3, r3, #1
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d02c      	beq.n	80014e4 <main+0x18c>

				if (DoesRpmExeedRevLimit() == false) {
 800148a:	f7ff ff4d 	bl	8001328 <DoesRpmExeedRevLimit>
 800148e:	4603      	mov	r3, r0
 8001490:	f083 0301 	eor.w	r3, r3, #1
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d018      	beq.n	80014cc <main+0x174>

					CalculateDwell();
 800149a:	f7ff ff07 	bl	80012ac <CalculateDwell>

					if (HAL_GPIO_ReadPin(CamPosition_GPIO_Port, CamPosition_Pin) == GPIO_PIN_RESET) {
 800149e:	2101      	movs	r1, #1
 80014a0:	482e      	ldr	r0, [pc, #184]	@ (800155c <main+0x204>)
 80014a2:	f001 fb0b 	bl	8002abc <HAL_GPIO_ReadPin>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d124      	bne.n	80014f6 <main+0x19e>

						CalculateDelayTime();
 80014ac:	f7ff fea2 	bl	80011f4 <CalculateDelayTime>

						// Ignition
						while (__HAL_TIM_GET_COUNTER(&htim2) < DelayTime);
 80014b0:	bf00      	nop
 80014b2:	4b2e      	ldr	r3, [pc, #184]	@ (800156c <main+0x214>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014b8:	4b31      	ldr	r3, [pc, #196]	@ (8001580 <main+0x228>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d3f8      	bcc.n	80014b2 <main+0x15a>
						HAL_GPIO_WritePin(Ignition_GPIO_Port, Ignition_Pin, GPIO_PIN_SET);
 80014c0:	2201      	movs	r2, #1
 80014c2:	2120      	movs	r1, #32
 80014c4:	4825      	ldr	r0, [pc, #148]	@ (800155c <main+0x204>)
 80014c6:	f001 fb11 	bl	8002aec <HAL_GPIO_WritePin>
 80014ca:	e014      	b.n	80014f6 <main+0x19e>
						LedUpdateTwoStep();
						LedSend(0.3);
						*/
					}
				} else {
					while (__HAL_TIM_GET_COUNTER(&htim2) < DelayTime + IgnitionCutTime);
 80014cc:	bf00      	nop
 80014ce:	4b27      	ldr	r3, [pc, #156]	@ (800156c <main+0x214>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001580 <main+0x228>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 80014dc:	3360      	adds	r3, #96	@ 0x60
 80014de:	429a      	cmp	r2, r3
 80014e0:	d3f5      	bcc.n	80014ce <main+0x176>
 80014e2:	e008      	b.n	80014f6 <main+0x19e>
				}

			} else {
				while (HAL_GPIO_ReadPin(QuickShifter_GPIO_Port, QuickShifter_Pin) == GPIO_PIN_RESET);
 80014e4:	bf00      	nop
 80014e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014ea:	4826      	ldr	r0, [pc, #152]	@ (8001584 <main+0x22c>)
 80014ec:	f001 fae6 	bl	8002abc <HAL_GPIO_ReadPin>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f7      	beq.n	80014e6 <main+0x18e>
			}

			// Safety delay
			while (__HAL_TIM_GET_COUNTER(&htim2) < 1000);
 80014f6:	bf00      	nop
 80014f8:	4b1c      	ldr	r3, [pc, #112]	@ (800156c <main+0x214>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001502:	d3f9      	bcc.n	80014f8 <main+0x1a0>
 8001504:	e7a3      	b.n	800144e <main+0xf6>

		} else {

			if (HAL_GPIO_ReadPin(CamPosition_GPIO_Port, CamPosition_Pin) == GPIO_PIN_RESET) {
 8001506:	2101      	movs	r1, #1
 8001508:	4814      	ldr	r0, [pc, #80]	@ (800155c <main+0x204>)
 800150a:	f001 fad7 	bl	8002abc <HAL_GPIO_ReadPin>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d115      	bne.n	8001540 <main+0x1e8>

				sprintf((char *)Buf, "%u \r\n", TriggerNum);
 8001514:	4b1c      	ldr	r3, [pc, #112]	@ (8001588 <main+0x230>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	461a      	mov	r2, r3
 800151a:	491c      	ldr	r1, [pc, #112]	@ (800158c <main+0x234>)
 800151c:	481c      	ldr	r0, [pc, #112]	@ (8001590 <main+0x238>)
 800151e:	f008 fc2d 	bl	8009d7c <siprintf>
				CDC_Transmit_FS(Buf, strlen((char *)Buf));
 8001522:	481b      	ldr	r0, [pc, #108]	@ (8001590 <main+0x238>)
 8001524:	f7fe fe5c 	bl	80001e0 <strlen>
 8001528:	4603      	mov	r3, r0
 800152a:	b29b      	uxth	r3, r3
 800152c:	4619      	mov	r1, r3
 800152e:	4818      	ldr	r0, [pc, #96]	@ (8001590 <main+0x238>)
 8001530:	f007 ffe2 	bl	80094f8 <CDC_Transmit_FS>

				TriggerNum = 1;
 8001534:	4b14      	ldr	r3, [pc, #80]	@ (8001588 <main+0x230>)
 8001536:	2201      	movs	r2, #1
 8001538:	701a      	strb	r2, [r3, #0]
				FirstCycle = false;
 800153a:	4b0d      	ldr	r3, [pc, #52]	@ (8001570 <main+0x218>)
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
			}

			while (__HAL_TIM_GET_COUNTER(&htim2) < 1000);
 8001540:	bf00      	nop
 8001542:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <main+0x214>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001548:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800154c:	d3f9      	bcc.n	8001542 <main+0x1ea>
	 if (HAL_GPIO_ReadPin(Trigger_GPIO_Port, Trigger_Pin) == GPIO_PIN_SET) {
 800154e:	e77e      	b.n	800144e <main+0xf6>
 8001550:	47ae147b 	.word	0x47ae147b
 8001554:	3f747ae1 	.word	0x3f747ae1
 8001558:	40020800 	.word	0x40020800
 800155c:	40020000 	.word	0x40020000
 8001560:	20000000 	.word	0x20000000
 8001564:	3e99999a 	.word	0x3e99999a
 8001568:	3e99999a 	.word	0x3e99999a
 800156c:	200001b4 	.word	0x200001b4
 8001570:	20000022 	.word	0x20000022
 8001574:	200002ac 	.word	0x200002ac
 8001578:	00e4e1c0 	.word	0x00e4e1c0
 800157c:	200002a6 	.word	0x200002a6
 8001580:	200002a8 	.word	0x200002a8
 8001584:	40020400 	.word	0x40020400
 8001588:	20000021 	.word	0x20000021
 800158c:	0800b620 	.word	0x0800b620
 8001590:	200002b4 	.word	0x200002b4

08001594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b094      	sub	sp, #80	@ 0x50
 8001598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159a:	f107 0320 	add.w	r3, r7, #32
 800159e:	2230      	movs	r2, #48	@ 0x30
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f008 fc0a 	bl	8009dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	4b28      	ldr	r3, [pc, #160]	@ (8001660 <SystemClock_Config+0xcc>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c0:	4a27      	ldr	r2, [pc, #156]	@ (8001660 <SystemClock_Config+0xcc>)
 80015c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c8:	4b25      	ldr	r3, [pc, #148]	@ (8001660 <SystemClock_Config+0xcc>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015d4:	2300      	movs	r3, #0
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	4b22      	ldr	r3, [pc, #136]	@ (8001664 <SystemClock_Config+0xd0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a21      	ldr	r2, [pc, #132]	@ (8001664 <SystemClock_Config+0xd0>)
 80015de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001664 <SystemClock_Config+0xd0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015f0:	2301      	movs	r3, #1
 80015f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015fa:	2302      	movs	r3, #2
 80015fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 23;
 8001604:	2317      	movs	r3, #23
 8001606:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 354;
 8001608:	f44f 73b1 	mov.w	r3, #354	@ 0x162
 800160c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800160e:	2304      	movs	r3, #4
 8001610:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001612:	2308      	movs	r3, #8
 8001614:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001616:	f107 0320 	add.w	r3, r7, #32
 800161a:	4618      	mov	r0, r3
 800161c:	f002 fce8 	bl	8003ff0 <HAL_RCC_OscConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001626:	f000 f9e3 	bl	80019f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162a:	230f      	movs	r3, #15
 800162c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800162e:	2302      	movs	r3, #2
 8001630:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001636:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800163a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	2103      	movs	r1, #3
 8001646:	4618      	mov	r0, r3
 8001648:	f002 ff4a 	bl	80044e0 <HAL_RCC_ClockConfig>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001652:	f000 f9cd 	bl	80019f0 <Error_Handler>
  }
}
 8001656:	bf00      	nop
 8001658:	3750      	adds	r7, #80	@ 0x50
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800
 8001664:	40007000 	.word	0x40007000

08001668 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166e:	f107 0308 	add.w	r3, r7, #8
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800167c:	463b      	mov	r3, r7
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001684:	4b1d      	ldr	r3, [pc, #116]	@ (80016fc <MX_TIM2_Init+0x94>)
 8001686:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800168a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 800168c:	4b1b      	ldr	r3, [pc, #108]	@ (80016fc <MX_TIM2_Init+0x94>)
 800168e:	225f      	movs	r2, #95	@ 0x5f
 8001690:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001692:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <MX_TIM2_Init+0x94>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 80000;
 8001698:	4b18      	ldr	r3, [pc, #96]	@ (80016fc <MX_TIM2_Init+0x94>)
 800169a:	4a19      	ldr	r2, [pc, #100]	@ (8001700 <MX_TIM2_Init+0x98>)
 800169c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169e:	4b17      	ldr	r3, [pc, #92]	@ (80016fc <MX_TIM2_Init+0x94>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016a4:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <MX_TIM2_Init+0x94>)
 80016a6:	2280      	movs	r2, #128	@ 0x80
 80016a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016aa:	4814      	ldr	r0, [pc, #80]	@ (80016fc <MX_TIM2_Init+0x94>)
 80016ac:	f003 f8d0 	bl	8004850 <HAL_TIM_Base_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80016b6:	f000 f99b 	bl	80019f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016c0:	f107 0308 	add.w	r3, r7, #8
 80016c4:	4619      	mov	r1, r3
 80016c6:	480d      	ldr	r0, [pc, #52]	@ (80016fc <MX_TIM2_Init+0x94>)
 80016c8:	f003 fdec 	bl	80052a4 <HAL_TIM_ConfigClockSource>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80016d2:	f000 f98d 	bl	80019f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016de:	463b      	mov	r3, r7
 80016e0:	4619      	mov	r1, r3
 80016e2:	4806      	ldr	r0, [pc, #24]	@ (80016fc <MX_TIM2_Init+0x94>)
 80016e4:	f004 fa80 	bl	8005be8 <HAL_TIMEx_MasterConfigSynchronization>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80016ee:	f000 f97f 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016f2:	bf00      	nop
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200001b4 	.word	0x200001b4
 8001700:	00013880 	.word	0x00013880

08001704 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	@ 0x28
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170a:	f107 0320 	add.w	r3, r7, #32
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	611a      	str	r2, [r3, #16]
 8001722:	615a      	str	r2, [r3, #20]
 8001724:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001726:	4b21      	ldr	r3, [pc, #132]	@ (80017ac <MX_TIM4_Init+0xa8>)
 8001728:	4a21      	ldr	r2, [pc, #132]	@ (80017b0 <MX_TIM4_Init+0xac>)
 800172a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800172c:	4b1f      	ldr	r3, [pc, #124]	@ (80017ac <MX_TIM4_Init+0xa8>)
 800172e:	2200      	movs	r2, #0
 8001730:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001732:	4b1e      	ldr	r3, [pc, #120]	@ (80017ac <MX_TIM4_Init+0xa8>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 125-1;
 8001738:	4b1c      	ldr	r3, [pc, #112]	@ (80017ac <MX_TIM4_Init+0xa8>)
 800173a:	227c      	movs	r2, #124	@ 0x7c
 800173c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173e:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <MX_TIM4_Init+0xa8>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001744:	4b19      	ldr	r3, [pc, #100]	@ (80017ac <MX_TIM4_Init+0xa8>)
 8001746:	2200      	movs	r2, #0
 8001748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800174a:	4818      	ldr	r0, [pc, #96]	@ (80017ac <MX_TIM4_Init+0xa8>)
 800174c:	f003 f932 	bl	80049b4 <HAL_TIM_PWM_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001756:	f000 f94b 	bl	80019f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001762:	f107 0320 	add.w	r3, r7, #32
 8001766:	4619      	mov	r1, r3
 8001768:	4810      	ldr	r0, [pc, #64]	@ (80017ac <MX_TIM4_Init+0xa8>)
 800176a:	f004 fa3d 	bl	8005be8 <HAL_TIMEx_MasterConfigSynchronization>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001774:	f000 f93c 	bl	80019f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001778:	2360      	movs	r3, #96	@ 0x60
 800177a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	2204      	movs	r2, #4
 800178c:	4619      	mov	r1, r3
 800178e:	4807      	ldr	r0, [pc, #28]	@ (80017ac <MX_TIM4_Init+0xa8>)
 8001790:	f003 fcc6 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800179a:	f000 f929 	bl	80019f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800179e:	4803      	ldr	r0, [pc, #12]	@ (80017ac <MX_TIM4_Init+0xa8>)
 80017a0:	f000 f9ce 	bl	8001b40 <HAL_TIM_MspPostInit>

}
 80017a4:	bf00      	nop
 80017a6:	3728      	adds	r7, #40	@ 0x28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	200001fc 	.word	0x200001fc
 80017b0:	40000800 	.word	0x40000800

080017b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	4b0c      	ldr	r3, [pc, #48]	@ (80017f0 <MX_DMA_Init+0x3c>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	4a0b      	ldr	r2, [pc, #44]	@ (80017f0 <MX_DMA_Init+0x3c>)
 80017c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ca:	4b09      	ldr	r3, [pc, #36]	@ (80017f0 <MX_DMA_Init+0x3c>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2100      	movs	r1, #0
 80017da:	200e      	movs	r0, #14
 80017dc:	f000 fc21 	bl	8002022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80017e0:	200e      	movs	r0, #14
 80017e2:	f000 fc3a 	bl	800205a <HAL_NVIC_EnableIRQ>

}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800

080017f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	@ 0x28
 80017f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	4b48      	ldr	r3, [pc, #288]	@ (8001930 <MX_GPIO_Init+0x13c>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	4a47      	ldr	r2, [pc, #284]	@ (8001930 <MX_GPIO_Init+0x13c>)
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	6313      	str	r3, [r2, #48]	@ 0x30
 800181a:	4b45      	ldr	r3, [pc, #276]	@ (8001930 <MX_GPIO_Init+0x13c>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	4b41      	ldr	r3, [pc, #260]	@ (8001930 <MX_GPIO_Init+0x13c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	4a40      	ldr	r2, [pc, #256]	@ (8001930 <MX_GPIO_Init+0x13c>)
 8001830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001834:	6313      	str	r3, [r2, #48]	@ 0x30
 8001836:	4b3e      	ldr	r3, [pc, #248]	@ (8001930 <MX_GPIO_Init+0x13c>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	4b3a      	ldr	r3, [pc, #232]	@ (8001930 <MX_GPIO_Init+0x13c>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4a39      	ldr	r2, [pc, #228]	@ (8001930 <MX_GPIO_Init+0x13c>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4b37      	ldr	r3, [pc, #220]	@ (8001930 <MX_GPIO_Init+0x13c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	4b33      	ldr	r3, [pc, #204]	@ (8001930 <MX_GPIO_Init+0x13c>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	4a32      	ldr	r2, [pc, #200]	@ (8001930 <MX_GPIO_Init+0x13c>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	6313      	str	r3, [r2, #48]	@ 0x30
 800186e:	4b30      	ldr	r3, [pc, #192]	@ (8001930 <MX_GPIO_Init+0x13c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 800187a:	2200      	movs	r2, #0
 800187c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001880:	482c      	ldr	r0, [pc, #176]	@ (8001934 <MX_GPIO_Init+0x140>)
 8001882:	f001 f933 	bl	8002aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ignition_GPIO_Port, Ignition_Pin, GPIO_PIN_RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	2120      	movs	r1, #32
 800188a:	482b      	ldr	r0, [pc, #172]	@ (8001938 <MX_GPIO_Init+0x144>)
 800188c:	f001 f92e 	bl	8002aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 8001890:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001896:	2301      	movs	r3, #1
 8001898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189e:	2300      	movs	r3, #0
 80018a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	4822      	ldr	r0, [pc, #136]	@ (8001934 <MX_GPIO_Init+0x140>)
 80018aa:	f000 ff83 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CamPosition_Pin TwoStep_Pin */
  GPIO_InitStruct.Pin = CamPosition_Pin|TwoStep_Pin;
 80018ae:	2303      	movs	r3, #3
 80018b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4619      	mov	r1, r3
 80018c0:	481d      	ldr	r0, [pc, #116]	@ (8001938 <MX_GPIO_Init+0x144>)
 80018c2:	f000 ff77 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Trigger_Pin */
  GPIO_InitStruct.Pin = Trigger_Pin;
 80018c6:	2308      	movs	r3, #8
 80018c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	4619      	mov	r1, r3
 80018da:	4817      	ldr	r0, [pc, #92]	@ (8001938 <MX_GPIO_Init+0x144>)
 80018dc:	f000 ff6a 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ignition_Pin */
  GPIO_InitStruct.Pin = Ignition_Pin;
 80018e0:	2320      	movs	r3, #32
 80018e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Ignition_GPIO_Port, &GPIO_InitStruct);
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4619      	mov	r1, r3
 80018f6:	4810      	ldr	r0, [pc, #64]	@ (8001938 <MX_GPIO_Init+0x144>)
 80018f8:	f000 ff5c 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : QuickShifter_Pin */
  GPIO_InitStruct.Pin = QuickShifter_Pin;
 80018fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001906:	2301      	movs	r3, #1
 8001908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(QuickShifter_GPIO_Port, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	480a      	ldr	r0, [pc, #40]	@ (800193c <MX_GPIO_Init+0x148>)
 8001912:	f000 ff4f 	bl	80027b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2100      	movs	r1, #0
 800191a:	2009      	movs	r0, #9
 800191c:	f000 fb81 	bl	8002022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001920:	2009      	movs	r0, #9
 8001922:	f000 fb9a 	bl	800205a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001926:	bf00      	nop
 8001928:	3728      	adds	r7, #40	@ 0x28
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	40020800 	.word	0x40020800
 8001938:	40020000 	.word	0x40020000
 800193c:	40020400 	.word	0x40020400

08001940 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Timer2 (Igntion pin) timout interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001950:	d10a      	bne.n	8001968 <HAL_TIM_PeriodElapsedCallback+0x28>
	  HAL_GPIO_WritePin(Ignition_GPIO_Port, Ignition_Pin, GPIO_PIN_SET);
 8001952:	2201      	movs	r2, #1
 8001954:	2120      	movs	r1, #32
 8001956:	4806      	ldr	r0, [pc, #24]	@ (8001970 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001958:	f001 f8c8 	bl	8002aec <HAL_GPIO_WritePin>
	  FirstCycle = 1;
 800195c:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800195e:	2201      	movs	r2, #1
 8001960:	701a      	strb	r2, [r3, #0]
	  TriggerNum = 99;
 8001962:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001964:	2263      	movs	r2, #99	@ 0x63
 8001966:	701a      	strb	r2, [r3, #0]
  }
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40020000 	.word	0x40020000
 8001974:	20000022 	.word	0x20000022
 8001978:	20000021 	.word	0x20000021

0800197c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	80fb      	strh	r3, [r7, #6]
  // Prevent unused argument(s) compilation warning
  UNUSED(GPIO_Pin);

  if (HAL_GPIO_ReadPin(Trigger_GPIO_Port, Trigger_Pin) == GPIO_PIN_SET && __HAL_TIM_GET_COUNTER(&htim2) > 1000) {
 8001986:	2108      	movs	r1, #8
 8001988:	4815      	ldr	r0, [pc, #84]	@ (80019e0 <HAL_GPIO_EXTI_Callback+0x64>)
 800198a:	f001 f897 	bl	8002abc <HAL_GPIO_ReadPin>
 800198e:	4603      	mov	r3, r0
 8001990:	2b01      	cmp	r3, #1
 8001992:	d120      	bne.n	80019d6 <HAL_GPIO_EXTI_Callback+0x5a>
 8001994:	4b13      	ldr	r3, [pc, #76]	@ (80019e4 <HAL_GPIO_EXTI_Callback+0x68>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800199e:	d91a      	bls.n	80019d6 <HAL_GPIO_EXTI_Callback+0x5a>
	  PulseInterval = __HAL_TIM_GET_COUNTER(&htim2);
 80019a0:	4b10      	ldr	r3, [pc, #64]	@ (80019e4 <HAL_GPIO_EXTI_Callback+0x68>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a6:	4a10      	ldr	r2, [pc, #64]	@ (80019e8 <HAL_GPIO_EXTI_Callback+0x6c>)
 80019a8:	6013      	str	r3, [r2, #0]
	  TIM2->CNT = 0;
 80019aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019ae:	2200      	movs	r2, #0
 80019b0:	625a      	str	r2, [r3, #36]	@ 0x24

	  if (TriggerNum != 99) {
 80019b2:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <HAL_GPIO_EXTI_Callback+0x70>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b63      	cmp	r3, #99	@ 0x63
 80019b8:	d00d      	beq.n	80019d6 <HAL_GPIO_EXTI_Callback+0x5a>
		  if (TriggerNum == 8){
 80019ba:	4b0c      	ldr	r3, [pc, #48]	@ (80019ec <HAL_GPIO_EXTI_Callback+0x70>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b08      	cmp	r3, #8
 80019c0:	d103      	bne.n	80019ca <HAL_GPIO_EXTI_Callback+0x4e>
			  TriggerNum = 1;
 80019c2:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <HAL_GPIO_EXTI_Callback+0x70>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	701a      	strb	r2, [r3, #0]
		  } else {
			  TriggerNum++;
		  }
	  }
  }
}
 80019c8:	e005      	b.n	80019d6 <HAL_GPIO_EXTI_Callback+0x5a>
			  TriggerNum++;
 80019ca:	4b08      	ldr	r3, [pc, #32]	@ (80019ec <HAL_GPIO_EXTI_Callback+0x70>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	3301      	adds	r3, #1
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <HAL_GPIO_EXTI_Callback+0x70>)
 80019d4:	701a      	strb	r2, [r3, #0]
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40020000 	.word	0x40020000
 80019e4:	200001b4 	.word	0x200001b4
 80019e8:	200002ac 	.word	0x200002ac
 80019ec:	20000021 	.word	0x20000021

080019f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f4:	b672      	cpsid	i
}
 80019f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f8:	bf00      	nop
 80019fa:	e7fd      	b.n	80019f8 <Error_Handler+0x8>

080019fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	607b      	str	r3, [r7, #4]
 8001a06:	4b10      	ldr	r3, [pc, #64]	@ (8001a48 <HAL_MspInit+0x4c>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a48 <HAL_MspInit+0x4c>)
 8001a0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a12:	4b0d      	ldr	r3, [pc, #52]	@ (8001a48 <HAL_MspInit+0x4c>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <HAL_MspInit+0x4c>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a26:	4a08      	ldr	r2, [pc, #32]	@ (8001a48 <HAL_MspInit+0x4c>)
 8001a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a2e:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <HAL_MspInit+0x4c>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800

08001a4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a5c:	d115      	bne.n	8001a8a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <HAL_TIM_Base_MspInit+0x48>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	4a0b      	ldr	r2, [pc, #44]	@ (8001a94 <HAL_TIM_Base_MspInit+0x48>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6e:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <HAL_TIM_Base_MspInit+0x48>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	201c      	movs	r0, #28
 8001a80:	f000 facf 	bl	8002022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a84:	201c      	movs	r0, #28
 8001a86:	f000 fae8 	bl	800205a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800

08001a98 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a22      	ldr	r2, [pc, #136]	@ (8001b30 <HAL_TIM_PWM_MspInit+0x98>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d13d      	bne.n	8001b26 <HAL_TIM_PWM_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	4b21      	ldr	r3, [pc, #132]	@ (8001b34 <HAL_TIM_PWM_MspInit+0x9c>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	4a20      	ldr	r2, [pc, #128]	@ (8001b34 <HAL_TIM_PWM_MspInit+0x9c>)
 8001ab4:	f043 0304 	orr.w	r3, r3, #4
 8001ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aba:	4b1e      	ldr	r3, [pc, #120]	@ (8001b34 <HAL_TIM_PWM_MspInit+0x9c>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH2 Init */
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 8001ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b38 <HAL_TIM_PWM_MspInit+0xa0>)
 8001ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8001b3c <HAL_TIM_PWM_MspInit+0xa4>)
 8001aca:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 8001acc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b38 <HAL_TIM_PWM_MspInit+0xa0>)
 8001ace:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ad2:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ad4:	4b18      	ldr	r3, [pc, #96]	@ (8001b38 <HAL_TIM_PWM_MspInit+0xa0>)
 8001ad6:	2240      	movs	r2, #64	@ 0x40
 8001ad8:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ada:	4b17      	ldr	r3, [pc, #92]	@ (8001b38 <HAL_TIM_PWM_MspInit+0xa0>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001ae0:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <HAL_TIM_PWM_MspInit+0xa0>)
 8001ae2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ae6:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ae8:	4b13      	ldr	r3, [pc, #76]	@ (8001b38 <HAL_TIM_PWM_MspInit+0xa0>)
 8001aea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001aee:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001af0:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <HAL_TIM_PWM_MspInit+0xa0>)
 8001af2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001af6:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_NORMAL;
 8001af8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b38 <HAL_TIM_PWM_MspInit+0xa0>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001afe:	4b0e      	ldr	r3, [pc, #56]	@ (8001b38 <HAL_TIM_PWM_MspInit+0xa0>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b04:	4b0c      	ldr	r3, [pc, #48]	@ (8001b38 <HAL_TIM_PWM_MspInit+0xa0>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 8001b0a:	480b      	ldr	r0, [pc, #44]	@ (8001b38 <HAL_TIM_PWM_MspInit+0xa0>)
 8001b0c:	f000 fac0 	bl	8002090 <HAL_DMA_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8001b16:	f7ff ff6b 	bl	80019f0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a06      	ldr	r2, [pc, #24]	@ (8001b38 <HAL_TIM_PWM_MspInit+0xa0>)
 8001b1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b20:	4a05      	ldr	r2, [pc, #20]	@ (8001b38 <HAL_TIM_PWM_MspInit+0xa0>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40000800 	.word	0x40000800
 8001b34:	40023800 	.word	0x40023800
 8001b38:	20000244 	.word	0x20000244
 8001b3c:	40026058 	.word	0x40026058

08001b40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 030c 	add.w	r3, r7, #12
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a12      	ldr	r2, [pc, #72]	@ (8001ba8 <HAL_TIM_MspPostInit+0x68>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d11d      	bne.n	8001b9e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <HAL_TIM_MspPostInit+0x6c>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6a:	4a10      	ldr	r2, [pc, #64]	@ (8001bac <HAL_TIM_MspPostInit+0x6c>)
 8001b6c:	f043 0302 	orr.w	r3, r3, #2
 8001b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b72:	4b0e      	ldr	r3, [pc, #56]	@ (8001bac <HAL_TIM_MspPostInit+0x6c>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b7e:	2380      	movs	r3, #128	@ 0x80
 8001b80:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b92:	f107 030c 	add.w	r3, r7, #12
 8001b96:	4619      	mov	r1, r3
 8001b98:	4805      	ldr	r0, [pc, #20]	@ (8001bb0 <HAL_TIM_MspPostInit+0x70>)
 8001b9a:	f000 fe0b 	bl	80027b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b9e:	bf00      	nop
 8001ba0:	3720      	adds	r7, #32
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40000800 	.word	0x40000800
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40020400 	.word	0x40020400

08001bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <NMI_Handler+0x4>

08001bbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <HardFault_Handler+0x4>

08001bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <MemManage_Handler+0x4>

08001bcc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <BusFault_Handler+0x4>

08001bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <UsageFault_Handler+0x4>

08001bdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c0a:	f000 f8eb 	bl	8001de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Trigger_Pin);
 8001c16:	2008      	movs	r0, #8
 8001c18:	f000 ff82 	bl	8002b20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8001c24:	4802      	ldr	r0, [pc, #8]	@ (8001c30 <DMA1_Stream3_IRQHandler+0x10>)
 8001c26:	f000 fb5b 	bl	80022e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000244 	.word	0x20000244

08001c34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c38:	4802      	ldr	r0, [pc, #8]	@ (8001c44 <TIM2_IRQHandler+0x10>)
 8001c3a:	f003 f981 	bl	8004f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200001b4 	.word	0x200001b4

08001c48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c4c:	4802      	ldr	r0, [pc, #8]	@ (8001c58 <OTG_FS_IRQHandler+0x10>)
 8001c4e:	f001 f8c3 	bl	8002dd8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20001a74 	.word	0x20001a74

08001c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c64:	4a14      	ldr	r2, [pc, #80]	@ (8001cb8 <_sbrk+0x5c>)
 8001c66:	4b15      	ldr	r3, [pc, #84]	@ (8001cbc <_sbrk+0x60>)
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c70:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <_sbrk+0x64>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d102      	bne.n	8001c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c78:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <_sbrk+0x64>)
 8001c7a:	4a12      	ldr	r2, [pc, #72]	@ (8001cc4 <_sbrk+0x68>)
 8001c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c7e:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <_sbrk+0x64>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d207      	bcs.n	8001c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c8c:	f008 f89e 	bl	8009dcc <__errno>
 8001c90:	4603      	mov	r3, r0
 8001c92:	220c      	movs	r2, #12
 8001c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9a:	e009      	b.n	8001cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c9c:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <_sbrk+0x64>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ca2:	4b07      	ldr	r3, [pc, #28]	@ (8001cc0 <_sbrk+0x64>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	4a05      	ldr	r2, [pc, #20]	@ (8001cc0 <_sbrk+0x64>)
 8001cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cae:	68fb      	ldr	r3, [r7, #12]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20020000 	.word	0x20020000
 8001cbc:	00000400 	.word	0x00000400
 8001cc0:	2000058c 	.word	0x2000058c
 8001cc4:	200022c0 	.word	0x200022c0

08001cc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ccc:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <SystemInit+0x20>)
 8001cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cd2:	4a05      	ldr	r2, [pc, #20]	@ (8001ce8 <SystemInit+0x20>)
 8001cd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cf0:	f7ff ffea 	bl	8001cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cf4:	480c      	ldr	r0, [pc, #48]	@ (8001d28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cf6:	490d      	ldr	r1, [pc, #52]	@ (8001d2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cfc:	e002      	b.n	8001d04 <LoopCopyDataInit>

08001cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d02:	3304      	adds	r3, #4

08001d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d08:	d3f9      	bcc.n	8001cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d0c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d10:	e001      	b.n	8001d16 <LoopFillZerobss>

08001d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d14:	3204      	adds	r2, #4

08001d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d18:	d3fb      	bcc.n	8001d12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d1a:	f008 f85d 	bl	8009dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d1e:	f7ff fb1b 	bl	8001358 <main>
  bx  lr    
 8001d22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d2c:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8001d30:	0800b708 	.word	0x0800b708
  ldr r2, =_sbss
 8001d34:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8001d38:	200022c0 	.word	0x200022c0

08001d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d3c:	e7fe      	b.n	8001d3c <ADC_IRQHandler>
	...

08001d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d44:	4b0e      	ldr	r3, [pc, #56]	@ (8001d80 <HAL_Init+0x40>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a0d      	ldr	r2, [pc, #52]	@ (8001d80 <HAL_Init+0x40>)
 8001d4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d50:	4b0b      	ldr	r3, [pc, #44]	@ (8001d80 <HAL_Init+0x40>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0a      	ldr	r2, [pc, #40]	@ (8001d80 <HAL_Init+0x40>)
 8001d56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d5c:	4b08      	ldr	r3, [pc, #32]	@ (8001d80 <HAL_Init+0x40>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a07      	ldr	r2, [pc, #28]	@ (8001d80 <HAL_Init+0x40>)
 8001d62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d68:	2003      	movs	r0, #3
 8001d6a:	f000 f94f 	bl	800200c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d6e:	200f      	movs	r0, #15
 8001d70:	f000 f808 	bl	8001d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d74:	f7ff fe42 	bl	80019fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023c00 	.word	0x40023c00

08001d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d8c:	4b12      	ldr	r3, [pc, #72]	@ (8001dd8 <HAL_InitTick+0x54>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b12      	ldr	r3, [pc, #72]	@ (8001ddc <HAL_InitTick+0x58>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	4619      	mov	r1, r3
 8001d96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 f967 	bl	8002076 <HAL_SYSTICK_Config>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00e      	b.n	8001dd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b0f      	cmp	r3, #15
 8001db6:	d80a      	bhi.n	8001dce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db8:	2200      	movs	r2, #0
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc0:	f000 f92f 	bl	8002022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc4:	4a06      	ldr	r2, [pc, #24]	@ (8001de0 <HAL_InitTick+0x5c>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	e000      	b.n	8001dd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000038 	.word	0x20000038
 8001ddc:	20000040 	.word	0x20000040
 8001de0:	2000003c 	.word	0x2000003c

08001de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de8:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <HAL_IncTick+0x20>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <HAL_IncTick+0x24>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4413      	add	r3, r2
 8001df4:	4a04      	ldr	r2, [pc, #16]	@ (8001e08 <HAL_IncTick+0x24>)
 8001df6:	6013      	str	r3, [r2, #0]
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20000040 	.word	0x20000040
 8001e08:	20000590 	.word	0x20000590

08001e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e10:	4b03      	ldr	r3, [pc, #12]	@ (8001e20 <HAL_GetTick+0x14>)
 8001e12:	681b      	ldr	r3, [r3, #0]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	20000590 	.word	0x20000590

08001e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e2c:	f7ff ffee 	bl	8001e0c <HAL_GetTick>
 8001e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3c:	d005      	beq.n	8001e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e68 <HAL_Delay+0x44>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e4a:	bf00      	nop
 8001e4c:	f7ff ffde 	bl	8001e0c <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d8f7      	bhi.n	8001e4c <HAL_Delay+0x28>
  {
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000040 	.word	0x20000040

08001e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e9e:	4a04      	ldr	r2, [pc, #16]	@ (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	60d3      	str	r3, [r2, #12]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb8:	4b04      	ldr	r3, [pc, #16]	@ (8001ecc <__NVIC_GetPriorityGrouping+0x18>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	f003 0307 	and.w	r3, r3, #7
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	db0b      	blt.n	8001efa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	f003 021f 	and.w	r2, r3, #31
 8001ee8:	4907      	ldr	r1, [pc, #28]	@ (8001f08 <__NVIC_EnableIRQ+0x38>)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000e100 	.word	0xe000e100

08001f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	6039      	str	r1, [r7, #0]
 8001f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	db0a      	blt.n	8001f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	490c      	ldr	r1, [pc, #48]	@ (8001f58 <__NVIC_SetPriority+0x4c>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	0112      	lsls	r2, r2, #4
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	440b      	add	r3, r1
 8001f30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f34:	e00a      	b.n	8001f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4908      	ldr	r1, [pc, #32]	@ (8001f5c <__NVIC_SetPriority+0x50>)
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	3b04      	subs	r3, #4
 8001f44:	0112      	lsls	r2, r2, #4
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	440b      	add	r3, r1
 8001f4a:	761a      	strb	r2, [r3, #24]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000e100 	.word	0xe000e100
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	@ 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f1c3 0307 	rsb	r3, r3, #7
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	bf28      	it	cs
 8001f7e:	2304      	movcs	r3, #4
 8001f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3304      	adds	r3, #4
 8001f86:	2b06      	cmp	r3, #6
 8001f88:	d902      	bls.n	8001f90 <NVIC_EncodePriority+0x30>
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3b03      	subs	r3, #3
 8001f8e:	e000      	b.n	8001f92 <NVIC_EncodePriority+0x32>
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	f04f 32ff 	mov.w	r2, #4294967295
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb2:	43d9      	mvns	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb8:	4313      	orrs	r3, r2
         );
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3724      	adds	r7, #36	@ 0x24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fd8:	d301      	bcc.n	8001fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e00f      	b.n	8001ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fde:	4a0a      	ldr	r2, [pc, #40]	@ (8002008 <SysTick_Config+0x40>)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fe6:	210f      	movs	r1, #15
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fec:	f7ff ff8e 	bl	8001f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff0:	4b05      	ldr	r3, [pc, #20]	@ (8002008 <SysTick_Config+0x40>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ff6:	4b04      	ldr	r3, [pc, #16]	@ (8002008 <SysTick_Config+0x40>)
 8001ff8:	2207      	movs	r2, #7
 8001ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	e000e010 	.word	0xe000e010

0800200c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff ff29 	bl	8001e6c <__NVIC_SetPriorityGrouping>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	4603      	mov	r3, r0
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002034:	f7ff ff3e 	bl	8001eb4 <__NVIC_GetPriorityGrouping>
 8002038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	68b9      	ldr	r1, [r7, #8]
 800203e:	6978      	ldr	r0, [r7, #20]
 8002040:	f7ff ff8e 	bl	8001f60 <NVIC_EncodePriority>
 8002044:	4602      	mov	r2, r0
 8002046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff5d 	bl	8001f0c <__NVIC_SetPriority>
}
 8002052:	bf00      	nop
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff31 	bl	8001ed0 <__NVIC_EnableIRQ>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ffa2 	bl	8001fc8 <SysTick_Config>
 8002084:	4603      	mov	r3, r0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800209c:	f7ff feb6 	bl	8001e0c <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e099      	b.n	80021e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0201 	bic.w	r2, r2, #1
 80020ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020cc:	e00f      	b.n	80020ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020ce:	f7ff fe9d 	bl	8001e0c <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b05      	cmp	r3, #5
 80020da:	d908      	bls.n	80020ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2220      	movs	r2, #32
 80020e0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2203      	movs	r2, #3
 80020e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e078      	b.n	80021e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1e8      	bne.n	80020ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	4b38      	ldr	r3, [pc, #224]	@ (80021e8 <HAL_DMA_Init+0x158>)
 8002108:	4013      	ands	r3, r2
 800210a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800211a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002126:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002132:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4313      	orrs	r3, r2
 800213e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002144:	2b04      	cmp	r3, #4
 8002146:	d107      	bne.n	8002158 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002150:	4313      	orrs	r3, r2
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	4313      	orrs	r3, r2
 8002156:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f023 0307 	bic.w	r3, r3, #7
 800216e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	4313      	orrs	r3, r2
 8002178:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217e:	2b04      	cmp	r3, #4
 8002180:	d117      	bne.n	80021b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4313      	orrs	r3, r2
 800218a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00e      	beq.n	80021b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 fa91 	bl	80026bc <DMA_CheckFifoParam>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2240      	movs	r2, #64	@ 0x40
 80021a4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80021ae:	2301      	movs	r3, #1
 80021b0:	e016      	b.n	80021e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 fa48 	bl	8002650 <DMA_CalcBaseAndBitshift>
 80021c0:	4603      	mov	r3, r0
 80021c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c8:	223f      	movs	r2, #63	@ 0x3f
 80021ca:	409a      	lsls	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	f010803f 	.word	0xf010803f

080021ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
 80021f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002202:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_DMA_Start_IT+0x26>
 800220e:	2302      	movs	r3, #2
 8002210:	e040      	b.n	8002294 <HAL_DMA_Start_IT+0xa8>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b01      	cmp	r3, #1
 8002224:	d12f      	bne.n	8002286 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2202      	movs	r2, #2
 800222a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 f9da 	bl	80025f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002244:	223f      	movs	r2, #63	@ 0x3f
 8002246:	409a      	lsls	r2, r3
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0216 	orr.w	r2, r2, #22
 800225a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002260:	2b00      	cmp	r3, #0
 8002262:	d007      	beq.n	8002274 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0208 	orr.w	r2, r2, #8
 8002272:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0201 	orr.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e005      	b.n	8002292 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800228e:	2302      	movs	r3, #2
 8002290:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002292:	7dfb      	ldrb	r3, [r7, #23]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d004      	beq.n	80022ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2280      	movs	r2, #128	@ 0x80
 80022b4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e00c      	b.n	80022d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2205      	movs	r2, #5
 80022be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0201 	bic.w	r2, r2, #1
 80022d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022ec:	4b8e      	ldr	r3, [pc, #568]	@ (8002528 <HAL_DMA_IRQHandler+0x248>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a8e      	ldr	r2, [pc, #568]	@ (800252c <HAL_DMA_IRQHandler+0x24c>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	0a9b      	lsrs	r3, r3, #10
 80022f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800230a:	2208      	movs	r2, #8
 800230c:	409a      	lsls	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4013      	ands	r3, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d01a      	beq.n	800234c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	d013      	beq.n	800234c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0204 	bic.w	r2, r2, #4
 8002332:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002338:	2208      	movs	r2, #8
 800233a:	409a      	lsls	r2, r3
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002344:	f043 0201 	orr.w	r2, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002350:	2201      	movs	r2, #1
 8002352:	409a      	lsls	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4013      	ands	r3, r2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d012      	beq.n	8002382 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00b      	beq.n	8002382 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236e:	2201      	movs	r2, #1
 8002370:	409a      	lsls	r2, r3
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800237a:	f043 0202 	orr.w	r2, r3, #2
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002386:	2204      	movs	r2, #4
 8002388:	409a      	lsls	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4013      	ands	r3, r2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d012      	beq.n	80023b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00b      	beq.n	80023b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a4:	2204      	movs	r2, #4
 80023a6:	409a      	lsls	r2, r3
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b0:	f043 0204 	orr.w	r2, r3, #4
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023bc:	2210      	movs	r2, #16
 80023be:	409a      	lsls	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4013      	ands	r3, r2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d043      	beq.n	8002450 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d03c      	beq.n	8002450 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023da:	2210      	movs	r2, #16
 80023dc:	409a      	lsls	r2, r3
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d018      	beq.n	8002422 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d108      	bne.n	8002410 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	2b00      	cmp	r3, #0
 8002404:	d024      	beq.n	8002450 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	4798      	blx	r3
 800240e:	e01f      	b.n	8002450 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002414:	2b00      	cmp	r3, #0
 8002416:	d01b      	beq.n	8002450 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	4798      	blx	r3
 8002420:	e016      	b.n	8002450 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800242c:	2b00      	cmp	r3, #0
 800242e:	d107      	bne.n	8002440 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0208 	bic.w	r2, r2, #8
 800243e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002454:	2220      	movs	r2, #32
 8002456:	409a      	lsls	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4013      	ands	r3, r2
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 808f 	beq.w	8002580 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0310 	and.w	r3, r3, #16
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 8087 	beq.w	8002580 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002476:	2220      	movs	r2, #32
 8002478:	409a      	lsls	r2, r3
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b05      	cmp	r3, #5
 8002488:	d136      	bne.n	80024f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0216 	bic.w	r2, r2, #22
 8002498:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695a      	ldr	r2, [r3, #20]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d103      	bne.n	80024ba <HAL_DMA_IRQHandler+0x1da>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d007      	beq.n	80024ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0208 	bic.w	r2, r2, #8
 80024c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ce:	223f      	movs	r2, #63	@ 0x3f
 80024d0:	409a      	lsls	r2, r3
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d07e      	beq.n	80025ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	4798      	blx	r3
        }
        return;
 80024f6:	e079      	b.n	80025ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d01d      	beq.n	8002542 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10d      	bne.n	8002530 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002518:	2b00      	cmp	r3, #0
 800251a:	d031      	beq.n	8002580 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	4798      	blx	r3
 8002524:	e02c      	b.n	8002580 <HAL_DMA_IRQHandler+0x2a0>
 8002526:	bf00      	nop
 8002528:	20000038 	.word	0x20000038
 800252c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002534:	2b00      	cmp	r3, #0
 8002536:	d023      	beq.n	8002580 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	4798      	blx	r3
 8002540:	e01e      	b.n	8002580 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10f      	bne.n	8002570 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0210 	bic.w	r2, r2, #16
 800255e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002584:	2b00      	cmp	r3, #0
 8002586:	d032      	beq.n	80025ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b00      	cmp	r3, #0
 8002592:	d022      	beq.n	80025da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2205      	movs	r2, #5
 8002598:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0201 	bic.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	3301      	adds	r3, #1
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d307      	bcc.n	80025c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f2      	bne.n	80025ac <HAL_DMA_IRQHandler+0x2cc>
 80025c6:	e000      	b.n	80025ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80025c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d005      	beq.n	80025ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	4798      	blx	r3
 80025ea:	e000      	b.n	80025ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80025ec:	bf00      	nop
    }
  }
}
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002610:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b40      	cmp	r3, #64	@ 0x40
 8002620:	d108      	bne.n	8002634 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002632:	e007      	b.n	8002644 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	60da      	str	r2, [r3, #12]
}
 8002644:	bf00      	nop
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	3b10      	subs	r3, #16
 8002660:	4a14      	ldr	r2, [pc, #80]	@ (80026b4 <DMA_CalcBaseAndBitshift+0x64>)
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	091b      	lsrs	r3, r3, #4
 8002668:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800266a:	4a13      	ldr	r2, [pc, #76]	@ (80026b8 <DMA_CalcBaseAndBitshift+0x68>)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4413      	add	r3, r2
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2b03      	cmp	r3, #3
 800267c:	d909      	bls.n	8002692 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002686:	f023 0303 	bic.w	r3, r3, #3
 800268a:	1d1a      	adds	r2, r3, #4
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002690:	e007      	b.n	80026a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800269a:	f023 0303 	bic.w	r3, r3, #3
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	aaaaaaab 	.word	0xaaaaaaab
 80026b8:	0800b688 	.word	0x0800b688

080026bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d11f      	bne.n	8002716 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d856      	bhi.n	800278a <DMA_CheckFifoParam+0xce>
 80026dc:	a201      	add	r2, pc, #4	@ (adr r2, 80026e4 <DMA_CheckFifoParam+0x28>)
 80026de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e2:	bf00      	nop
 80026e4:	080026f5 	.word	0x080026f5
 80026e8:	08002707 	.word	0x08002707
 80026ec:	080026f5 	.word	0x080026f5
 80026f0:	0800278b 	.word	0x0800278b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d046      	beq.n	800278e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002704:	e043      	b.n	800278e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800270e:	d140      	bne.n	8002792 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002714:	e03d      	b.n	8002792 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800271e:	d121      	bne.n	8002764 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b03      	cmp	r3, #3
 8002724:	d837      	bhi.n	8002796 <DMA_CheckFifoParam+0xda>
 8002726:	a201      	add	r2, pc, #4	@ (adr r2, 800272c <DMA_CheckFifoParam+0x70>)
 8002728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272c:	0800273d 	.word	0x0800273d
 8002730:	08002743 	.word	0x08002743
 8002734:	0800273d 	.word	0x0800273d
 8002738:	08002755 	.word	0x08002755
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
      break;
 8002740:	e030      	b.n	80027a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002746:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d025      	beq.n	800279a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002752:	e022      	b.n	800279a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002758:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800275c:	d11f      	bne.n	800279e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002762:	e01c      	b.n	800279e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d903      	bls.n	8002772 <DMA_CheckFifoParam+0xb6>
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2b03      	cmp	r3, #3
 800276e:	d003      	beq.n	8002778 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002770:	e018      	b.n	80027a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	73fb      	strb	r3, [r7, #15]
      break;
 8002776:	e015      	b.n	80027a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800277c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00e      	beq.n	80027a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
      break;
 8002788:	e00b      	b.n	80027a2 <DMA_CheckFifoParam+0xe6>
      break;
 800278a:	bf00      	nop
 800278c:	e00a      	b.n	80027a4 <DMA_CheckFifoParam+0xe8>
      break;
 800278e:	bf00      	nop
 8002790:	e008      	b.n	80027a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002792:	bf00      	nop
 8002794:	e006      	b.n	80027a4 <DMA_CheckFifoParam+0xe8>
      break;
 8002796:	bf00      	nop
 8002798:	e004      	b.n	80027a4 <DMA_CheckFifoParam+0xe8>
      break;
 800279a:	bf00      	nop
 800279c:	e002      	b.n	80027a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800279e:	bf00      	nop
 80027a0:	e000      	b.n	80027a4 <DMA_CheckFifoParam+0xe8>
      break;
 80027a2:	bf00      	nop
    }
  } 
  
  return status; 
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop

080027b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b089      	sub	sp, #36	@ 0x24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
 80027ce:	e159      	b.n	8002a84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027d0:	2201      	movs	r2, #1
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	4013      	ands	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	f040 8148 	bne.w	8002a7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d005      	beq.n	8002806 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002802:	2b02      	cmp	r3, #2
 8002804:	d130      	bne.n	8002868 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	2203      	movs	r2, #3
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800283c:	2201      	movs	r2, #1
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	091b      	lsrs	r3, r3, #4
 8002852:	f003 0201 	and.w	r2, r3, #1
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 0303 	and.w	r3, r3, #3
 8002870:	2b03      	cmp	r3, #3
 8002872:	d017      	beq.n	80028a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	2203      	movs	r2, #3
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d123      	bne.n	80028f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	08da      	lsrs	r2, r3, #3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3208      	adds	r2, #8
 80028b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	220f      	movs	r2, #15
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	08da      	lsrs	r2, r3, #3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3208      	adds	r2, #8
 80028f2:	69b9      	ldr	r1, [r7, #24]
 80028f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	2203      	movs	r2, #3
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 0203 	and.w	r2, r3, #3
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 80a2 	beq.w	8002a7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	4b57      	ldr	r3, [pc, #348]	@ (8002a9c <HAL_GPIO_Init+0x2e8>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002942:	4a56      	ldr	r2, [pc, #344]	@ (8002a9c <HAL_GPIO_Init+0x2e8>)
 8002944:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002948:	6453      	str	r3, [r2, #68]	@ 0x44
 800294a:	4b54      	ldr	r3, [pc, #336]	@ (8002a9c <HAL_GPIO_Init+0x2e8>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002956:	4a52      	ldr	r2, [pc, #328]	@ (8002aa0 <HAL_GPIO_Init+0x2ec>)
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	089b      	lsrs	r3, r3, #2
 800295c:	3302      	adds	r3, #2
 800295e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002962:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	220f      	movs	r2, #15
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43db      	mvns	r3, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4013      	ands	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a49      	ldr	r2, [pc, #292]	@ (8002aa4 <HAL_GPIO_Init+0x2f0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d019      	beq.n	80029b6 <HAL_GPIO_Init+0x202>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a48      	ldr	r2, [pc, #288]	@ (8002aa8 <HAL_GPIO_Init+0x2f4>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d013      	beq.n	80029b2 <HAL_GPIO_Init+0x1fe>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a47      	ldr	r2, [pc, #284]	@ (8002aac <HAL_GPIO_Init+0x2f8>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d00d      	beq.n	80029ae <HAL_GPIO_Init+0x1fa>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a46      	ldr	r2, [pc, #280]	@ (8002ab0 <HAL_GPIO_Init+0x2fc>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d007      	beq.n	80029aa <HAL_GPIO_Init+0x1f6>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a45      	ldr	r2, [pc, #276]	@ (8002ab4 <HAL_GPIO_Init+0x300>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d101      	bne.n	80029a6 <HAL_GPIO_Init+0x1f2>
 80029a2:	2304      	movs	r3, #4
 80029a4:	e008      	b.n	80029b8 <HAL_GPIO_Init+0x204>
 80029a6:	2307      	movs	r3, #7
 80029a8:	e006      	b.n	80029b8 <HAL_GPIO_Init+0x204>
 80029aa:	2303      	movs	r3, #3
 80029ac:	e004      	b.n	80029b8 <HAL_GPIO_Init+0x204>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e002      	b.n	80029b8 <HAL_GPIO_Init+0x204>
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <HAL_GPIO_Init+0x204>
 80029b6:	2300      	movs	r3, #0
 80029b8:	69fa      	ldr	r2, [r7, #28]
 80029ba:	f002 0203 	and.w	r2, r2, #3
 80029be:	0092      	lsls	r2, r2, #2
 80029c0:	4093      	lsls	r3, r2
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029c8:	4935      	ldr	r1, [pc, #212]	@ (8002aa0 <HAL_GPIO_Init+0x2ec>)
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	089b      	lsrs	r3, r3, #2
 80029ce:	3302      	adds	r3, #2
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029d6:	4b38      	ldr	r3, [pc, #224]	@ (8002ab8 <HAL_GPIO_Init+0x304>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029fa:	4a2f      	ldr	r2, [pc, #188]	@ (8002ab8 <HAL_GPIO_Init+0x304>)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a00:	4b2d      	ldr	r3, [pc, #180]	@ (8002ab8 <HAL_GPIO_Init+0x304>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a24:	4a24      	ldr	r2, [pc, #144]	@ (8002ab8 <HAL_GPIO_Init+0x304>)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a2a:	4b23      	ldr	r3, [pc, #140]	@ (8002ab8 <HAL_GPIO_Init+0x304>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	43db      	mvns	r3, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a4e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ab8 <HAL_GPIO_Init+0x304>)
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a54:	4b18      	ldr	r3, [pc, #96]	@ (8002ab8 <HAL_GPIO_Init+0x304>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a78:	4a0f      	ldr	r2, [pc, #60]	@ (8002ab8 <HAL_GPIO_Init+0x304>)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3301      	adds	r3, #1
 8002a82:	61fb      	str	r3, [r7, #28]
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	2b0f      	cmp	r3, #15
 8002a88:	f67f aea2 	bls.w	80027d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
 8002a90:	3724      	adds	r7, #36	@ 0x24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40013800 	.word	0x40013800
 8002aa4:	40020000 	.word	0x40020000
 8002aa8:	40020400 	.word	0x40020400
 8002aac:	40020800 	.word	0x40020800
 8002ab0:	40020c00 	.word	0x40020c00
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40013c00 	.word	0x40013c00

08002abc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	887b      	ldrh	r3, [r7, #2]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
 8002ad8:	e001      	b.n	8002ade <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ada:	2300      	movs	r3, #0
 8002adc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	807b      	strh	r3, [r7, #2]
 8002af8:	4613      	mov	r3, r2
 8002afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002afc:	787b      	ldrb	r3, [r7, #1]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b02:	887a      	ldrh	r2, [r7, #2]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b08:	e003      	b.n	8002b12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b0a:	887b      	ldrh	r3, [r7, #2]
 8002b0c:	041a      	lsls	r2, r3, #16
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	619a      	str	r2, [r3, #24]
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
	...

08002b20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b2a:	4b08      	ldr	r3, [pc, #32]	@ (8002b4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b2c:	695a      	ldr	r2, [r3, #20]
 8002b2e:	88fb      	ldrh	r3, [r7, #6]
 8002b30:	4013      	ands	r3, r2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d006      	beq.n	8002b44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b36:	4a05      	ldr	r2, [pc, #20]	@ (8002b4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b38:	88fb      	ldrh	r3, [r7, #6]
 8002b3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b3c:	88fb      	ldrh	r3, [r7, #6]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe ff1c 	bl	800197c <HAL_GPIO_EXTI_Callback>
  }
}
 8002b44:	bf00      	nop
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40013c00 	.word	0x40013c00

08002b50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e101      	b.n	8002d66 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d106      	bne.n	8002b82 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f006 fdf3 	bl	8009768 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2203      	movs	r2, #3
 8002b86:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b90:	d102      	bne.n	8002b98 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f003 f9bc 	bl	8005f1a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	7c1a      	ldrb	r2, [r3, #16]
 8002baa:	f88d 2000 	strb.w	r2, [sp]
 8002bae:	3304      	adds	r3, #4
 8002bb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bb2:	f003 f89b 	bl	8005cec <USB_CoreInit>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0ce      	b.n	8002d66 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f003 f9b4 	bl	8005f3c <USB_SetCurrentMode>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e0bf      	b.n	8002d66 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002be6:	2300      	movs	r3, #0
 8002be8:	73fb      	strb	r3, [r7, #15]
 8002bea:	e04a      	b.n	8002c82 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bec:	7bfa      	ldrb	r2, [r7, #15]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	3315      	adds	r3, #21
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4413      	add	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	3314      	adds	r3, #20
 8002c10:	7bfa      	ldrb	r2, [r7, #15]
 8002c12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c14:	7bfa      	ldrb	r2, [r7, #15]
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
 8002c18:	b298      	uxth	r0, r3
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	332e      	adds	r3, #46	@ 0x2e
 8002c28:	4602      	mov	r2, r0
 8002c2a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	3318      	adds	r3, #24
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	4413      	add	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	331c      	adds	r3, #28
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c54:	7bfa      	ldrb	r2, [r7, #15]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	3320      	adds	r3, #32
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c68:	7bfa      	ldrb	r2, [r7, #15]
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	3324      	adds	r3, #36	@ 0x24
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	73fb      	strb	r3, [r7, #15]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	791b      	ldrb	r3, [r3, #4]
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d3af      	bcc.n	8002bec <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	73fb      	strb	r3, [r7, #15]
 8002c90:	e044      	b.n	8002d1c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c92:	7bfa      	ldrb	r2, [r7, #15]
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	4613      	mov	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	4413      	add	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ca8:	7bfa      	ldrb	r2, [r7, #15]
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cbe:	7bfa      	ldrb	r2, [r7, #15]
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cd4:	7bfa      	ldrb	r2, [r7, #15]
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	4413      	add	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cea:	7bfa      	ldrb	r2, [r7, #15]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d00:	7bfa      	ldrb	r2, [r7, #15]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	791b      	ldrb	r3, [r3, #4]
 8002d20:	7bfa      	ldrb	r2, [r7, #15]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d3b5      	bcc.n	8002c92 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6818      	ldr	r0, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	7c1a      	ldrb	r2, [r3, #16]
 8002d2e:	f88d 2000 	strb.w	r2, [sp]
 8002d32:	3304      	adds	r3, #4
 8002d34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d36:	f003 f94d 	bl	8005fd4 <USB_DevInit>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e00c      	b.n	8002d66 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f004 f991 	bl	8007086 <USB_DevDisconnect>

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_PCD_Start+0x1c>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e022      	b.n	8002dd0 <HAL_PCD_Start+0x62>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d009      	beq.n	8002db2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d105      	bne.n	8002db2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002daa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f003 f89e 	bl	8005ef8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f004 f93f 	bl	8007044 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002dd8:	b590      	push	{r4, r7, lr}
 8002dda:	b08d      	sub	sp, #52	@ 0x34
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f004 f9fd 	bl	80071ee <USB_GetMode>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f040 848c 	bne.w	8003714 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f004 f961 	bl	80070c8 <USB_ReadInterrupts>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 8482 	beq.w	8003712 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	0a1b      	lsrs	r3, r3, #8
 8002e18:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f004 f94e 	bl	80070c8 <USB_ReadInterrupts>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d107      	bne.n	8002e46 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695a      	ldr	r2, [r3, #20]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f002 0202 	and.w	r2, r2, #2
 8002e44:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f004 f93c 	bl	80070c8 <USB_ReadInterrupts>
 8002e50:	4603      	mov	r3, r0
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	2b10      	cmp	r3, #16
 8002e58:	d161      	bne.n	8002f1e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699a      	ldr	r2, [r3, #24]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0210 	bic.w	r2, r2, #16
 8002e68:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	f003 020f 	and.w	r2, r3, #15
 8002e76:	4613      	mov	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	4413      	add	r3, r2
 8002e86:	3304      	adds	r3, #4
 8002e88:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	0c5b      	lsrs	r3, r3, #17
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d124      	bne.n	8002ee0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d035      	beq.n	8002f0e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	091b      	lsrs	r3, r3, #4
 8002eaa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002eac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	6a38      	ldr	r0, [r7, #32]
 8002eb6:	f003 ff73 	bl	8006da0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	091b      	lsrs	r3, r3, #4
 8002ec2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ec6:	441a      	add	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	091b      	lsrs	r3, r3, #4
 8002ed4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ed8:	441a      	add	r2, r3
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	615a      	str	r2, [r3, #20]
 8002ede:	e016      	b.n	8002f0e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	0c5b      	lsrs	r3, r3, #17
 8002ee4:	f003 030f 	and.w	r3, r3, #15
 8002ee8:	2b06      	cmp	r3, #6
 8002eea:	d110      	bne.n	8002f0e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ef2:	2208      	movs	r2, #8
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	6a38      	ldr	r0, [r7, #32]
 8002ef8:	f003 ff52 	bl	8006da0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	695a      	ldr	r2, [r3, #20]
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	091b      	lsrs	r3, r3, #4
 8002f04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f08:	441a      	add	r2, r3
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	699a      	ldr	r2, [r3, #24]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 0210 	orr.w	r2, r2, #16
 8002f1c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f004 f8d0 	bl	80070c8 <USB_ReadInterrupts>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f2e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002f32:	f040 80a7 	bne.w	8003084 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f004 f8d5 	bl	80070ee <USB_ReadDevAllOutEpInterrupt>
 8002f44:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002f46:	e099      	b.n	800307c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 808e 	beq.w	8003070 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f004 f8f9 	bl	8007156 <USB_ReadDevOutEPInterrupt>
 8002f64:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00c      	beq.n	8002f8a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f72:	015a      	lsls	r2, r3, #5
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	2301      	movs	r3, #1
 8002f80:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 fea1 	bl	8003ccc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00c      	beq.n	8002fae <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	2308      	movs	r3, #8
 8002fa4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002fa6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 ff77 	bl	8003e9c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f003 0310 	and.w	r3, r3, #16
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2310      	movs	r3, #16
 8002fc8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d030      	beq.n	8003036 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fdc:	2b80      	cmp	r3, #128	@ 0x80
 8002fde:	d109      	bne.n	8002ff4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	69fa      	ldr	r2, [r7, #28]
 8002fea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ff2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002ff4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	4413      	add	r3, r2
 8003006:	3304      	adds	r3, #4
 8003008:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	78db      	ldrb	r3, [r3, #3]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d108      	bne.n	8003024 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2200      	movs	r2, #0
 8003016:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301a:	b2db      	uxtb	r3, r3
 800301c:	4619      	mov	r1, r3
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f006 fc9e 	bl	8009960 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	4413      	add	r3, r2
 800302c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003030:	461a      	mov	r2, r3
 8003032:	2302      	movs	r3, #2
 8003034:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f003 0320 	and.w	r3, r3, #32
 800303c:	2b00      	cmp	r3, #0
 800303e:	d008      	beq.n	8003052 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	4413      	add	r3, r2
 8003048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800304c:	461a      	mov	r2, r3
 800304e:	2320      	movs	r3, #32
 8003050:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d009      	beq.n	8003070 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800305c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	4413      	add	r3, r2
 8003064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003068:	461a      	mov	r2, r3
 800306a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800306e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003072:	3301      	adds	r3, #1
 8003074:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003078:	085b      	lsrs	r3, r3, #1
 800307a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800307c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800307e:	2b00      	cmp	r3, #0
 8003080:	f47f af62 	bne.w	8002f48 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f004 f81d 	bl	80070c8 <USB_ReadInterrupts>
 800308e:	4603      	mov	r3, r0
 8003090:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003094:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003098:	f040 80db 	bne.w	8003252 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f004 f83e 	bl	8007122 <USB_ReadDevAllInEpInterrupt>
 80030a6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80030ac:	e0cd      	b.n	800324a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80030ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80c2 	beq.w	800323e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f004 f864 	bl	8007192 <USB_ReadDevInEPInterrupt>
 80030ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d057      	beq.n	8003186 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d8:	f003 030f 	and.w	r3, r3, #15
 80030dc:	2201      	movs	r2, #1
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	43db      	mvns	r3, r3
 80030f0:	69f9      	ldr	r1, [r7, #28]
 80030f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80030f6:	4013      	ands	r3, r2
 80030f8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80030fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fc:	015a      	lsls	r2, r3, #5
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	4413      	add	r3, r2
 8003102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003106:	461a      	mov	r2, r3
 8003108:	2301      	movs	r3, #1
 800310a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	799b      	ldrb	r3, [r3, #6]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d132      	bne.n	800317a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003118:	4613      	mov	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	4413      	add	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	3320      	adds	r3, #32
 8003124:	6819      	ldr	r1, [r3, #0]
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800312a:	4613      	mov	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	4413      	add	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4403      	add	r3, r0
 8003134:	331c      	adds	r3, #28
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4419      	add	r1, r3
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800313e:	4613      	mov	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4403      	add	r3, r0
 8003148:	3320      	adds	r3, #32
 800314a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800314c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314e:	2b00      	cmp	r3, #0
 8003150:	d113      	bne.n	800317a <HAL_PCD_IRQHandler+0x3a2>
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003156:	4613      	mov	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	4413      	add	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	440b      	add	r3, r1
 8003160:	3324      	adds	r3, #36	@ 0x24
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d108      	bne.n	800317a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003172:	461a      	mov	r2, r3
 8003174:	2101      	movs	r1, #1
 8003176:	f004 f86b 	bl	8007250 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800317a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317c:	b2db      	uxtb	r3, r3
 800317e:	4619      	mov	r1, r3
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f006 fb72 	bl	800986a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	4413      	add	r3, r2
 8003198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800319c:	461a      	mov	r2, r3
 800319e:	2308      	movs	r3, #8
 80031a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f003 0310 	and.w	r3, r3, #16
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d008      	beq.n	80031be <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80031ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031b8:	461a      	mov	r2, r3
 80031ba:	2310      	movs	r3, #16
 80031bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d008      	beq.n	80031da <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80031c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ca:	015a      	lsls	r2, r3, #5
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031d4:	461a      	mov	r2, r3
 80031d6:	2340      	movs	r3, #64	@ 0x40
 80031d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d023      	beq.n	800322c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80031e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031e6:	6a38      	ldr	r0, [r7, #32]
 80031e8:	f003 f858 	bl	800629c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80031ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031ee:	4613      	mov	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	4413      	add	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	3310      	adds	r3, #16
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	4413      	add	r3, r2
 80031fc:	3304      	adds	r3, #4
 80031fe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	78db      	ldrb	r3, [r3, #3]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d108      	bne.n	800321a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	2200      	movs	r2, #0
 800320c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800320e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003210:	b2db      	uxtb	r3, r3
 8003212:	4619      	mov	r1, r3
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f006 fbb5 	bl	8009984 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800321a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321c:	015a      	lsls	r2, r3, #5
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	4413      	add	r3, r2
 8003222:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003226:	461a      	mov	r2, r3
 8003228:	2302      	movs	r3, #2
 800322a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003236:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 fcbb 	bl	8003bb4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800323e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003240:	3301      	adds	r3, #1
 8003242:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003246:	085b      	lsrs	r3, r3, #1
 8003248:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800324a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800324c:	2b00      	cmp	r3, #0
 800324e:	f47f af2e 	bne.w	80030ae <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f003 ff36 	bl	80070c8 <USB_ReadInterrupts>
 800325c:	4603      	mov	r3, r0
 800325e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003262:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003266:	d122      	bne.n	80032ae <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	69fa      	ldr	r2, [r7, #28]
 8003272:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003276:	f023 0301 	bic.w	r3, r3, #1
 800327a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003282:	2b01      	cmp	r3, #1
 8003284:	d108      	bne.n	8003298 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800328e:	2100      	movs	r1, #0
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 fea1 	bl	8003fd8 <HAL_PCDEx_LPM_Callback>
 8003296:	e002      	b.n	800329e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f006 fb53 	bl	8009944 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	695a      	ldr	r2, [r3, #20]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80032ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f003 ff08 	bl	80070c8 <USB_ReadInterrupts>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032c2:	d112      	bne.n	80032ea <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d102      	bne.n	80032da <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f006 fb0f 	bl	80098f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695a      	ldr	r2, [r3, #20]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80032e8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f003 feea 	bl	80070c8 <USB_ReadInterrupts>
 80032f4:	4603      	mov	r3, r0
 80032f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032fe:	f040 80b7 	bne.w	8003470 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	69fa      	ldr	r2, [r7, #28]
 800330c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003310:	f023 0301 	bic.w	r3, r3, #1
 8003314:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2110      	movs	r1, #16
 800331c:	4618      	mov	r0, r3
 800331e:	f002 ffbd 	bl	800629c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003322:	2300      	movs	r3, #0
 8003324:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003326:	e046      	b.n	80033b6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	4413      	add	r3, r2
 8003330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003334:	461a      	mov	r2, r3
 8003336:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800333a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800333c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	4413      	add	r3, r2
 8003344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800334c:	0151      	lsls	r1, r2, #5
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	440a      	add	r2, r1
 8003352:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003356:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800335a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800335c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	4413      	add	r3, r2
 8003364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003368:	461a      	mov	r2, r3
 800336a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800336e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	4413      	add	r3, r2
 8003378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003380:	0151      	lsls	r1, r2, #5
 8003382:	69fa      	ldr	r2, [r7, #28]
 8003384:	440a      	add	r2, r1
 8003386:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800338a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800338e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	4413      	add	r3, r2
 8003398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033a0:	0151      	lsls	r1, r2, #5
 80033a2:	69fa      	ldr	r2, [r7, #28]
 80033a4:	440a      	add	r2, r1
 80033a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80033aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80033ae:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033b2:	3301      	adds	r3, #1
 80033b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	791b      	ldrb	r3, [r3, #4]
 80033ba:	461a      	mov	r2, r3
 80033bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033be:	4293      	cmp	r3, r2
 80033c0:	d3b2      	bcc.n	8003328 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	69fa      	ldr	r2, [r7, #28]
 80033cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033d0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80033d4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	7bdb      	ldrb	r3, [r3, #15]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d016      	beq.n	800340c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033ee:	f043 030b 	orr.w	r3, r3, #11
 80033f2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fe:	69fa      	ldr	r2, [r7, #28]
 8003400:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003404:	f043 030b 	orr.w	r3, r3, #11
 8003408:	6453      	str	r3, [r2, #68]	@ 0x44
 800340a:	e015      	b.n	8003438 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	69fa      	ldr	r2, [r7, #28]
 8003416:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800341a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800341e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003422:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	69fa      	ldr	r2, [r7, #28]
 800342e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003432:	f043 030b 	orr.w	r3, r3, #11
 8003436:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003446:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800344a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800345a:	461a      	mov	r2, r3
 800345c:	f003 fef8 	bl	8007250 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695a      	ldr	r2, [r3, #20]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800346e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f003 fe27 	bl	80070c8 <USB_ReadInterrupts>
 800347a:	4603      	mov	r3, r0
 800347c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003480:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003484:	d123      	bne.n	80034ce <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f003 febd 	bl	800720a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f002 ff7a 	bl	800638e <USB_GetDevSpeed>
 800349a:	4603      	mov	r3, r0
 800349c:	461a      	mov	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681c      	ldr	r4, [r3, #0]
 80034a6:	f001 f9c7 	bl	8004838 <HAL_RCC_GetHCLKFreq>
 80034aa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034b0:	461a      	mov	r2, r3
 80034b2:	4620      	mov	r0, r4
 80034b4:	f002 fc7e 	bl	8005db4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f006 f9fe 	bl	80098ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695a      	ldr	r2, [r3, #20]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80034cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f003 fdf8 	bl	80070c8 <USB_ReadInterrupts>
 80034d8:	4603      	mov	r3, r0
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d10a      	bne.n	80034f8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f006 f9db 	bl	800989e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695a      	ldr	r2, [r3, #20]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f002 0208 	and.w	r2, r2, #8
 80034f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f003 fde3 	bl	80070c8 <USB_ReadInterrupts>
 8003502:	4603      	mov	r3, r0
 8003504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003508:	2b80      	cmp	r3, #128	@ 0x80
 800350a:	d123      	bne.n	8003554 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003518:	2301      	movs	r3, #1
 800351a:	627b      	str	r3, [r7, #36]	@ 0x24
 800351c:	e014      	b.n	8003548 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003522:	4613      	mov	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	4413      	add	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d105      	bne.n	8003542 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003538:	b2db      	uxtb	r3, r3
 800353a:	4619      	mov	r1, r3
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fb08 	bl	8003b52 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003544:	3301      	adds	r3, #1
 8003546:	627b      	str	r3, [r7, #36]	@ 0x24
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	791b      	ldrb	r3, [r3, #4]
 800354c:	461a      	mov	r2, r3
 800354e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003550:	4293      	cmp	r3, r2
 8003552:	d3e4      	bcc.n	800351e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f003 fdb5 	bl	80070c8 <USB_ReadInterrupts>
 800355e:	4603      	mov	r3, r0
 8003560:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003564:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003568:	d13c      	bne.n	80035e4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800356a:	2301      	movs	r3, #1
 800356c:	627b      	str	r3, [r7, #36]	@ 0x24
 800356e:	e02b      	b.n	80035c8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	4413      	add	r3, r2
 8003578:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003584:	4613      	mov	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	3318      	adds	r3, #24
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d115      	bne.n	80035c2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003596:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003598:	2b00      	cmp	r3, #0
 800359a:	da12      	bge.n	80035c2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a0:	4613      	mov	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	3317      	adds	r3, #23
 80035ac:	2201      	movs	r2, #1
 80035ae:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80035b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	4619      	mov	r1, r3
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 fac8 	bl	8003b52 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c4:	3301      	adds	r3, #1
 80035c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	791b      	ldrb	r3, [r3, #4]
 80035cc:	461a      	mov	r2, r3
 80035ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d3cd      	bcc.n	8003570 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80035e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f003 fd6d 	bl	80070c8 <USB_ReadInterrupts>
 80035ee:	4603      	mov	r3, r0
 80035f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035f8:	d156      	bne.n	80036a8 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035fa:	2301      	movs	r3, #1
 80035fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80035fe:	e045      	b.n	800368c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	4413      	add	r3, r2
 8003608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003614:	4613      	mov	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	4413      	add	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d12e      	bne.n	8003686 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003628:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800362a:	2b00      	cmp	r3, #0
 800362c:	da2b      	bge.n	8003686 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800363a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800363e:	429a      	cmp	r2, r3
 8003640:	d121      	bne.n	8003686 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003646:	4613      	mov	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	4413      	add	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003654:	2201      	movs	r2, #1
 8003656:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10a      	bne.n	8003686 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	69fa      	ldr	r2, [r7, #28]
 800367a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800367e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003682:	6053      	str	r3, [r2, #4]
            break;
 8003684:	e008      	b.n	8003698 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003688:	3301      	adds	r3, #1
 800368a:	627b      	str	r3, [r7, #36]	@ 0x24
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	791b      	ldrb	r3, [r3, #4]
 8003690:	461a      	mov	r2, r3
 8003692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003694:	4293      	cmp	r3, r2
 8003696:	d3b3      	bcc.n	8003600 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695a      	ldr	r2, [r3, #20]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80036a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f003 fd0b 	bl	80070c8 <USB_ReadInterrupts>
 80036b2:	4603      	mov	r3, r0
 80036b4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80036b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036bc:	d10a      	bne.n	80036d4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f006 f972 	bl	80099a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695a      	ldr	r2, [r3, #20]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80036d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f003 fcf5 	bl	80070c8 <USB_ReadInterrupts>
 80036de:	4603      	mov	r3, r0
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d115      	bne.n	8003714 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f006 f962 	bl	80099c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6859      	ldr	r1, [r3, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	430a      	orrs	r2, r1
 800370e:	605a      	str	r2, [r3, #4]
 8003710:	e000      	b.n	8003714 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003712:	bf00      	nop
    }
  }
}
 8003714:	3734      	adds	r7, #52	@ 0x34
 8003716:	46bd      	mov	sp, r7
 8003718:	bd90      	pop	{r4, r7, pc}

0800371a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b082      	sub	sp, #8
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	460b      	mov	r3, r1
 8003724:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_PCD_SetAddress+0x1a>
 8003730:	2302      	movs	r3, #2
 8003732:	e012      	b.n	800375a <HAL_PCD_SetAddress+0x40>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	78fa      	ldrb	r2, [r7, #3]
 8003740:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	78fa      	ldrb	r2, [r7, #3]
 8003748:	4611      	mov	r1, r2
 800374a:	4618      	mov	r0, r3
 800374c:	f003 fc54 	bl	8006ff8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b084      	sub	sp, #16
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	4608      	mov	r0, r1
 800376c:	4611      	mov	r1, r2
 800376e:	461a      	mov	r2, r3
 8003770:	4603      	mov	r3, r0
 8003772:	70fb      	strb	r3, [r7, #3]
 8003774:	460b      	mov	r3, r1
 8003776:	803b      	strh	r3, [r7, #0]
 8003778:	4613      	mov	r3, r2
 800377a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003780:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003784:	2b00      	cmp	r3, #0
 8003786:	da0f      	bge.n	80037a8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003788:	78fb      	ldrb	r3, [r7, #3]
 800378a:	f003 020f 	and.w	r2, r3, #15
 800378e:	4613      	mov	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	4413      	add	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	3310      	adds	r3, #16
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	4413      	add	r3, r2
 800379c:	3304      	adds	r3, #4
 800379e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2201      	movs	r2, #1
 80037a4:	705a      	strb	r2, [r3, #1]
 80037a6:	e00f      	b.n	80037c8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037a8:	78fb      	ldrb	r3, [r7, #3]
 80037aa:	f003 020f 	and.w	r2, r3, #15
 80037ae:	4613      	mov	r3, r2
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	4413      	add	r3, r2
 80037be:	3304      	adds	r3, #4
 80037c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80037d4:	883a      	ldrh	r2, [r7, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	78ba      	ldrb	r2, [r7, #2]
 80037de:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	785b      	ldrb	r3, [r3, #1]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d004      	beq.n	80037f2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	461a      	mov	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80037f2:	78bb      	ldrb	r3, [r7, #2]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d102      	bne.n	80037fe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_PCD_EP_Open+0xaa>
 8003808:	2302      	movs	r3, #2
 800380a:	e00e      	b.n	800382a <HAL_PCD_EP_Open+0xc8>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68f9      	ldr	r1, [r7, #12]
 800381a:	4618      	mov	r0, r3
 800381c:	f002 fddc 	bl	80063d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003828:	7afb      	ldrb	r3, [r7, #11]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b084      	sub	sp, #16
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	460b      	mov	r3, r1
 800383c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800383e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003842:	2b00      	cmp	r3, #0
 8003844:	da0f      	bge.n	8003866 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003846:	78fb      	ldrb	r3, [r7, #3]
 8003848:	f003 020f 	and.w	r2, r3, #15
 800384c:	4613      	mov	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	3310      	adds	r3, #16
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	3304      	adds	r3, #4
 800385c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2201      	movs	r2, #1
 8003862:	705a      	strb	r2, [r3, #1]
 8003864:	e00f      	b.n	8003886 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003866:	78fb      	ldrb	r3, [r7, #3]
 8003868:	f003 020f 	and.w	r2, r3, #15
 800386c:	4613      	mov	r3, r2
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	4413      	add	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	4413      	add	r3, r2
 800387c:	3304      	adds	r3, #4
 800387e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003886:	78fb      	ldrb	r3, [r7, #3]
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	b2da      	uxtb	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003898:	2b01      	cmp	r3, #1
 800389a:	d101      	bne.n	80038a0 <HAL_PCD_EP_Close+0x6e>
 800389c:	2302      	movs	r3, #2
 800389e:	e00e      	b.n	80038be <HAL_PCD_EP_Close+0x8c>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68f9      	ldr	r1, [r7, #12]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f002 fe1a 	bl	80064e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b086      	sub	sp, #24
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	607a      	str	r2, [r7, #4]
 80038d0:	603b      	str	r3, [r7, #0]
 80038d2:	460b      	mov	r3, r1
 80038d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038d6:	7afb      	ldrb	r3, [r7, #11]
 80038d8:	f003 020f 	and.w	r2, r3, #15
 80038dc:	4613      	mov	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	4413      	add	r3, r2
 80038ec:	3304      	adds	r3, #4
 80038ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2200      	movs	r2, #0
 8003900:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2200      	movs	r2, #0
 8003906:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003908:	7afb      	ldrb	r3, [r7, #11]
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	b2da      	uxtb	r2, r3
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	799b      	ldrb	r3, [r3, #6]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d102      	bne.n	8003922 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6818      	ldr	r0, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	799b      	ldrb	r3, [r3, #6]
 800392a:	461a      	mov	r2, r3
 800392c:	6979      	ldr	r1, [r7, #20]
 800392e:	f002 feb7 	bl	80066a0 <USB_EPStartXfer>

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003948:	78fb      	ldrb	r3, [r7, #3]
 800394a:	f003 020f 	and.w	r2, r3, #15
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	4613      	mov	r3, r2
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	4413      	add	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800395e:	681b      	ldr	r3, [r3, #0]
}
 8003960:	4618      	mov	r0, r3
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	607a      	str	r2, [r7, #4]
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	460b      	mov	r3, r1
 800397a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800397c:	7afb      	ldrb	r3, [r7, #11]
 800397e:	f003 020f 	and.w	r2, r3, #15
 8003982:	4613      	mov	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	3310      	adds	r3, #16
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4413      	add	r3, r2
 8003990:	3304      	adds	r3, #4
 8003992:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	2200      	movs	r2, #0
 80039a4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2201      	movs	r2, #1
 80039aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039ac:	7afb      	ldrb	r3, [r7, #11]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	799b      	ldrb	r3, [r3, #6]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d102      	bne.n	80039c6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	799b      	ldrb	r3, [r3, #6]
 80039ce:	461a      	mov	r2, r3
 80039d0:	6979      	ldr	r1, [r7, #20]
 80039d2:	f002 fe65 	bl	80066a0 <USB_EPStartXfer>

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3718      	adds	r7, #24
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	460b      	mov	r3, r1
 80039ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039ec:	78fb      	ldrb	r3, [r7, #3]
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	7912      	ldrb	r2, [r2, #4]
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d901      	bls.n	80039fe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e04f      	b.n	8003a9e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	da0f      	bge.n	8003a26 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a06:	78fb      	ldrb	r3, [r7, #3]
 8003a08:	f003 020f 	and.w	r2, r3, #15
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	4413      	add	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	3310      	adds	r3, #16
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	4413      	add	r3, r2
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2201      	movs	r2, #1
 8003a22:	705a      	strb	r2, [r3, #1]
 8003a24:	e00d      	b.n	8003a42 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a26:	78fa      	ldrb	r2, [r7, #3]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	4413      	add	r3, r2
 8003a38:	3304      	adds	r3, #4
 8003a3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2201      	movs	r2, #1
 8003a46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a48:	78fb      	ldrb	r3, [r7, #3]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <HAL_PCD_EP_SetStall+0x82>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e01d      	b.n	8003a9e <HAL_PCD_EP_SetStall+0xbe>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68f9      	ldr	r1, [r7, #12]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f003 f9ed 	bl	8006e50 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a76:	78fb      	ldrb	r3, [r7, #3]
 8003a78:	f003 030f 	and.w	r3, r3, #15
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d109      	bne.n	8003a94 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6818      	ldr	r0, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	7999      	ldrb	r1, [r3, #6]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f003 fbde 	bl	8007250 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b084      	sub	sp, #16
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	460b      	mov	r3, r1
 8003ab0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ab2:	78fb      	ldrb	r3, [r7, #3]
 8003ab4:	f003 030f 	and.w	r3, r3, #15
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	7912      	ldrb	r2, [r2, #4]
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d901      	bls.n	8003ac4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e042      	b.n	8003b4a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ac4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	da0f      	bge.n	8003aec <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003acc:	78fb      	ldrb	r3, [r7, #3]
 8003ace:	f003 020f 	and.w	r2, r3, #15
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	3310      	adds	r3, #16
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	4413      	add	r3, r2
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	705a      	strb	r2, [r3, #1]
 8003aea:	e00f      	b.n	8003b0c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aec:	78fb      	ldrb	r3, [r7, #3]
 8003aee:	f003 020f 	and.w	r2, r3, #15
 8003af2:	4613      	mov	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	4413      	add	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	4413      	add	r3, r2
 8003b02:	3304      	adds	r3, #4
 8003b04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b12:	78fb      	ldrb	r3, [r7, #3]
 8003b14:	f003 030f 	and.w	r3, r3, #15
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_PCD_EP_ClrStall+0x86>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e00e      	b.n	8003b4a <HAL_PCD_EP_ClrStall+0xa4>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68f9      	ldr	r1, [r7, #12]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f003 f9f6 	bl	8006f2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b084      	sub	sp, #16
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003b5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	da0c      	bge.n	8003b80 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b66:	78fb      	ldrb	r3, [r7, #3]
 8003b68:	f003 020f 	and.w	r2, r3, #15
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	4413      	add	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	3310      	adds	r3, #16
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	4413      	add	r3, r2
 8003b7a:	3304      	adds	r3, #4
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	e00c      	b.n	8003b9a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b80:	78fb      	ldrb	r3, [r7, #3]
 8003b82:	f003 020f 	and.w	r2, r3, #15
 8003b86:	4613      	mov	r3, r2
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	4413      	add	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	4413      	add	r3, r2
 8003b96:	3304      	adds	r3, #4
 8003b98:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68f9      	ldr	r1, [r7, #12]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f003 f815 	bl	8006bd0 <USB_EPStopXfer>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003baa:	7afb      	ldrb	r3, [r7, #11]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08a      	sub	sp, #40	@ 0x28
 8003bb8:	af02      	add	r7, sp, #8
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	4413      	add	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	3310      	adds	r3, #16
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3304      	adds	r3, #4
 8003bda:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	695a      	ldr	r2, [r3, #20]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d901      	bls.n	8003bec <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e06b      	b.n	8003cc4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	69fa      	ldr	r2, [r7, #28]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d902      	bls.n	8003c08 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	3303      	adds	r3, #3
 8003c0c:	089b      	lsrs	r3, r3, #2
 8003c0e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c10:	e02a      	b.n	8003c68 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	691a      	ldr	r2, [r3, #16]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	69fa      	ldr	r2, [r7, #28]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d902      	bls.n	8003c2e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	3303      	adds	r3, #3
 8003c32:	089b      	lsrs	r3, r3, #2
 8003c34:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	68d9      	ldr	r1, [r3, #12]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	4603      	mov	r3, r0
 8003c4a:	6978      	ldr	r0, [r7, #20]
 8003c4c:	f003 f86a 	bl	8006d24 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	441a      	add	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	695a      	ldr	r2, [r3, #20]
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	441a      	add	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d809      	bhi.n	8003c92 <PCD_WriteEmptyTxFifo+0xde>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	695a      	ldr	r2, [r3, #20]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d203      	bcs.n	8003c92 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1bf      	bne.n	8003c12 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	691a      	ldr	r2, [r3, #16]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d811      	bhi.n	8003cc2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	f003 030f 	and.w	r3, r3, #15
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	6939      	ldr	r1, [r7, #16]
 8003cba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3720      	adds	r7, #32
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	333c      	adds	r3, #60	@ 0x3c
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	015a      	lsls	r2, r3, #5
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	799b      	ldrb	r3, [r3, #6]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d17b      	bne.n	8003dfa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d015      	beq.n	8003d38 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	4a61      	ldr	r2, [pc, #388]	@ (8003e94 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	f240 80b9 	bls.w	8003e88 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 80b3 	beq.w	8003e88 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	015a      	lsls	r2, r3, #5
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d2e:	461a      	mov	r2, r3
 8003d30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d34:	6093      	str	r3, [r2, #8]
 8003d36:	e0a7      	b.n	8003e88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d009      	beq.n	8003d56 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d4e:	461a      	mov	r2, r3
 8003d50:	2320      	movs	r3, #32
 8003d52:	6093      	str	r3, [r2, #8]
 8003d54:	e098      	b.n	8003e88 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f040 8093 	bne.w	8003e88 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	4a4b      	ldr	r2, [pc, #300]	@ (8003e94 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d90f      	bls.n	8003d8a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00a      	beq.n	8003d8a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d80:	461a      	mov	r2, r3
 8003d82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d86:	6093      	str	r3, [r2, #8]
 8003d88:	e07e      	b.n	8003e88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a1a      	ldr	r2, [r3, #32]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	0159      	lsls	r1, r3, #5
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	440b      	add	r3, r1
 8003dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003db6:	1ad2      	subs	r2, r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d114      	bne.n	8003dec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d109      	bne.n	8003dde <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	f003 fa3a 	bl	8007250 <USB_EP0_OutStart>
 8003ddc:	e006      	b.n	8003dec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	441a      	add	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	4619      	mov	r1, r3
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f005 fd1e 	bl	8009834 <HAL_PCD_DataOutStageCallback>
 8003df8:	e046      	b.n	8003e88 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	4a26      	ldr	r2, [pc, #152]	@ (8003e98 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d124      	bne.n	8003e4c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00a      	beq.n	8003e22 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e18:	461a      	mov	r2, r3
 8003e1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e1e:	6093      	str	r3, [r2, #8]
 8003e20:	e032      	b.n	8003e88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f003 0320 	and.w	r3, r3, #32
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e38:	461a      	mov	r2, r3
 8003e3a:	2320      	movs	r3, #32
 8003e3c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	4619      	mov	r1, r3
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f005 fcf5 	bl	8009834 <HAL_PCD_DataOutStageCallback>
 8003e4a:	e01d      	b.n	8003e88 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d114      	bne.n	8003e7c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	4613      	mov	r3, r2
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	4413      	add	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	440b      	add	r3, r1
 8003e60:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d108      	bne.n	8003e7c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6818      	ldr	r0, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e74:	461a      	mov	r2, r3
 8003e76:	2100      	movs	r1, #0
 8003e78:	f003 f9ea 	bl	8007250 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	4619      	mov	r1, r3
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f005 fcd6 	bl	8009834 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3720      	adds	r7, #32
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	4f54300a 	.word	0x4f54300a
 8003e98:	4f54310a 	.word	0x4f54310a

08003e9c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	333c      	adds	r3, #60	@ 0x3c
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4a15      	ldr	r2, [pc, #84]	@ (8003f24 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d90e      	bls.n	8003ef0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d009      	beq.n	8003ef0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ee8:	461a      	mov	r2, r3
 8003eea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003eee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f005 fc8d 	bl	8009810 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8003f24 <PCD_EP_OutSetupPacket_int+0x88>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d90c      	bls.n	8003f18 <PCD_EP_OutSetupPacket_int+0x7c>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	799b      	ldrb	r3, [r3, #6]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d108      	bne.n	8003f18 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6818      	ldr	r0, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f10:	461a      	mov	r2, r3
 8003f12:	2101      	movs	r1, #1
 8003f14:	f003 f99c 	bl	8007250 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	4f54300a 	.word	0x4f54300a

08003f28 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	460b      	mov	r3, r1
 8003f32:	70fb      	strb	r3, [r7, #3]
 8003f34:	4613      	mov	r3, r2
 8003f36:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f40:	78fb      	ldrb	r3, [r7, #3]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d107      	bne.n	8003f56 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f46:	883b      	ldrh	r3, [r7, #0]
 8003f48:	0419      	lsls	r1, r3, #16
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f54:	e028      	b.n	8003fa8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f5c:	0c1b      	lsrs	r3, r3, #16
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	4413      	add	r3, r2
 8003f62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f64:	2300      	movs	r3, #0
 8003f66:	73fb      	strb	r3, [r7, #15]
 8003f68:	e00d      	b.n	8003f86 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
 8003f70:	3340      	adds	r3, #64	@ 0x40
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	0c1b      	lsrs	r3, r3, #16
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
 8003f82:	3301      	adds	r3, #1
 8003f84:	73fb      	strb	r3, [r7, #15]
 8003f86:	7bfa      	ldrb	r2, [r7, #15]
 8003f88:	78fb      	ldrb	r3, [r7, #3]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d3ec      	bcc.n	8003f6a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f90:	883b      	ldrh	r3, [r7, #0]
 8003f92:	0418      	lsls	r0, r3, #16
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6819      	ldr	r1, [r3, #0]
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	4302      	orrs	r2, r0
 8003fa0:	3340      	adds	r3, #64	@ 0x40
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	887a      	ldrh	r2, [r7, #2]
 8003fc8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e267      	b.n	80044d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d075      	beq.n	80040fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800400e:	4b88      	ldr	r3, [pc, #544]	@ (8004230 <HAL_RCC_OscConfig+0x240>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 030c 	and.w	r3, r3, #12
 8004016:	2b04      	cmp	r3, #4
 8004018:	d00c      	beq.n	8004034 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800401a:	4b85      	ldr	r3, [pc, #532]	@ (8004230 <HAL_RCC_OscConfig+0x240>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004022:	2b08      	cmp	r3, #8
 8004024:	d112      	bne.n	800404c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004026:	4b82      	ldr	r3, [pc, #520]	@ (8004230 <HAL_RCC_OscConfig+0x240>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800402e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004032:	d10b      	bne.n	800404c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004034:	4b7e      	ldr	r3, [pc, #504]	@ (8004230 <HAL_RCC_OscConfig+0x240>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d05b      	beq.n	80040f8 <HAL_RCC_OscConfig+0x108>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d157      	bne.n	80040f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e242      	b.n	80044d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004054:	d106      	bne.n	8004064 <HAL_RCC_OscConfig+0x74>
 8004056:	4b76      	ldr	r3, [pc, #472]	@ (8004230 <HAL_RCC_OscConfig+0x240>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a75      	ldr	r2, [pc, #468]	@ (8004230 <HAL_RCC_OscConfig+0x240>)
 800405c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	e01d      	b.n	80040a0 <HAL_RCC_OscConfig+0xb0>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800406c:	d10c      	bne.n	8004088 <HAL_RCC_OscConfig+0x98>
 800406e:	4b70      	ldr	r3, [pc, #448]	@ (8004230 <HAL_RCC_OscConfig+0x240>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a6f      	ldr	r2, [pc, #444]	@ (8004230 <HAL_RCC_OscConfig+0x240>)
 8004074:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	4b6d      	ldr	r3, [pc, #436]	@ (8004230 <HAL_RCC_OscConfig+0x240>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a6c      	ldr	r2, [pc, #432]	@ (8004230 <HAL_RCC_OscConfig+0x240>)
 8004080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	e00b      	b.n	80040a0 <HAL_RCC_OscConfig+0xb0>
 8004088:	4b69      	ldr	r3, [pc, #420]	@ (8004230 <HAL_RCC_OscConfig+0x240>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a68      	ldr	r2, [pc, #416]	@ (8004230 <HAL_RCC_OscConfig+0x240>)
 800408e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	4b66      	ldr	r3, [pc, #408]	@ (8004230 <HAL_RCC_OscConfig+0x240>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a65      	ldr	r2, [pc, #404]	@ (8004230 <HAL_RCC_OscConfig+0x240>)
 800409a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800409e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d013      	beq.n	80040d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a8:	f7fd feb0 	bl	8001e0c <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040b0:	f7fd feac 	bl	8001e0c <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b64      	cmp	r3, #100	@ 0x64
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e207      	b.n	80044d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040c2:	4b5b      	ldr	r3, [pc, #364]	@ (8004230 <HAL_RCC_OscConfig+0x240>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0f0      	beq.n	80040b0 <HAL_RCC_OscConfig+0xc0>
 80040ce:	e014      	b.n	80040fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d0:	f7fd fe9c 	bl	8001e0c <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040d8:	f7fd fe98 	bl	8001e0c <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b64      	cmp	r3, #100	@ 0x64
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e1f3      	b.n	80044d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ea:	4b51      	ldr	r3, [pc, #324]	@ (8004230 <HAL_RCC_OscConfig+0x240>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f0      	bne.n	80040d8 <HAL_RCC_OscConfig+0xe8>
 80040f6:	e000      	b.n	80040fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d063      	beq.n	80041ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004106:	4b4a      	ldr	r3, [pc, #296]	@ (8004230 <HAL_RCC_OscConfig+0x240>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 030c 	and.w	r3, r3, #12
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00b      	beq.n	800412a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004112:	4b47      	ldr	r3, [pc, #284]	@ (8004230 <HAL_RCC_OscConfig+0x240>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800411a:	2b08      	cmp	r3, #8
 800411c:	d11c      	bne.n	8004158 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800411e:	4b44      	ldr	r3, [pc, #272]	@ (8004230 <HAL_RCC_OscConfig+0x240>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d116      	bne.n	8004158 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800412a:	4b41      	ldr	r3, [pc, #260]	@ (8004230 <HAL_RCC_OscConfig+0x240>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <HAL_RCC_OscConfig+0x152>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d001      	beq.n	8004142 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e1c7      	b.n	80044d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004142:	4b3b      	ldr	r3, [pc, #236]	@ (8004230 <HAL_RCC_OscConfig+0x240>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	4937      	ldr	r1, [pc, #220]	@ (8004230 <HAL_RCC_OscConfig+0x240>)
 8004152:	4313      	orrs	r3, r2
 8004154:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004156:	e03a      	b.n	80041ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d020      	beq.n	80041a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004160:	4b34      	ldr	r3, [pc, #208]	@ (8004234 <HAL_RCC_OscConfig+0x244>)
 8004162:	2201      	movs	r2, #1
 8004164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004166:	f7fd fe51 	bl	8001e0c <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800416e:	f7fd fe4d 	bl	8001e0c <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e1a8      	b.n	80044d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004180:	4b2b      	ldr	r3, [pc, #172]	@ (8004230 <HAL_RCC_OscConfig+0x240>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0f0      	beq.n	800416e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800418c:	4b28      	ldr	r3, [pc, #160]	@ (8004230 <HAL_RCC_OscConfig+0x240>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	4925      	ldr	r1, [pc, #148]	@ (8004230 <HAL_RCC_OscConfig+0x240>)
 800419c:	4313      	orrs	r3, r2
 800419e:	600b      	str	r3, [r1, #0]
 80041a0:	e015      	b.n	80041ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041a2:	4b24      	ldr	r3, [pc, #144]	@ (8004234 <HAL_RCC_OscConfig+0x244>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a8:	f7fd fe30 	bl	8001e0c <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041b0:	f7fd fe2c 	bl	8001e0c <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e187      	b.n	80044d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004230 <HAL_RCC_OscConfig+0x240>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f0      	bne.n	80041b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d036      	beq.n	8004248 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d016      	beq.n	8004210 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041e2:	4b15      	ldr	r3, [pc, #84]	@ (8004238 <HAL_RCC_OscConfig+0x248>)
 80041e4:	2201      	movs	r2, #1
 80041e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e8:	f7fd fe10 	bl	8001e0c <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041f0:	f7fd fe0c 	bl	8001e0c <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e167      	b.n	80044d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004202:	4b0b      	ldr	r3, [pc, #44]	@ (8004230 <HAL_RCC_OscConfig+0x240>)
 8004204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0f0      	beq.n	80041f0 <HAL_RCC_OscConfig+0x200>
 800420e:	e01b      	b.n	8004248 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004210:	4b09      	ldr	r3, [pc, #36]	@ (8004238 <HAL_RCC_OscConfig+0x248>)
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004216:	f7fd fdf9 	bl	8001e0c <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800421c:	e00e      	b.n	800423c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800421e:	f7fd fdf5 	bl	8001e0c <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d907      	bls.n	800423c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e150      	b.n	80044d2 <HAL_RCC_OscConfig+0x4e2>
 8004230:	40023800 	.word	0x40023800
 8004234:	42470000 	.word	0x42470000
 8004238:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800423c:	4b88      	ldr	r3, [pc, #544]	@ (8004460 <HAL_RCC_OscConfig+0x470>)
 800423e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1ea      	bne.n	800421e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 8097 	beq.w	8004384 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004256:	2300      	movs	r3, #0
 8004258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800425a:	4b81      	ldr	r3, [pc, #516]	@ (8004460 <HAL_RCC_OscConfig+0x470>)
 800425c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10f      	bne.n	8004286 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004266:	2300      	movs	r3, #0
 8004268:	60bb      	str	r3, [r7, #8]
 800426a:	4b7d      	ldr	r3, [pc, #500]	@ (8004460 <HAL_RCC_OscConfig+0x470>)
 800426c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426e:	4a7c      	ldr	r2, [pc, #496]	@ (8004460 <HAL_RCC_OscConfig+0x470>)
 8004270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004274:	6413      	str	r3, [r2, #64]	@ 0x40
 8004276:	4b7a      	ldr	r3, [pc, #488]	@ (8004460 <HAL_RCC_OscConfig+0x470>)
 8004278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800427e:	60bb      	str	r3, [r7, #8]
 8004280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004282:	2301      	movs	r3, #1
 8004284:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004286:	4b77      	ldr	r3, [pc, #476]	@ (8004464 <HAL_RCC_OscConfig+0x474>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800428e:	2b00      	cmp	r3, #0
 8004290:	d118      	bne.n	80042c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004292:	4b74      	ldr	r3, [pc, #464]	@ (8004464 <HAL_RCC_OscConfig+0x474>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a73      	ldr	r2, [pc, #460]	@ (8004464 <HAL_RCC_OscConfig+0x474>)
 8004298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800429c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800429e:	f7fd fdb5 	bl	8001e0c <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042a6:	f7fd fdb1 	bl	8001e0c <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e10c      	b.n	80044d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b8:	4b6a      	ldr	r3, [pc, #424]	@ (8004464 <HAL_RCC_OscConfig+0x474>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0f0      	beq.n	80042a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d106      	bne.n	80042da <HAL_RCC_OscConfig+0x2ea>
 80042cc:	4b64      	ldr	r3, [pc, #400]	@ (8004460 <HAL_RCC_OscConfig+0x470>)
 80042ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d0:	4a63      	ldr	r2, [pc, #396]	@ (8004460 <HAL_RCC_OscConfig+0x470>)
 80042d2:	f043 0301 	orr.w	r3, r3, #1
 80042d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80042d8:	e01c      	b.n	8004314 <HAL_RCC_OscConfig+0x324>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	2b05      	cmp	r3, #5
 80042e0:	d10c      	bne.n	80042fc <HAL_RCC_OscConfig+0x30c>
 80042e2:	4b5f      	ldr	r3, [pc, #380]	@ (8004460 <HAL_RCC_OscConfig+0x470>)
 80042e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e6:	4a5e      	ldr	r2, [pc, #376]	@ (8004460 <HAL_RCC_OscConfig+0x470>)
 80042e8:	f043 0304 	orr.w	r3, r3, #4
 80042ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80042ee:	4b5c      	ldr	r3, [pc, #368]	@ (8004460 <HAL_RCC_OscConfig+0x470>)
 80042f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f2:	4a5b      	ldr	r2, [pc, #364]	@ (8004460 <HAL_RCC_OscConfig+0x470>)
 80042f4:	f043 0301 	orr.w	r3, r3, #1
 80042f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80042fa:	e00b      	b.n	8004314 <HAL_RCC_OscConfig+0x324>
 80042fc:	4b58      	ldr	r3, [pc, #352]	@ (8004460 <HAL_RCC_OscConfig+0x470>)
 80042fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004300:	4a57      	ldr	r2, [pc, #348]	@ (8004460 <HAL_RCC_OscConfig+0x470>)
 8004302:	f023 0301 	bic.w	r3, r3, #1
 8004306:	6713      	str	r3, [r2, #112]	@ 0x70
 8004308:	4b55      	ldr	r3, [pc, #340]	@ (8004460 <HAL_RCC_OscConfig+0x470>)
 800430a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430c:	4a54      	ldr	r2, [pc, #336]	@ (8004460 <HAL_RCC_OscConfig+0x470>)
 800430e:	f023 0304 	bic.w	r3, r3, #4
 8004312:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d015      	beq.n	8004348 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800431c:	f7fd fd76 	bl	8001e0c <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004322:	e00a      	b.n	800433a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004324:	f7fd fd72 	bl	8001e0c <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004332:	4293      	cmp	r3, r2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e0cb      	b.n	80044d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800433a:	4b49      	ldr	r3, [pc, #292]	@ (8004460 <HAL_RCC_OscConfig+0x470>)
 800433c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0ee      	beq.n	8004324 <HAL_RCC_OscConfig+0x334>
 8004346:	e014      	b.n	8004372 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004348:	f7fd fd60 	bl	8001e0c <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800434e:	e00a      	b.n	8004366 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004350:	f7fd fd5c 	bl	8001e0c <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800435e:	4293      	cmp	r3, r2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e0b5      	b.n	80044d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004366:	4b3e      	ldr	r3, [pc, #248]	@ (8004460 <HAL_RCC_OscConfig+0x470>)
 8004368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1ee      	bne.n	8004350 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004372:	7dfb      	ldrb	r3, [r7, #23]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d105      	bne.n	8004384 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004378:	4b39      	ldr	r3, [pc, #228]	@ (8004460 <HAL_RCC_OscConfig+0x470>)
 800437a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437c:	4a38      	ldr	r2, [pc, #224]	@ (8004460 <HAL_RCC_OscConfig+0x470>)
 800437e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004382:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 80a1 	beq.w	80044d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800438e:	4b34      	ldr	r3, [pc, #208]	@ (8004460 <HAL_RCC_OscConfig+0x470>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 030c 	and.w	r3, r3, #12
 8004396:	2b08      	cmp	r3, #8
 8004398:	d05c      	beq.n	8004454 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d141      	bne.n	8004426 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a2:	4b31      	ldr	r3, [pc, #196]	@ (8004468 <HAL_RCC_OscConfig+0x478>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a8:	f7fd fd30 	bl	8001e0c <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b0:	f7fd fd2c 	bl	8001e0c <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e087      	b.n	80044d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c2:	4b27      	ldr	r3, [pc, #156]	@ (8004460 <HAL_RCC_OscConfig+0x470>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f0      	bne.n	80043b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69da      	ldr	r2, [r3, #28]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043dc:	019b      	lsls	r3, r3, #6
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e4:	085b      	lsrs	r3, r3, #1
 80043e6:	3b01      	subs	r3, #1
 80043e8:	041b      	lsls	r3, r3, #16
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f0:	061b      	lsls	r3, r3, #24
 80043f2:	491b      	ldr	r1, [pc, #108]	@ (8004460 <HAL_RCC_OscConfig+0x470>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004468 <HAL_RCC_OscConfig+0x478>)
 80043fa:	2201      	movs	r2, #1
 80043fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fe:	f7fd fd05 	bl	8001e0c <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004406:	f7fd fd01 	bl	8001e0c <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e05c      	b.n	80044d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004418:	4b11      	ldr	r3, [pc, #68]	@ (8004460 <HAL_RCC_OscConfig+0x470>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f0      	beq.n	8004406 <HAL_RCC_OscConfig+0x416>
 8004424:	e054      	b.n	80044d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004426:	4b10      	ldr	r3, [pc, #64]	@ (8004468 <HAL_RCC_OscConfig+0x478>)
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442c:	f7fd fcee 	bl	8001e0c <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004434:	f7fd fcea 	bl	8001e0c <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e045      	b.n	80044d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004446:	4b06      	ldr	r3, [pc, #24]	@ (8004460 <HAL_RCC_OscConfig+0x470>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f0      	bne.n	8004434 <HAL_RCC_OscConfig+0x444>
 8004452:	e03d      	b.n	80044d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d107      	bne.n	800446c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e038      	b.n	80044d2 <HAL_RCC_OscConfig+0x4e2>
 8004460:	40023800 	.word	0x40023800
 8004464:	40007000 	.word	0x40007000
 8004468:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800446c:	4b1b      	ldr	r3, [pc, #108]	@ (80044dc <HAL_RCC_OscConfig+0x4ec>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d028      	beq.n	80044cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004484:	429a      	cmp	r2, r3
 8004486:	d121      	bne.n	80044cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004492:	429a      	cmp	r2, r3
 8004494:	d11a      	bne.n	80044cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800449c:	4013      	ands	r3, r2
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d111      	bne.n	80044cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b2:	085b      	lsrs	r3, r3, #1
 80044b4:	3b01      	subs	r3, #1
 80044b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d107      	bne.n	80044cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d001      	beq.n	80044d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e000      	b.n	80044d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	40023800 	.word	0x40023800

080044e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e0cc      	b.n	800468e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044f4:	4b68      	ldr	r3, [pc, #416]	@ (8004698 <HAL_RCC_ClockConfig+0x1b8>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0307 	and.w	r3, r3, #7
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d90c      	bls.n	800451c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004502:	4b65      	ldr	r3, [pc, #404]	@ (8004698 <HAL_RCC_ClockConfig+0x1b8>)
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800450a:	4b63      	ldr	r3, [pc, #396]	@ (8004698 <HAL_RCC_ClockConfig+0x1b8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0307 	and.w	r3, r3, #7
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	429a      	cmp	r2, r3
 8004516:	d001      	beq.n	800451c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e0b8      	b.n	800468e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d020      	beq.n	800456a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	d005      	beq.n	8004540 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004534:	4b59      	ldr	r3, [pc, #356]	@ (800469c <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	4a58      	ldr	r2, [pc, #352]	@ (800469c <HAL_RCC_ClockConfig+0x1bc>)
 800453a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800453e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0308 	and.w	r3, r3, #8
 8004548:	2b00      	cmp	r3, #0
 800454a:	d005      	beq.n	8004558 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800454c:	4b53      	ldr	r3, [pc, #332]	@ (800469c <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	4a52      	ldr	r2, [pc, #328]	@ (800469c <HAL_RCC_ClockConfig+0x1bc>)
 8004552:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004556:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004558:	4b50      	ldr	r3, [pc, #320]	@ (800469c <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	494d      	ldr	r1, [pc, #308]	@ (800469c <HAL_RCC_ClockConfig+0x1bc>)
 8004566:	4313      	orrs	r3, r2
 8004568:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d044      	beq.n	8004600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d107      	bne.n	800458e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457e:	4b47      	ldr	r3, [pc, #284]	@ (800469c <HAL_RCC_ClockConfig+0x1bc>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d119      	bne.n	80045be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e07f      	b.n	800468e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d003      	beq.n	800459e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800459a:	2b03      	cmp	r3, #3
 800459c:	d107      	bne.n	80045ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800459e:	4b3f      	ldr	r3, [pc, #252]	@ (800469c <HAL_RCC_ClockConfig+0x1bc>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d109      	bne.n	80045be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e06f      	b.n	800468e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ae:	4b3b      	ldr	r3, [pc, #236]	@ (800469c <HAL_RCC_ClockConfig+0x1bc>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e067      	b.n	800468e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045be:	4b37      	ldr	r3, [pc, #220]	@ (800469c <HAL_RCC_ClockConfig+0x1bc>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f023 0203 	bic.w	r2, r3, #3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	4934      	ldr	r1, [pc, #208]	@ (800469c <HAL_RCC_ClockConfig+0x1bc>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045d0:	f7fd fc1c 	bl	8001e0c <HAL_GetTick>
 80045d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d6:	e00a      	b.n	80045ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d8:	f7fd fc18 	bl	8001e0c <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e04f      	b.n	800468e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ee:	4b2b      	ldr	r3, [pc, #172]	@ (800469c <HAL_RCC_ClockConfig+0x1bc>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 020c 	and.w	r2, r3, #12
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d1eb      	bne.n	80045d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004600:	4b25      	ldr	r3, [pc, #148]	@ (8004698 <HAL_RCC_ClockConfig+0x1b8>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	429a      	cmp	r2, r3
 800460c:	d20c      	bcs.n	8004628 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800460e:	4b22      	ldr	r3, [pc, #136]	@ (8004698 <HAL_RCC_ClockConfig+0x1b8>)
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004616:	4b20      	ldr	r3, [pc, #128]	@ (8004698 <HAL_RCC_ClockConfig+0x1b8>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	429a      	cmp	r2, r3
 8004622:	d001      	beq.n	8004628 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e032      	b.n	800468e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0304 	and.w	r3, r3, #4
 8004630:	2b00      	cmp	r3, #0
 8004632:	d008      	beq.n	8004646 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004634:	4b19      	ldr	r3, [pc, #100]	@ (800469c <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	4916      	ldr	r1, [pc, #88]	@ (800469c <HAL_RCC_ClockConfig+0x1bc>)
 8004642:	4313      	orrs	r3, r2
 8004644:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b00      	cmp	r3, #0
 8004650:	d009      	beq.n	8004666 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004652:	4b12      	ldr	r3, [pc, #72]	@ (800469c <HAL_RCC_ClockConfig+0x1bc>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	490e      	ldr	r1, [pc, #56]	@ (800469c <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	4313      	orrs	r3, r2
 8004664:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004666:	f000 f821 	bl	80046ac <HAL_RCC_GetSysClockFreq>
 800466a:	4602      	mov	r2, r0
 800466c:	4b0b      	ldr	r3, [pc, #44]	@ (800469c <HAL_RCC_ClockConfig+0x1bc>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	091b      	lsrs	r3, r3, #4
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	490a      	ldr	r1, [pc, #40]	@ (80046a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004678:	5ccb      	ldrb	r3, [r1, r3]
 800467a:	fa22 f303 	lsr.w	r3, r2, r3
 800467e:	4a09      	ldr	r2, [pc, #36]	@ (80046a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004682:	4b09      	ldr	r3, [pc, #36]	@ (80046a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f7fd fb7c 	bl	8001d84 <HAL_InitTick>

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	40023c00 	.word	0x40023c00
 800469c:	40023800 	.word	0x40023800
 80046a0:	0800b678 	.word	0x0800b678
 80046a4:	20000038 	.word	0x20000038
 80046a8:	2000003c 	.word	0x2000003c

080046ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046b0:	b090      	sub	sp, #64	@ 0x40
 80046b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80046b8:	2300      	movs	r3, #0
 80046ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046bc:	2300      	movs	r3, #0
 80046be:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046c4:	4b59      	ldr	r3, [pc, #356]	@ (800482c <HAL_RCC_GetSysClockFreq+0x180>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 030c 	and.w	r3, r3, #12
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d00d      	beq.n	80046ec <HAL_RCC_GetSysClockFreq+0x40>
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	f200 80a1 	bhi.w	8004818 <HAL_RCC_GetSysClockFreq+0x16c>
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <HAL_RCC_GetSysClockFreq+0x34>
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d003      	beq.n	80046e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80046de:	e09b      	b.n	8004818 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046e0:	4b53      	ldr	r3, [pc, #332]	@ (8004830 <HAL_RCC_GetSysClockFreq+0x184>)
 80046e2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80046e4:	e09b      	b.n	800481e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046e6:	4b53      	ldr	r3, [pc, #332]	@ (8004834 <HAL_RCC_GetSysClockFreq+0x188>)
 80046e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046ea:	e098      	b.n	800481e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046ec:	4b4f      	ldr	r3, [pc, #316]	@ (800482c <HAL_RCC_GetSysClockFreq+0x180>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046f6:	4b4d      	ldr	r3, [pc, #308]	@ (800482c <HAL_RCC_GetSysClockFreq+0x180>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d028      	beq.n	8004754 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004702:	4b4a      	ldr	r3, [pc, #296]	@ (800482c <HAL_RCC_GetSysClockFreq+0x180>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	099b      	lsrs	r3, r3, #6
 8004708:	2200      	movs	r2, #0
 800470a:	623b      	str	r3, [r7, #32]
 800470c:	627a      	str	r2, [r7, #36]	@ 0x24
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004714:	2100      	movs	r1, #0
 8004716:	4b47      	ldr	r3, [pc, #284]	@ (8004834 <HAL_RCC_GetSysClockFreq+0x188>)
 8004718:	fb03 f201 	mul.w	r2, r3, r1
 800471c:	2300      	movs	r3, #0
 800471e:	fb00 f303 	mul.w	r3, r0, r3
 8004722:	4413      	add	r3, r2
 8004724:	4a43      	ldr	r2, [pc, #268]	@ (8004834 <HAL_RCC_GetSysClockFreq+0x188>)
 8004726:	fba0 1202 	umull	r1, r2, r0, r2
 800472a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800472c:	460a      	mov	r2, r1
 800472e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004730:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004732:	4413      	add	r3, r2
 8004734:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004738:	2200      	movs	r2, #0
 800473a:	61bb      	str	r3, [r7, #24]
 800473c:	61fa      	str	r2, [r7, #28]
 800473e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004742:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004746:	f7fc fa7f 	bl	8000c48 <__aeabi_uldivmod>
 800474a:	4602      	mov	r2, r0
 800474c:	460b      	mov	r3, r1
 800474e:	4613      	mov	r3, r2
 8004750:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004752:	e053      	b.n	80047fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004754:	4b35      	ldr	r3, [pc, #212]	@ (800482c <HAL_RCC_GetSysClockFreq+0x180>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	099b      	lsrs	r3, r3, #6
 800475a:	2200      	movs	r2, #0
 800475c:	613b      	str	r3, [r7, #16]
 800475e:	617a      	str	r2, [r7, #20]
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004766:	f04f 0b00 	mov.w	fp, #0
 800476a:	4652      	mov	r2, sl
 800476c:	465b      	mov	r3, fp
 800476e:	f04f 0000 	mov.w	r0, #0
 8004772:	f04f 0100 	mov.w	r1, #0
 8004776:	0159      	lsls	r1, r3, #5
 8004778:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800477c:	0150      	lsls	r0, r2, #5
 800477e:	4602      	mov	r2, r0
 8004780:	460b      	mov	r3, r1
 8004782:	ebb2 080a 	subs.w	r8, r2, sl
 8004786:	eb63 090b 	sbc.w	r9, r3, fp
 800478a:	f04f 0200 	mov.w	r2, #0
 800478e:	f04f 0300 	mov.w	r3, #0
 8004792:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004796:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800479a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800479e:	ebb2 0408 	subs.w	r4, r2, r8
 80047a2:	eb63 0509 	sbc.w	r5, r3, r9
 80047a6:	f04f 0200 	mov.w	r2, #0
 80047aa:	f04f 0300 	mov.w	r3, #0
 80047ae:	00eb      	lsls	r3, r5, #3
 80047b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047b4:	00e2      	lsls	r2, r4, #3
 80047b6:	4614      	mov	r4, r2
 80047b8:	461d      	mov	r5, r3
 80047ba:	eb14 030a 	adds.w	r3, r4, sl
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	eb45 030b 	adc.w	r3, r5, fp
 80047c4:	607b      	str	r3, [r7, #4]
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	f04f 0300 	mov.w	r3, #0
 80047ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047d2:	4629      	mov	r1, r5
 80047d4:	028b      	lsls	r3, r1, #10
 80047d6:	4621      	mov	r1, r4
 80047d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047dc:	4621      	mov	r1, r4
 80047de:	028a      	lsls	r2, r1, #10
 80047e0:	4610      	mov	r0, r2
 80047e2:	4619      	mov	r1, r3
 80047e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e6:	2200      	movs	r2, #0
 80047e8:	60bb      	str	r3, [r7, #8]
 80047ea:	60fa      	str	r2, [r7, #12]
 80047ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047f0:	f7fc fa2a 	bl	8000c48 <__aeabi_uldivmod>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4613      	mov	r3, r2
 80047fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047fc:	4b0b      	ldr	r3, [pc, #44]	@ (800482c <HAL_RCC_GetSysClockFreq+0x180>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	0c1b      	lsrs	r3, r3, #16
 8004802:	f003 0303 	and.w	r3, r3, #3
 8004806:	3301      	adds	r3, #1
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800480c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800480e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004810:	fbb2 f3f3 	udiv	r3, r2, r3
 8004814:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004816:	e002      	b.n	800481e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004818:	4b05      	ldr	r3, [pc, #20]	@ (8004830 <HAL_RCC_GetSysClockFreq+0x184>)
 800481a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800481c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800481e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004820:	4618      	mov	r0, r3
 8004822:	3740      	adds	r7, #64	@ 0x40
 8004824:	46bd      	mov	sp, r7
 8004826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800482a:	bf00      	nop
 800482c:	40023800 	.word	0x40023800
 8004830:	00f42400 	.word	0x00f42400
 8004834:	017d7840 	.word	0x017d7840

08004838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800483c:	4b03      	ldr	r3, [pc, #12]	@ (800484c <HAL_RCC_GetHCLKFreq+0x14>)
 800483e:	681b      	ldr	r3, [r3, #0]
}
 8004840:	4618      	mov	r0, r3
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	20000038 	.word	0x20000038

08004850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e041      	b.n	80048e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d106      	bne.n	800487c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fd f8e8 	bl	8001a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3304      	adds	r3, #4
 800488c:	4619      	mov	r1, r3
 800488e:	4610      	mov	r0, r2
 8004890:	f000 fed2 	bl	8005638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
	...

080048f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b01      	cmp	r3, #1
 8004902:	d001      	beq.n	8004908 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e044      	b.n	8004992 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a1e      	ldr	r2, [pc, #120]	@ (80049a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d018      	beq.n	800495c <HAL_TIM_Base_Start_IT+0x6c>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004932:	d013      	beq.n	800495c <HAL_TIM_Base_Start_IT+0x6c>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a1a      	ldr	r2, [pc, #104]	@ (80049a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d00e      	beq.n	800495c <HAL_TIM_Base_Start_IT+0x6c>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a19      	ldr	r2, [pc, #100]	@ (80049a8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d009      	beq.n	800495c <HAL_TIM_Base_Start_IT+0x6c>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a17      	ldr	r2, [pc, #92]	@ (80049ac <HAL_TIM_Base_Start_IT+0xbc>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d004      	beq.n	800495c <HAL_TIM_Base_Start_IT+0x6c>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a16      	ldr	r2, [pc, #88]	@ (80049b0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d111      	bne.n	8004980 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b06      	cmp	r3, #6
 800496c:	d010      	beq.n	8004990 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f042 0201 	orr.w	r2, r2, #1
 800497c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497e:	e007      	b.n	8004990 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0201 	orr.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40010000 	.word	0x40010000
 80049a4:	40000400 	.word	0x40000400
 80049a8:	40000800 	.word	0x40000800
 80049ac:	40000c00 	.word	0x40000c00
 80049b0:	40014000 	.word	0x40014000

080049b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e041      	b.n	8004a4a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d106      	bne.n	80049e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7fd f85c 	bl	8001a98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3304      	adds	r3, #4
 80049f0:	4619      	mov	r1, r3
 80049f2:	4610      	mov	r0, r2
 80049f4:	f000 fe20 	bl	8005638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
	...

08004a54 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d109      	bne.n	8004a80 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	bf0c      	ite	eq
 8004a78:	2301      	moveq	r3, #1
 8004a7a:	2300      	movne	r3, #0
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	e022      	b.n	8004ac6 <HAL_TIM_PWM_Start_DMA+0x72>
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d109      	bne.n	8004a9a <HAL_TIM_PWM_Start_DMA+0x46>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	bf0c      	ite	eq
 8004a92:	2301      	moveq	r3, #1
 8004a94:	2300      	movne	r3, #0
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	e015      	b.n	8004ac6 <HAL_TIM_PWM_Start_DMA+0x72>
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d109      	bne.n	8004ab4 <HAL_TIM_PWM_Start_DMA+0x60>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	bf0c      	ite	eq
 8004aac:	2301      	moveq	r3, #1
 8004aae:	2300      	movne	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	e008      	b.n	8004ac6 <HAL_TIM_PWM_Start_DMA+0x72>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	bf0c      	ite	eq
 8004ac0:	2301      	moveq	r3, #1
 8004ac2:	2300      	movne	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004aca:	2302      	movs	r3, #2
 8004acc:	e15d      	b.n	8004d8a <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d109      	bne.n	8004ae8 <HAL_TIM_PWM_Start_DMA+0x94>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	bf0c      	ite	eq
 8004ae0:	2301      	moveq	r3, #1
 8004ae2:	2300      	movne	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	e022      	b.n	8004b2e <HAL_TIM_PWM_Start_DMA+0xda>
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d109      	bne.n	8004b02 <HAL_TIM_PWM_Start_DMA+0xae>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	bf0c      	ite	eq
 8004afa:	2301      	moveq	r3, #1
 8004afc:	2300      	movne	r3, #0
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	e015      	b.n	8004b2e <HAL_TIM_PWM_Start_DMA+0xda>
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d109      	bne.n	8004b1c <HAL_TIM_PWM_Start_DMA+0xc8>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	bf0c      	ite	eq
 8004b14:	2301      	moveq	r3, #1
 8004b16:	2300      	movne	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	e008      	b.n	8004b2e <HAL_TIM_PWM_Start_DMA+0xda>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	bf0c      	ite	eq
 8004b28:	2301      	moveq	r3, #1
 8004b2a:	2300      	movne	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d024      	beq.n	8004b7c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <HAL_TIM_PWM_Start_DMA+0xea>
 8004b38:	887b      	ldrh	r3, [r7, #2]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e123      	b.n	8004d8a <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d104      	bne.n	8004b52 <HAL_TIM_PWM_Start_DMA+0xfe>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b50:	e016      	b.n	8004b80 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d104      	bne.n	8004b62 <HAL_TIM_PWM_Start_DMA+0x10e>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b60:	e00e      	b.n	8004b80 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d104      	bne.n	8004b72 <HAL_TIM_PWM_Start_DMA+0x11e>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b70:	e006      	b.n	8004b80 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2202      	movs	r2, #2
 8004b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b7a:	e001      	b.n	8004b80 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e104      	b.n	8004d8a <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b0c      	cmp	r3, #12
 8004b84:	f200 80ae 	bhi.w	8004ce4 <HAL_TIM_PWM_Start_DMA+0x290>
 8004b88:	a201      	add	r2, pc, #4	@ (adr r2, 8004b90 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004bc5 	.word	0x08004bc5
 8004b94:	08004ce5 	.word	0x08004ce5
 8004b98:	08004ce5 	.word	0x08004ce5
 8004b9c:	08004ce5 	.word	0x08004ce5
 8004ba0:	08004c0d 	.word	0x08004c0d
 8004ba4:	08004ce5 	.word	0x08004ce5
 8004ba8:	08004ce5 	.word	0x08004ce5
 8004bac:	08004ce5 	.word	0x08004ce5
 8004bb0:	08004c55 	.word	0x08004c55
 8004bb4:	08004ce5 	.word	0x08004ce5
 8004bb8:	08004ce5 	.word	0x08004ce5
 8004bbc:	08004ce5 	.word	0x08004ce5
 8004bc0:	08004c9d 	.word	0x08004c9d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc8:	4a72      	ldr	r2, [pc, #456]	@ (8004d94 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004bca:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd0:	4a71      	ldr	r2, [pc, #452]	@ (8004d98 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004bd2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd8:	4a70      	ldr	r2, [pc, #448]	@ (8004d9c <HAL_TIM_PWM_Start_DMA+0x348>)
 8004bda:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004be0:	6879      	ldr	r1, [r7, #4]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3334      	adds	r3, #52	@ 0x34
 8004be8:	461a      	mov	r2, r3
 8004bea:	887b      	ldrh	r3, [r7, #2]
 8004bec:	f7fd fafe 	bl	80021ec <HAL_DMA_Start_IT>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e0c7      	b.n	8004d8a <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68da      	ldr	r2, [r3, #12]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c08:	60da      	str	r2, [r3, #12]
      break;
 8004c0a:	e06e      	b.n	8004cea <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c10:	4a60      	ldr	r2, [pc, #384]	@ (8004d94 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004c12:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c18:	4a5f      	ldr	r2, [pc, #380]	@ (8004d98 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004c1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c20:	4a5e      	ldr	r2, [pc, #376]	@ (8004d9c <HAL_TIM_PWM_Start_DMA+0x348>)
 8004c22:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3338      	adds	r3, #56	@ 0x38
 8004c30:	461a      	mov	r2, r3
 8004c32:	887b      	ldrh	r3, [r7, #2]
 8004c34:	f7fd fada 	bl	80021ec <HAL_DMA_Start_IT>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e0a3      	b.n	8004d8a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68da      	ldr	r2, [r3, #12]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c50:	60da      	str	r2, [r3, #12]
      break;
 8004c52:	e04a      	b.n	8004cea <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c58:	4a4e      	ldr	r2, [pc, #312]	@ (8004d94 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004c5a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c60:	4a4d      	ldr	r2, [pc, #308]	@ (8004d98 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004c62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c68:	4a4c      	ldr	r2, [pc, #304]	@ (8004d9c <HAL_TIM_PWM_Start_DMA+0x348>)
 8004c6a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004c70:	6879      	ldr	r1, [r7, #4]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	333c      	adds	r3, #60	@ 0x3c
 8004c78:	461a      	mov	r2, r3
 8004c7a:	887b      	ldrh	r3, [r7, #2]
 8004c7c:	f7fd fab6 	bl	80021ec <HAL_DMA_Start_IT>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e07f      	b.n	8004d8a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c98:	60da      	str	r2, [r3, #12]
      break;
 8004c9a:	e026      	b.n	8004cea <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca0:	4a3c      	ldr	r2, [pc, #240]	@ (8004d94 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004ca2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca8:	4a3b      	ldr	r2, [pc, #236]	@ (8004d98 <HAL_TIM_PWM_Start_DMA+0x344>)
 8004caa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb0:	4a3a      	ldr	r2, [pc, #232]	@ (8004d9c <HAL_TIM_PWM_Start_DMA+0x348>)
 8004cb2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	3340      	adds	r3, #64	@ 0x40
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	887b      	ldrh	r3, [r7, #2]
 8004cc4:	f7fd fa92 	bl	80021ec <HAL_DMA_Start_IT>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e05b      	b.n	8004d8a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68da      	ldr	r2, [r3, #12]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004ce0:	60da      	str	r2, [r3, #12]
      break;
 8004ce2:	e002      	b.n	8004cea <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ce8:	bf00      	nop
  }

  if (status == HAL_OK)
 8004cea:	7dfb      	ldrb	r3, [r7, #23]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d14b      	bne.n	8004d88 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	68b9      	ldr	r1, [r7, #8]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 ff4f 	bl	8005b9c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a27      	ldr	r2, [pc, #156]	@ (8004da0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d107      	bne.n	8004d18 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d16:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a20      	ldr	r2, [pc, #128]	@ (8004da0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d018      	beq.n	8004d54 <HAL_TIM_PWM_Start_DMA+0x300>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d2a:	d013      	beq.n	8004d54 <HAL_TIM_PWM_Start_DMA+0x300>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a1c      	ldr	r2, [pc, #112]	@ (8004da4 <HAL_TIM_PWM_Start_DMA+0x350>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00e      	beq.n	8004d54 <HAL_TIM_PWM_Start_DMA+0x300>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8004da8 <HAL_TIM_PWM_Start_DMA+0x354>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d009      	beq.n	8004d54 <HAL_TIM_PWM_Start_DMA+0x300>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a19      	ldr	r2, [pc, #100]	@ (8004dac <HAL_TIM_PWM_Start_DMA+0x358>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d004      	beq.n	8004d54 <HAL_TIM_PWM_Start_DMA+0x300>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a18      	ldr	r2, [pc, #96]	@ (8004db0 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d111      	bne.n	8004d78 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	2b06      	cmp	r3, #6
 8004d64:	d010      	beq.n	8004d88 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f042 0201 	orr.w	r2, r2, #1
 8004d74:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d76:	e007      	b.n	8004d88 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 0201 	orr.w	r2, r2, #1
 8004d86:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	08005529 	.word	0x08005529
 8004d98:	080055d1 	.word	0x080055d1
 8004d9c:	08005497 	.word	0x08005497
 8004da0:	40010000 	.word	0x40010000
 8004da4:	40000400 	.word	0x40000400
 8004da8:	40000800 	.word	0x40000800
 8004dac:	40000c00 	.word	0x40000c00
 8004db0:	40014000 	.word	0x40014000

08004db4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b0c      	cmp	r3, #12
 8004dc6:	d855      	bhi.n	8004e74 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8004dd0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dce:	bf00      	nop
 8004dd0:	08004e05 	.word	0x08004e05
 8004dd4:	08004e75 	.word	0x08004e75
 8004dd8:	08004e75 	.word	0x08004e75
 8004ddc:	08004e75 	.word	0x08004e75
 8004de0:	08004e21 	.word	0x08004e21
 8004de4:	08004e75 	.word	0x08004e75
 8004de8:	08004e75 	.word	0x08004e75
 8004dec:	08004e75 	.word	0x08004e75
 8004df0:	08004e3d 	.word	0x08004e3d
 8004df4:	08004e75 	.word	0x08004e75
 8004df8:	08004e75 	.word	0x08004e75
 8004dfc:	08004e75 	.word	0x08004e75
 8004e00:	08004e59 	.word	0x08004e59
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004e12:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7fd fa3f 	bl	800229c <HAL_DMA_Abort_IT>
      break;
 8004e1e:	e02c      	b.n	8004e7a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e2e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7fd fa31 	bl	800229c <HAL_DMA_Abort_IT>
      break;
 8004e3a:	e01e      	b.n	8004e7a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e4a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fd fa23 	bl	800229c <HAL_DMA_Abort_IT>
      break;
 8004e56:	e010      	b.n	8004e7a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004e66:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fd fa15 	bl	800229c <HAL_DMA_Abort_IT>
      break;
 8004e72:	e002      	b.n	8004e7a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	73fb      	strb	r3, [r7, #15]
      break;
 8004e78:	bf00      	nop
  }

  if (status == HAL_OK)
 8004e7a:	7bfb      	ldrb	r3, [r7, #15]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d157      	bne.n	8004f30 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2200      	movs	r2, #0
 8004e86:	6839      	ldr	r1, [r7, #0]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 fe87 	bl	8005b9c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a2a      	ldr	r2, [pc, #168]	@ (8004f3c <HAL_TIM_PWM_Stop_DMA+0x188>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d117      	bne.n	8004ec8 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6a1a      	ldr	r2, [r3, #32]
 8004e9e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10f      	bne.n	8004ec8 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6a1a      	ldr	r2, [r3, #32]
 8004eae:	f240 4344 	movw	r3, #1092	@ 0x444
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d107      	bne.n	8004ec8 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ec6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6a1a      	ldr	r2, [r3, #32]
 8004ece:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10f      	bne.n	8004ef8 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6a1a      	ldr	r2, [r3, #32]
 8004ede:	f240 4344 	movw	r3, #1092	@ 0x444
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d107      	bne.n	8004ef8 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0201 	bic.w	r2, r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d104      	bne.n	8004f08 <HAL_TIM_PWM_Stop_DMA+0x154>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f06:	e013      	b.n	8004f30 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d104      	bne.n	8004f18 <HAL_TIM_PWM_Stop_DMA+0x164>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f16:	e00b      	b.n	8004f30 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	2b08      	cmp	r3, #8
 8004f1c:	d104      	bne.n	8004f28 <HAL_TIM_PWM_Stop_DMA+0x174>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f26:	e003      	b.n	8004f30 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	40010000 	.word	0x40010000

08004f40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d020      	beq.n	8004fa4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d01b      	beq.n	8004fa4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f06f 0202 	mvn.w	r2, #2
 8004f74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	f003 0303 	and.w	r3, r3, #3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 fa5b 	bl	8005446 <HAL_TIM_IC_CaptureCallback>
 8004f90:	e005      	b.n	8004f9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fa4d 	bl	8005432 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7fc f917 	bl	80011cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	f003 0304 	and.w	r3, r3, #4
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d020      	beq.n	8004ff0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d01b      	beq.n	8004ff0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f06f 0204 	mvn.w	r2, #4
 8004fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fa35 	bl	8005446 <HAL_TIM_IC_CaptureCallback>
 8004fdc:	e005      	b.n	8004fea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 fa27 	bl	8005432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f7fc f8f1 	bl	80011cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f003 0308 	and.w	r3, r3, #8
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d020      	beq.n	800503c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f003 0308 	and.w	r3, r3, #8
 8005000:	2b00      	cmp	r3, #0
 8005002:	d01b      	beq.n	800503c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f06f 0208 	mvn.w	r2, #8
 800500c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2204      	movs	r2, #4
 8005012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	f003 0303 	and.w	r3, r3, #3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fa0f 	bl	8005446 <HAL_TIM_IC_CaptureCallback>
 8005028:	e005      	b.n	8005036 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fa01 	bl	8005432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7fc f8cb 	bl	80011cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f003 0310 	and.w	r3, r3, #16
 8005042:	2b00      	cmp	r3, #0
 8005044:	d020      	beq.n	8005088 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f003 0310 	and.w	r3, r3, #16
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01b      	beq.n	8005088 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f06f 0210 	mvn.w	r2, #16
 8005058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2208      	movs	r2, #8
 800505e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f9e9 	bl	8005446 <HAL_TIM_IC_CaptureCallback>
 8005074:	e005      	b.n	8005082 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f9db 	bl	8005432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7fc f8a5 	bl	80011cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00c      	beq.n	80050ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	d007      	beq.n	80050ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f06f 0201 	mvn.w	r2, #1
 80050a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7fc fc4a 	bl	8001940 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00c      	beq.n	80050d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d007      	beq.n	80050d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80050c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 fe04 	bl	8005cd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00c      	beq.n	80050f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d007      	beq.n	80050f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f9bd 	bl	800546e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	f003 0320 	and.w	r3, r3, #32
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00c      	beq.n	8005118 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f003 0320 	and.w	r3, r3, #32
 8005104:	2b00      	cmp	r3, #0
 8005106:	d007      	beq.n	8005118 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f06f 0220 	mvn.w	r2, #32
 8005110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fdd6 	bl	8005cc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005118:	bf00      	nop
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005136:	2b01      	cmp	r3, #1
 8005138:	d101      	bne.n	800513e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800513a:	2302      	movs	r3, #2
 800513c:	e0ae      	b.n	800529c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b0c      	cmp	r3, #12
 800514a:	f200 809f 	bhi.w	800528c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800514e:	a201      	add	r2, pc, #4	@ (adr r2, 8005154 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005154:	08005189 	.word	0x08005189
 8005158:	0800528d 	.word	0x0800528d
 800515c:	0800528d 	.word	0x0800528d
 8005160:	0800528d 	.word	0x0800528d
 8005164:	080051c9 	.word	0x080051c9
 8005168:	0800528d 	.word	0x0800528d
 800516c:	0800528d 	.word	0x0800528d
 8005170:	0800528d 	.word	0x0800528d
 8005174:	0800520b 	.word	0x0800520b
 8005178:	0800528d 	.word	0x0800528d
 800517c:	0800528d 	.word	0x0800528d
 8005180:	0800528d 	.word	0x0800528d
 8005184:	0800524b 	.word	0x0800524b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68b9      	ldr	r1, [r7, #8]
 800518e:	4618      	mov	r0, r3
 8005190:	f000 fade 	bl	8005750 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699a      	ldr	r2, [r3, #24]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0208 	orr.w	r2, r2, #8
 80051a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699a      	ldr	r2, [r3, #24]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0204 	bic.w	r2, r2, #4
 80051b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6999      	ldr	r1, [r3, #24]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	691a      	ldr	r2, [r3, #16]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	619a      	str	r2, [r3, #24]
      break;
 80051c6:	e064      	b.n	8005292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68b9      	ldr	r1, [r7, #8]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 fb24 	bl	800581c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699a      	ldr	r2, [r3, #24]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	699a      	ldr	r2, [r3, #24]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6999      	ldr	r1, [r3, #24]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	021a      	lsls	r2, r3, #8
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	619a      	str	r2, [r3, #24]
      break;
 8005208:	e043      	b.n	8005292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68b9      	ldr	r1, [r7, #8]
 8005210:	4618      	mov	r0, r3
 8005212:	f000 fb6f 	bl	80058f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69da      	ldr	r2, [r3, #28]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f042 0208 	orr.w	r2, r2, #8
 8005224:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	69da      	ldr	r2, [r3, #28]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0204 	bic.w	r2, r2, #4
 8005234:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69d9      	ldr	r1, [r3, #28]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	691a      	ldr	r2, [r3, #16]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	61da      	str	r2, [r3, #28]
      break;
 8005248:	e023      	b.n	8005292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68b9      	ldr	r1, [r7, #8]
 8005250:	4618      	mov	r0, r3
 8005252:	f000 fbb9 	bl	80059c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69da      	ldr	r2, [r3, #28]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005264:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69da      	ldr	r2, [r3, #28]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69d9      	ldr	r1, [r3, #28]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	021a      	lsls	r2, r3, #8
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	61da      	str	r2, [r3, #28]
      break;
 800528a:	e002      	b.n	8005292 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	75fb      	strb	r3, [r7, #23]
      break;
 8005290:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800529a:	7dfb      	ldrb	r3, [r7, #23]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d101      	bne.n	80052c0 <HAL_TIM_ConfigClockSource+0x1c>
 80052bc:	2302      	movs	r3, #2
 80052be:	e0b4      	b.n	800542a <HAL_TIM_ConfigClockSource+0x186>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80052de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052f8:	d03e      	beq.n	8005378 <HAL_TIM_ConfigClockSource+0xd4>
 80052fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052fe:	f200 8087 	bhi.w	8005410 <HAL_TIM_ConfigClockSource+0x16c>
 8005302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005306:	f000 8086 	beq.w	8005416 <HAL_TIM_ConfigClockSource+0x172>
 800530a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800530e:	d87f      	bhi.n	8005410 <HAL_TIM_ConfigClockSource+0x16c>
 8005310:	2b70      	cmp	r3, #112	@ 0x70
 8005312:	d01a      	beq.n	800534a <HAL_TIM_ConfigClockSource+0xa6>
 8005314:	2b70      	cmp	r3, #112	@ 0x70
 8005316:	d87b      	bhi.n	8005410 <HAL_TIM_ConfigClockSource+0x16c>
 8005318:	2b60      	cmp	r3, #96	@ 0x60
 800531a:	d050      	beq.n	80053be <HAL_TIM_ConfigClockSource+0x11a>
 800531c:	2b60      	cmp	r3, #96	@ 0x60
 800531e:	d877      	bhi.n	8005410 <HAL_TIM_ConfigClockSource+0x16c>
 8005320:	2b50      	cmp	r3, #80	@ 0x50
 8005322:	d03c      	beq.n	800539e <HAL_TIM_ConfigClockSource+0xfa>
 8005324:	2b50      	cmp	r3, #80	@ 0x50
 8005326:	d873      	bhi.n	8005410 <HAL_TIM_ConfigClockSource+0x16c>
 8005328:	2b40      	cmp	r3, #64	@ 0x40
 800532a:	d058      	beq.n	80053de <HAL_TIM_ConfigClockSource+0x13a>
 800532c:	2b40      	cmp	r3, #64	@ 0x40
 800532e:	d86f      	bhi.n	8005410 <HAL_TIM_ConfigClockSource+0x16c>
 8005330:	2b30      	cmp	r3, #48	@ 0x30
 8005332:	d064      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x15a>
 8005334:	2b30      	cmp	r3, #48	@ 0x30
 8005336:	d86b      	bhi.n	8005410 <HAL_TIM_ConfigClockSource+0x16c>
 8005338:	2b20      	cmp	r3, #32
 800533a:	d060      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x15a>
 800533c:	2b20      	cmp	r3, #32
 800533e:	d867      	bhi.n	8005410 <HAL_TIM_ConfigClockSource+0x16c>
 8005340:	2b00      	cmp	r3, #0
 8005342:	d05c      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x15a>
 8005344:	2b10      	cmp	r3, #16
 8005346:	d05a      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x15a>
 8005348:	e062      	b.n	8005410 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800535a:	f000 fbff 	bl	8005b5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800536c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	609a      	str	r2, [r3, #8]
      break;
 8005376:	e04f      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005388:	f000 fbe8 	bl	8005b5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689a      	ldr	r2, [r3, #8]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800539a:	609a      	str	r2, [r3, #8]
      break;
 800539c:	e03c      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053aa:	461a      	mov	r2, r3
 80053ac:	f000 fb5c 	bl	8005a68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2150      	movs	r1, #80	@ 0x50
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 fbb5 	bl	8005b26 <TIM_ITRx_SetConfig>
      break;
 80053bc:	e02c      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ca:	461a      	mov	r2, r3
 80053cc:	f000 fb7b 	bl	8005ac6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2160      	movs	r1, #96	@ 0x60
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 fba5 	bl	8005b26 <TIM_ITRx_SetConfig>
      break;
 80053dc:	e01c      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ea:	461a      	mov	r2, r3
 80053ec:	f000 fb3c 	bl	8005a68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2140      	movs	r1, #64	@ 0x40
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 fb95 	bl	8005b26 <TIM_ITRx_SetConfig>
      break;
 80053fc:	e00c      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4619      	mov	r1, r3
 8005408:	4610      	mov	r0, r2
 800540a:	f000 fb8c 	bl	8005b26 <TIM_ITRx_SetConfig>
      break;
 800540e:	e003      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	73fb      	strb	r3, [r7, #15]
      break;
 8005414:	e000      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005416:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005428:	7bfb      	ldrb	r3, [r7, #15]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005432:	b480      	push	{r7}
 8005434:	b083      	sub	sp, #12
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800543a:	bf00      	nop
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800545a:	b480      	push	{r7}
 800545c:	b083      	sub	sp, #12
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b084      	sub	sp, #16
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d107      	bne.n	80054be <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2201      	movs	r2, #1
 80054b2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054bc:	e02a      	b.n	8005514 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d107      	bne.n	80054d8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2202      	movs	r2, #2
 80054cc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054d6:	e01d      	b.n	8005514 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d107      	bne.n	80054f2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2204      	movs	r2, #4
 80054e6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054f0:	e010      	b.n	8005514 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d107      	bne.n	800550c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2208      	movs	r2, #8
 8005500:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800550a:	e003      	b.n	8005514 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f7ff ffb4 	bl	8005482 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	771a      	strb	r2, [r3, #28]
}
 8005520:	bf00      	nop
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005534:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	429a      	cmp	r2, r3
 800553e:	d10b      	bne.n	8005558 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2201      	movs	r2, #1
 8005544:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d136      	bne.n	80055bc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005556:	e031      	b.n	80055bc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	429a      	cmp	r2, r3
 8005560:	d10b      	bne.n	800557a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2202      	movs	r2, #2
 8005566:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	69db      	ldr	r3, [r3, #28]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d125      	bne.n	80055bc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005578:	e020      	b.n	80055bc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	429a      	cmp	r2, r3
 8005582:	d10b      	bne.n	800559c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2204      	movs	r2, #4
 8005588:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d114      	bne.n	80055bc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800559a:	e00f      	b.n	80055bc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d10a      	bne.n	80055bc <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2208      	movs	r2, #8
 80055aa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d103      	bne.n	80055bc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f7fb fe05 	bl	80011cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	771a      	strb	r2, [r3, #28]
}
 80055c8:	bf00      	nop
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055dc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d103      	bne.n	80055f0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2201      	movs	r2, #1
 80055ec:	771a      	strb	r2, [r3, #28]
 80055ee:	e019      	b.n	8005624 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d103      	bne.n	8005602 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2202      	movs	r2, #2
 80055fe:	771a      	strb	r2, [r3, #28]
 8005600:	e010      	b.n	8005624 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	429a      	cmp	r2, r3
 800560a:	d103      	bne.n	8005614 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2204      	movs	r2, #4
 8005610:	771a      	strb	r2, [r3, #28]
 8005612:	e007      	b.n	8005624 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	429a      	cmp	r2, r3
 800561c:	d102      	bne.n	8005624 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2208      	movs	r2, #8
 8005622:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f7ff ff18 	bl	800545a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	771a      	strb	r2, [r3, #28]
}
 8005630:	bf00      	nop
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a3a      	ldr	r2, [pc, #232]	@ (8005734 <TIM_Base_SetConfig+0xfc>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d00f      	beq.n	8005670 <TIM_Base_SetConfig+0x38>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005656:	d00b      	beq.n	8005670 <TIM_Base_SetConfig+0x38>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a37      	ldr	r2, [pc, #220]	@ (8005738 <TIM_Base_SetConfig+0x100>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d007      	beq.n	8005670 <TIM_Base_SetConfig+0x38>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a36      	ldr	r2, [pc, #216]	@ (800573c <TIM_Base_SetConfig+0x104>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d003      	beq.n	8005670 <TIM_Base_SetConfig+0x38>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a35      	ldr	r2, [pc, #212]	@ (8005740 <TIM_Base_SetConfig+0x108>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d108      	bne.n	8005682 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	4313      	orrs	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a2b      	ldr	r2, [pc, #172]	@ (8005734 <TIM_Base_SetConfig+0xfc>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d01b      	beq.n	80056c2 <TIM_Base_SetConfig+0x8a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005690:	d017      	beq.n	80056c2 <TIM_Base_SetConfig+0x8a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a28      	ldr	r2, [pc, #160]	@ (8005738 <TIM_Base_SetConfig+0x100>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d013      	beq.n	80056c2 <TIM_Base_SetConfig+0x8a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a27      	ldr	r2, [pc, #156]	@ (800573c <TIM_Base_SetConfig+0x104>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00f      	beq.n	80056c2 <TIM_Base_SetConfig+0x8a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a26      	ldr	r2, [pc, #152]	@ (8005740 <TIM_Base_SetConfig+0x108>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d00b      	beq.n	80056c2 <TIM_Base_SetConfig+0x8a>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a25      	ldr	r2, [pc, #148]	@ (8005744 <TIM_Base_SetConfig+0x10c>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d007      	beq.n	80056c2 <TIM_Base_SetConfig+0x8a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a24      	ldr	r2, [pc, #144]	@ (8005748 <TIM_Base_SetConfig+0x110>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d003      	beq.n	80056c2 <TIM_Base_SetConfig+0x8a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a23      	ldr	r2, [pc, #140]	@ (800574c <TIM_Base_SetConfig+0x114>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d108      	bne.n	80056d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a0e      	ldr	r2, [pc, #56]	@ (8005734 <TIM_Base_SetConfig+0xfc>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d103      	bne.n	8005708 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	691a      	ldr	r2, [r3, #16]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b01      	cmp	r3, #1
 8005718:	d105      	bne.n	8005726 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	f023 0201 	bic.w	r2, r3, #1
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	611a      	str	r2, [r3, #16]
  }
}
 8005726:	bf00      	nop
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	40010000 	.word	0x40010000
 8005738:	40000400 	.word	0x40000400
 800573c:	40000800 	.word	0x40000800
 8005740:	40000c00 	.word	0x40000c00
 8005744:	40014000 	.word	0x40014000
 8005748:	40014400 	.word	0x40014400
 800574c:	40014800 	.word	0x40014800

08005750 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	f023 0201 	bic.w	r2, r3, #1
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800577e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 0303 	bic.w	r3, r3, #3
 8005786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f023 0302 	bic.w	r3, r3, #2
 8005798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a1c      	ldr	r2, [pc, #112]	@ (8005818 <TIM_OC1_SetConfig+0xc8>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d10c      	bne.n	80057c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f023 0308 	bic.w	r3, r3, #8
 80057b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f023 0304 	bic.w	r3, r3, #4
 80057c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a13      	ldr	r2, [pc, #76]	@ (8005818 <TIM_OC1_SetConfig+0xc8>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d111      	bne.n	80057f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	621a      	str	r2, [r3, #32]
}
 800580c:	bf00      	nop
 800580e:	371c      	adds	r7, #28
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	40010000 	.word	0x40010000

0800581c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	f023 0210 	bic.w	r2, r3, #16
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800584a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	021b      	lsls	r3, r3, #8
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	4313      	orrs	r3, r2
 800585e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f023 0320 	bic.w	r3, r3, #32
 8005866:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	011b      	lsls	r3, r3, #4
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	4313      	orrs	r3, r2
 8005872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a1e      	ldr	r2, [pc, #120]	@ (80058f0 <TIM_OC2_SetConfig+0xd4>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d10d      	bne.n	8005898 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005882:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	011b      	lsls	r3, r3, #4
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	4313      	orrs	r3, r2
 800588e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005896:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a15      	ldr	r2, [pc, #84]	@ (80058f0 <TIM_OC2_SetConfig+0xd4>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d113      	bne.n	80058c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	621a      	str	r2, [r3, #32]
}
 80058e2:	bf00      	nop
 80058e4:	371c      	adds	r7, #28
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	40010000 	.word	0x40010000

080058f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a1b      	ldr	r3, [r3, #32]
 8005908:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f023 0303 	bic.w	r3, r3, #3
 800592a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800593c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	021b      	lsls	r3, r3, #8
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	4313      	orrs	r3, r2
 8005948:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a1d      	ldr	r2, [pc, #116]	@ (80059c4 <TIM_OC3_SetConfig+0xd0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d10d      	bne.n	800596e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005958:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	021b      	lsls	r3, r3, #8
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800596c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a14      	ldr	r2, [pc, #80]	@ (80059c4 <TIM_OC3_SetConfig+0xd0>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d113      	bne.n	800599e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800597c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005984:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	011b      	lsls	r3, r3, #4
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	4313      	orrs	r3, r2
 8005990:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	011b      	lsls	r3, r3, #4
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	4313      	orrs	r3, r2
 800599c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	621a      	str	r2, [r3, #32]
}
 80059b8:	bf00      	nop
 80059ba:	371c      	adds	r7, #28
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	40010000 	.word	0x40010000

080059c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	021b      	lsls	r3, r3, #8
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	031b      	lsls	r3, r3, #12
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a10      	ldr	r2, [pc, #64]	@ (8005a64 <TIM_OC4_SetConfig+0x9c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d109      	bne.n	8005a3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	019b      	lsls	r3, r3, #6
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	621a      	str	r2, [r3, #32]
}
 8005a56:	bf00      	nop
 8005a58:	371c      	adds	r7, #28
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	40010000 	.word	0x40010000

08005a68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b087      	sub	sp, #28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	f023 0201 	bic.w	r2, r3, #1
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	011b      	lsls	r3, r3, #4
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f023 030a 	bic.w	r3, r3, #10
 8005aa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	621a      	str	r2, [r3, #32]
}
 8005aba:	bf00      	nop
 8005abc:	371c      	adds	r7, #28
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b087      	sub	sp, #28
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	f023 0210 	bic.w	r2, r3, #16
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005af0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	031b      	lsls	r3, r3, #12
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005b02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	011b      	lsls	r3, r3, #4
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	621a      	str	r2, [r3, #32]
}
 8005b1a:	bf00      	nop
 8005b1c:	371c      	adds	r7, #28
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b085      	sub	sp, #20
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	f043 0307 	orr.w	r3, r3, #7
 8005b48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	609a      	str	r2, [r3, #8]
}
 8005b50:	bf00      	nop
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	021a      	lsls	r2, r3, #8
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	609a      	str	r2, [r3, #8]
}
 8005b90:	bf00      	nop
 8005b92:	371c      	adds	r7, #28
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f003 031f 	and.w	r3, r3, #31
 8005bae:	2201      	movs	r2, #1
 8005bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a1a      	ldr	r2, [r3, #32]
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	43db      	mvns	r3, r3
 8005bbe:	401a      	ands	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6a1a      	ldr	r2, [r3, #32]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f003 031f 	and.w	r3, r3, #31
 8005bce:	6879      	ldr	r1, [r7, #4]
 8005bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	621a      	str	r2, [r3, #32]
}
 8005bda:	bf00      	nop
 8005bdc:	371c      	adds	r7, #28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
	...

08005be8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d101      	bne.n	8005c00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	e050      	b.n	8005ca2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d018      	beq.n	8005c76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c4c:	d013      	beq.n	8005c76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a18      	ldr	r2, [pc, #96]	@ (8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d00e      	beq.n	8005c76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a16      	ldr	r2, [pc, #88]	@ (8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d009      	beq.n	8005c76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a15      	ldr	r2, [pc, #84]	@ (8005cbc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d004      	beq.n	8005c76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a13      	ldr	r2, [pc, #76]	@ (8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d10c      	bne.n	8005c90 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	40010000 	.word	0x40010000
 8005cb4:	40000400 	.word	0x40000400
 8005cb8:	40000800 	.word	0x40000800
 8005cbc:	40000c00 	.word	0x40000c00
 8005cc0:	40014000 	.word	0x40014000

08005cc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cec:	b084      	sub	sp, #16
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b084      	sub	sp, #16
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
 8005cf6:	f107 001c 	add.w	r0, r7, #28
 8005cfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cfe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d123      	bne.n	8005d4e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d0a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005d1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d2e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d105      	bne.n	8005d42 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f001 fae2 	bl	800730c <USB_CoreReset>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	73fb      	strb	r3, [r7, #15]
 8005d4c:	e01b      	b.n	8005d86 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f001 fad6 	bl	800730c <USB_CoreReset>
 8005d60:	4603      	mov	r3, r0
 8005d62:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d64:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d106      	bne.n	8005d7a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d70:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	639a      	str	r2, [r3, #56]	@ 0x38
 8005d78:	e005      	b.n	8005d86 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d7e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d86:	7fbb      	ldrb	r3, [r7, #30]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d10b      	bne.n	8005da4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f043 0206 	orr.w	r2, r3, #6
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f043 0220 	orr.w	r2, r3, #32
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005db0:	b004      	add	sp, #16
 8005db2:	4770      	bx	lr

08005db4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b087      	sub	sp, #28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005dc2:	79fb      	ldrb	r3, [r7, #7]
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d165      	bne.n	8005e94 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	4a41      	ldr	r2, [pc, #260]	@ (8005ed0 <USB_SetTurnaroundTime+0x11c>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d906      	bls.n	8005dde <USB_SetTurnaroundTime+0x2a>
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4a40      	ldr	r2, [pc, #256]	@ (8005ed4 <USB_SetTurnaroundTime+0x120>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d202      	bcs.n	8005dde <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005dd8:	230f      	movs	r3, #15
 8005dda:	617b      	str	r3, [r7, #20]
 8005ddc:	e062      	b.n	8005ea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	4a3c      	ldr	r2, [pc, #240]	@ (8005ed4 <USB_SetTurnaroundTime+0x120>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d306      	bcc.n	8005df4 <USB_SetTurnaroundTime+0x40>
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	4a3b      	ldr	r2, [pc, #236]	@ (8005ed8 <USB_SetTurnaroundTime+0x124>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d202      	bcs.n	8005df4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005dee:	230e      	movs	r3, #14
 8005df0:	617b      	str	r3, [r7, #20]
 8005df2:	e057      	b.n	8005ea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	4a38      	ldr	r2, [pc, #224]	@ (8005ed8 <USB_SetTurnaroundTime+0x124>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d306      	bcc.n	8005e0a <USB_SetTurnaroundTime+0x56>
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	4a37      	ldr	r2, [pc, #220]	@ (8005edc <USB_SetTurnaroundTime+0x128>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d202      	bcs.n	8005e0a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005e04:	230d      	movs	r3, #13
 8005e06:	617b      	str	r3, [r7, #20]
 8005e08:	e04c      	b.n	8005ea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	4a33      	ldr	r2, [pc, #204]	@ (8005edc <USB_SetTurnaroundTime+0x128>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d306      	bcc.n	8005e20 <USB_SetTurnaroundTime+0x6c>
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	4a32      	ldr	r2, [pc, #200]	@ (8005ee0 <USB_SetTurnaroundTime+0x12c>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d802      	bhi.n	8005e20 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005e1a:	230c      	movs	r3, #12
 8005e1c:	617b      	str	r3, [r7, #20]
 8005e1e:	e041      	b.n	8005ea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	4a2f      	ldr	r2, [pc, #188]	@ (8005ee0 <USB_SetTurnaroundTime+0x12c>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d906      	bls.n	8005e36 <USB_SetTurnaroundTime+0x82>
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	4a2e      	ldr	r2, [pc, #184]	@ (8005ee4 <USB_SetTurnaroundTime+0x130>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d802      	bhi.n	8005e36 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005e30:	230b      	movs	r3, #11
 8005e32:	617b      	str	r3, [r7, #20]
 8005e34:	e036      	b.n	8005ea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	4a2a      	ldr	r2, [pc, #168]	@ (8005ee4 <USB_SetTurnaroundTime+0x130>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d906      	bls.n	8005e4c <USB_SetTurnaroundTime+0x98>
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	4a29      	ldr	r2, [pc, #164]	@ (8005ee8 <USB_SetTurnaroundTime+0x134>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d802      	bhi.n	8005e4c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005e46:	230a      	movs	r3, #10
 8005e48:	617b      	str	r3, [r7, #20]
 8005e4a:	e02b      	b.n	8005ea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	4a26      	ldr	r2, [pc, #152]	@ (8005ee8 <USB_SetTurnaroundTime+0x134>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d906      	bls.n	8005e62 <USB_SetTurnaroundTime+0xae>
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	4a25      	ldr	r2, [pc, #148]	@ (8005eec <USB_SetTurnaroundTime+0x138>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d202      	bcs.n	8005e62 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005e5c:	2309      	movs	r3, #9
 8005e5e:	617b      	str	r3, [r7, #20]
 8005e60:	e020      	b.n	8005ea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	4a21      	ldr	r2, [pc, #132]	@ (8005eec <USB_SetTurnaroundTime+0x138>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d306      	bcc.n	8005e78 <USB_SetTurnaroundTime+0xc4>
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	4a20      	ldr	r2, [pc, #128]	@ (8005ef0 <USB_SetTurnaroundTime+0x13c>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d802      	bhi.n	8005e78 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005e72:	2308      	movs	r3, #8
 8005e74:	617b      	str	r3, [r7, #20]
 8005e76:	e015      	b.n	8005ea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	4a1d      	ldr	r2, [pc, #116]	@ (8005ef0 <USB_SetTurnaroundTime+0x13c>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d906      	bls.n	8005e8e <USB_SetTurnaroundTime+0xda>
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	4a1c      	ldr	r2, [pc, #112]	@ (8005ef4 <USB_SetTurnaroundTime+0x140>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d202      	bcs.n	8005e8e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005e88:	2307      	movs	r3, #7
 8005e8a:	617b      	str	r3, [r7, #20]
 8005e8c:	e00a      	b.n	8005ea4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005e8e:	2306      	movs	r3, #6
 8005e90:	617b      	str	r3, [r7, #20]
 8005e92:	e007      	b.n	8005ea4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005e94:	79fb      	ldrb	r3, [r7, #7]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d102      	bne.n	8005ea0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005e9a:	2309      	movs	r3, #9
 8005e9c:	617b      	str	r3, [r7, #20]
 8005e9e:	e001      	b.n	8005ea4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005ea0:	2309      	movs	r3, #9
 8005ea2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	68da      	ldr	r2, [r3, #12]
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	029b      	lsls	r3, r3, #10
 8005eb8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	371c      	adds	r7, #28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	00d8acbf 	.word	0x00d8acbf
 8005ed4:	00e4e1c0 	.word	0x00e4e1c0
 8005ed8:	00f42400 	.word	0x00f42400
 8005edc:	01067380 	.word	0x01067380
 8005ee0:	011a499f 	.word	0x011a499f
 8005ee4:	01312cff 	.word	0x01312cff
 8005ee8:	014ca43f 	.word	0x014ca43f
 8005eec:	016e3600 	.word	0x016e3600
 8005ef0:	01a6ab1f 	.word	0x01a6ab1f
 8005ef4:	01e84800 	.word	0x01e84800

08005ef8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f043 0201 	orr.w	r2, r3, #1
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f023 0201 	bic.w	r2, r3, #1
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	460b      	mov	r3, r1
 8005f46:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f58:	78fb      	ldrb	r3, [r7, #3]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d115      	bne.n	8005f8a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005f6a:	200a      	movs	r0, #10
 8005f6c:	f7fb ff5a 	bl	8001e24 <HAL_Delay>
      ms += 10U;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	330a      	adds	r3, #10
 8005f74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f001 f939 	bl	80071ee <USB_GetMode>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d01e      	beq.n	8005fc0 <USB_SetCurrentMode+0x84>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2bc7      	cmp	r3, #199	@ 0xc7
 8005f86:	d9f0      	bls.n	8005f6a <USB_SetCurrentMode+0x2e>
 8005f88:	e01a      	b.n	8005fc0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f8a:	78fb      	ldrb	r3, [r7, #3]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d115      	bne.n	8005fbc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005f9c:	200a      	movs	r0, #10
 8005f9e:	f7fb ff41 	bl	8001e24 <HAL_Delay>
      ms += 10U;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	330a      	adds	r3, #10
 8005fa6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f001 f920 	bl	80071ee <USB_GetMode>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d005      	beq.n	8005fc0 <USB_SetCurrentMode+0x84>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2bc7      	cmp	r3, #199	@ 0xc7
 8005fb8:	d9f0      	bls.n	8005f9c <USB_SetCurrentMode+0x60>
 8005fba:	e001      	b.n	8005fc0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e005      	b.n	8005fcc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2bc8      	cmp	r3, #200	@ 0xc8
 8005fc4:	d101      	bne.n	8005fca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e000      	b.n	8005fcc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fd4:	b084      	sub	sp, #16
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b086      	sub	sp, #24
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005fe2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005fee:	2300      	movs	r3, #0
 8005ff0:	613b      	str	r3, [r7, #16]
 8005ff2:	e009      	b.n	8006008 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	3340      	adds	r3, #64	@ 0x40
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	2200      	movs	r2, #0
 8006000:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	3301      	adds	r3, #1
 8006006:	613b      	str	r3, [r7, #16]
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	2b0e      	cmp	r3, #14
 800600c:	d9f2      	bls.n	8005ff4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800600e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006012:	2b00      	cmp	r3, #0
 8006014:	d11c      	bne.n	8006050 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006024:	f043 0302 	orr.w	r3, r3, #2
 8006028:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800602e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800603a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006046:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	639a      	str	r2, [r3, #56]	@ 0x38
 800604e:	e00b      	b.n	8006068 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006054:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006060:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800606e:	461a      	mov	r2, r3
 8006070:	2300      	movs	r3, #0
 8006072:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006074:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006078:	2b01      	cmp	r3, #1
 800607a:	d10d      	bne.n	8006098 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800607c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006080:	2b00      	cmp	r3, #0
 8006082:	d104      	bne.n	800608e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006084:	2100      	movs	r1, #0
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f968 	bl	800635c <USB_SetDevSpeed>
 800608c:	e008      	b.n	80060a0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800608e:	2101      	movs	r1, #1
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 f963 	bl	800635c <USB_SetDevSpeed>
 8006096:	e003      	b.n	80060a0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006098:	2103      	movs	r1, #3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f95e 	bl	800635c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060a0:	2110      	movs	r1, #16
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f8fa 	bl	800629c <USB_FlushTxFifo>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f924 	bl	8006300 <USB_FlushRxFifo>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060c8:	461a      	mov	r2, r3
 80060ca:	2300      	movs	r3, #0
 80060cc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060d4:	461a      	mov	r2, r3
 80060d6:	2300      	movs	r3, #0
 80060d8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060e0:	461a      	mov	r2, r3
 80060e2:	2300      	movs	r3, #0
 80060e4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060e6:	2300      	movs	r3, #0
 80060e8:	613b      	str	r3, [r7, #16]
 80060ea:	e043      	b.n	8006174 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006102:	d118      	bne.n	8006136 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10a      	bne.n	8006120 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	015a      	lsls	r2, r3, #5
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	4413      	add	r3, r2
 8006112:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006116:	461a      	mov	r2, r3
 8006118:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800611c:	6013      	str	r3, [r2, #0]
 800611e:	e013      	b.n	8006148 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800612c:	461a      	mov	r2, r3
 800612e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	e008      	b.n	8006148 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	4413      	add	r3, r2
 800613e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006142:	461a      	mov	r2, r3
 8006144:	2300      	movs	r3, #0
 8006146:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006154:	461a      	mov	r2, r3
 8006156:	2300      	movs	r3, #0
 8006158:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4413      	add	r3, r2
 8006162:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006166:	461a      	mov	r2, r3
 8006168:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800616c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	3301      	adds	r3, #1
 8006172:	613b      	str	r3, [r7, #16]
 8006174:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006178:	461a      	mov	r2, r3
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	4293      	cmp	r3, r2
 800617e:	d3b5      	bcc.n	80060ec <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006180:	2300      	movs	r3, #0
 8006182:	613b      	str	r3, [r7, #16]
 8006184:	e043      	b.n	800620e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4413      	add	r3, r2
 800618e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006198:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800619c:	d118      	bne.n	80061d0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10a      	bne.n	80061ba <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061b0:	461a      	mov	r2, r3
 80061b2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80061b6:	6013      	str	r3, [r2, #0]
 80061b8:	e013      	b.n	80061e2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061c6:	461a      	mov	r2, r3
 80061c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80061cc:	6013      	str	r3, [r2, #0]
 80061ce:	e008      	b.n	80061e2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061dc:	461a      	mov	r2, r3
 80061de:	2300      	movs	r3, #0
 80061e0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ee:	461a      	mov	r2, r3
 80061f0:	2300      	movs	r3, #0
 80061f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	015a      	lsls	r2, r3, #5
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	4413      	add	r3, r2
 80061fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006200:	461a      	mov	r2, r3
 8006202:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006206:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	3301      	adds	r3, #1
 800620c:	613b      	str	r3, [r7, #16]
 800620e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006212:	461a      	mov	r2, r3
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	4293      	cmp	r3, r2
 8006218:	d3b5      	bcc.n	8006186 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006228:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800622c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800623a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800623c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006240:	2b00      	cmp	r3, #0
 8006242:	d105      	bne.n	8006250 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	f043 0210 	orr.w	r2, r3, #16
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	699a      	ldr	r2, [r3, #24]
 8006254:	4b10      	ldr	r3, [pc, #64]	@ (8006298 <USB_DevInit+0x2c4>)
 8006256:	4313      	orrs	r3, r2
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800625c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006260:	2b00      	cmp	r3, #0
 8006262:	d005      	beq.n	8006270 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	699b      	ldr	r3, [r3, #24]
 8006268:	f043 0208 	orr.w	r2, r3, #8
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006270:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006274:	2b01      	cmp	r3, #1
 8006276:	d107      	bne.n	8006288 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006280:	f043 0304 	orr.w	r3, r3, #4
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006288:	7dfb      	ldrb	r3, [r7, #23]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3718      	adds	r7, #24
 800628e:	46bd      	mov	sp, r7
 8006290:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006294:	b004      	add	sp, #16
 8006296:	4770      	bx	lr
 8006298:	803c3800 	.word	0x803c3800

0800629c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	3301      	adds	r3, #1
 80062ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062b6:	d901      	bls.n	80062bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e01b      	b.n	80062f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	daf2      	bge.n	80062aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80062c4:	2300      	movs	r3, #0
 80062c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	019b      	lsls	r3, r3, #6
 80062cc:	f043 0220 	orr.w	r2, r3, #32
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	3301      	adds	r3, #1
 80062d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062e0:	d901      	bls.n	80062e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e006      	b.n	80062f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f003 0320 	and.w	r3, r3, #32
 80062ee:	2b20      	cmp	r3, #32
 80062f0:	d0f0      	beq.n	80062d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006308:	2300      	movs	r3, #0
 800630a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	3301      	adds	r3, #1
 8006310:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006318:	d901      	bls.n	800631e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e018      	b.n	8006350 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	daf2      	bge.n	800630c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006326:	2300      	movs	r3, #0
 8006328:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2210      	movs	r2, #16
 800632e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	3301      	adds	r3, #1
 8006334:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800633c:	d901      	bls.n	8006342 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e006      	b.n	8006350 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f003 0310 	and.w	r3, r3, #16
 800634a:	2b10      	cmp	r3, #16
 800634c:	d0f0      	beq.n	8006330 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3714      	adds	r7, #20
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	460b      	mov	r3, r1
 8006366:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	78fb      	ldrb	r3, [r7, #3]
 8006376:	68f9      	ldr	r1, [r7, #12]
 8006378:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800637c:	4313      	orrs	r3, r2
 800637e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800638e:	b480      	push	{r7}
 8006390:	b087      	sub	sp, #28
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f003 0306 	and.w	r3, r3, #6
 80063a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d102      	bne.n	80063b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80063ae:	2300      	movs	r3, #0
 80063b0:	75fb      	strb	r3, [r7, #23]
 80063b2:	e00a      	b.n	80063ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d002      	beq.n	80063c0 <USB_GetDevSpeed+0x32>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2b06      	cmp	r3, #6
 80063be:	d102      	bne.n	80063c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80063c0:	2302      	movs	r3, #2
 80063c2:	75fb      	strb	r3, [r7, #23]
 80063c4:	e001      	b.n	80063ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80063c6:	230f      	movs	r3, #15
 80063c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80063ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	371c      	adds	r7, #28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	785b      	ldrb	r3, [r3, #1]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d13a      	bne.n	800646a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063fa:	69da      	ldr	r2, [r3, #28]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	f003 030f 	and.w	r3, r3, #15
 8006404:	2101      	movs	r1, #1
 8006406:	fa01 f303 	lsl.w	r3, r1, r3
 800640a:	b29b      	uxth	r3, r3
 800640c:	68f9      	ldr	r1, [r7, #12]
 800640e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006412:	4313      	orrs	r3, r2
 8006414:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	4413      	add	r3, r2
 800641e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d155      	bne.n	80064d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	4413      	add	r3, r2
 8006434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	791b      	ldrb	r3, [r3, #4]
 8006446:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006448:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	059b      	lsls	r3, r3, #22
 800644e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006450:	4313      	orrs	r3, r2
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	0151      	lsls	r1, r2, #5
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	440a      	add	r2, r1
 800645a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800645e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006462:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006466:	6013      	str	r3, [r2, #0]
 8006468:	e036      	b.n	80064d8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006470:	69da      	ldr	r2, [r3, #28]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	f003 030f 	and.w	r3, r3, #15
 800647a:	2101      	movs	r1, #1
 800647c:	fa01 f303 	lsl.w	r3, r1, r3
 8006480:	041b      	lsls	r3, r3, #16
 8006482:	68f9      	ldr	r1, [r7, #12]
 8006484:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006488:	4313      	orrs	r3, r2
 800648a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d11a      	bne.n	80064d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	791b      	ldrb	r3, [r3, #4]
 80064bc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064be:	430b      	orrs	r3, r1
 80064c0:	4313      	orrs	r3, r2
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	0151      	lsls	r1, r2, #5
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	440a      	add	r2, r1
 80064ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064d6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
	...

080064e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	785b      	ldrb	r3, [r3, #1]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d161      	bne.n	80065c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	4413      	add	r3, r2
 800650c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006516:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800651a:	d11f      	bne.n	800655c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4413      	add	r3, r2
 8006524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	0151      	lsls	r1, r2, #5
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	440a      	add	r2, r1
 8006532:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006536:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800653a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4413      	add	r3, r2
 8006544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	0151      	lsls	r1, r2, #5
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	440a      	add	r2, r1
 8006552:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006556:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800655a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006562:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	f003 030f 	and.w	r3, r3, #15
 800656c:	2101      	movs	r1, #1
 800656e:	fa01 f303 	lsl.w	r3, r1, r3
 8006572:	b29b      	uxth	r3, r3
 8006574:	43db      	mvns	r3, r3
 8006576:	68f9      	ldr	r1, [r7, #12]
 8006578:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800657c:	4013      	ands	r3, r2
 800657e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006586:	69da      	ldr	r2, [r3, #28]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	f003 030f 	and.w	r3, r3, #15
 8006590:	2101      	movs	r1, #1
 8006592:	fa01 f303 	lsl.w	r3, r1, r3
 8006596:	b29b      	uxth	r3, r3
 8006598:	43db      	mvns	r3, r3
 800659a:	68f9      	ldr	r1, [r7, #12]
 800659c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065a0:	4013      	ands	r3, r2
 80065a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	0159      	lsls	r1, r3, #5
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	440b      	add	r3, r1
 80065ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065be:	4619      	mov	r1, r3
 80065c0:	4b35      	ldr	r3, [pc, #212]	@ (8006698 <USB_DeactivateEndpoint+0x1b0>)
 80065c2:	4013      	ands	r3, r2
 80065c4:	600b      	str	r3, [r1, #0]
 80065c6:	e060      	b.n	800668a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065de:	d11f      	bne.n	8006620 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	0151      	lsls	r1, r2, #5
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	440a      	add	r2, r1
 80065f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065fa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80065fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	0151      	lsls	r1, r2, #5
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	440a      	add	r2, r1
 8006616:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800661a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800661e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006626:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	f003 030f 	and.w	r3, r3, #15
 8006630:	2101      	movs	r1, #1
 8006632:	fa01 f303 	lsl.w	r3, r1, r3
 8006636:	041b      	lsls	r3, r3, #16
 8006638:	43db      	mvns	r3, r3
 800663a:	68f9      	ldr	r1, [r7, #12]
 800663c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006640:	4013      	ands	r3, r2
 8006642:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800664a:	69da      	ldr	r2, [r3, #28]
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	f003 030f 	and.w	r3, r3, #15
 8006654:	2101      	movs	r1, #1
 8006656:	fa01 f303 	lsl.w	r3, r1, r3
 800665a:	041b      	lsls	r3, r3, #16
 800665c:	43db      	mvns	r3, r3
 800665e:	68f9      	ldr	r1, [r7, #12]
 8006660:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006664:	4013      	ands	r3, r2
 8006666:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4413      	add	r3, r2
 8006670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	0159      	lsls	r1, r3, #5
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	440b      	add	r3, r1
 800667e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006682:	4619      	mov	r1, r3
 8006684:	4b05      	ldr	r3, [pc, #20]	@ (800669c <USB_DeactivateEndpoint+0x1b4>)
 8006686:	4013      	ands	r3, r2
 8006688:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	ec337800 	.word	0xec337800
 800669c:	eff37800 	.word	0xeff37800

080066a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b08a      	sub	sp, #40	@ 0x28
 80066a4:	af02      	add	r7, sp, #8
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	4613      	mov	r3, r2
 80066ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	785b      	ldrb	r3, [r3, #1]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	f040 817a 	bne.w	80069b6 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d132      	bne.n	8006730 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	69ba      	ldr	r2, [r7, #24]
 80066da:	0151      	lsls	r1, r2, #5
 80066dc:	69fa      	ldr	r2, [r7, #28]
 80066de:	440a      	add	r2, r1
 80066e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066e4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80066e8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80066ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	0151      	lsls	r1, r2, #5
 8006700:	69fa      	ldr	r2, [r7, #28]
 8006702:	440a      	add	r2, r1
 8006704:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006708:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800670c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	4413      	add	r3, r2
 8006716:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	69ba      	ldr	r2, [r7, #24]
 800671e:	0151      	lsls	r1, r2, #5
 8006720:	69fa      	ldr	r2, [r7, #28]
 8006722:	440a      	add	r2, r1
 8006724:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006728:	0cdb      	lsrs	r3, r3, #19
 800672a:	04db      	lsls	r3, r3, #19
 800672c:	6113      	str	r3, [r2, #16]
 800672e:	e092      	b.n	8006856 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	015a      	lsls	r2, r3, #5
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	4413      	add	r3, r2
 8006738:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	0151      	lsls	r1, r2, #5
 8006742:	69fa      	ldr	r2, [r7, #28]
 8006744:	440a      	add	r2, r1
 8006746:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800674a:	0cdb      	lsrs	r3, r3, #19
 800674c:	04db      	lsls	r3, r3, #19
 800674e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	4413      	add	r3, r2
 8006758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	69ba      	ldr	r2, [r7, #24]
 8006760:	0151      	lsls	r1, r2, #5
 8006762:	69fa      	ldr	r2, [r7, #28]
 8006764:	440a      	add	r2, r1
 8006766:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800676a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800676e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006772:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d11a      	bne.n	80067b0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	691a      	ldr	r2, [r3, #16]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	429a      	cmp	r2, r3
 8006784:	d903      	bls.n	800678e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	689a      	ldr	r2, [r3, #8]
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	4413      	add	r3, r2
 8006796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	0151      	lsls	r1, r2, #5
 80067a0:	69fa      	ldr	r2, [r7, #28]
 80067a2:	440a      	add	r2, r1
 80067a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80067ac:	6113      	str	r3, [r2, #16]
 80067ae:	e01b      	b.n	80067e8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067bc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	6919      	ldr	r1, [r3, #16]
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	440b      	add	r3, r1
 80067c8:	1e59      	subs	r1, r3, #1
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80067d2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80067d4:	4ba2      	ldr	r3, [pc, #648]	@ (8006a60 <USB_EPStartXfer+0x3c0>)
 80067d6:	400b      	ands	r3, r1
 80067d8:	69b9      	ldr	r1, [r7, #24]
 80067da:	0148      	lsls	r0, r1, #5
 80067dc:	69f9      	ldr	r1, [r7, #28]
 80067de:	4401      	add	r1, r0
 80067e0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80067e4:	4313      	orrs	r3, r2
 80067e6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067f4:	691a      	ldr	r2, [r3, #16]
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067fe:	69b9      	ldr	r1, [r7, #24]
 8006800:	0148      	lsls	r0, r1, #5
 8006802:	69f9      	ldr	r1, [r7, #28]
 8006804:	4401      	add	r1, r0
 8006806:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800680a:	4313      	orrs	r3, r2
 800680c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	791b      	ldrb	r3, [r3, #4]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d11f      	bne.n	8006856 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	4413      	add	r3, r2
 800681e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	0151      	lsls	r1, r2, #5
 8006828:	69fa      	ldr	r2, [r7, #28]
 800682a:	440a      	add	r2, r1
 800682c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006830:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006834:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	4413      	add	r3, r2
 800683e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	69ba      	ldr	r2, [r7, #24]
 8006846:	0151      	lsls	r1, r2, #5
 8006848:	69fa      	ldr	r2, [r7, #28]
 800684a:	440a      	add	r2, r1
 800684c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006850:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006854:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006856:	79fb      	ldrb	r3, [r7, #7]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d14b      	bne.n	80068f4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	69db      	ldr	r3, [r3, #28]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d009      	beq.n	8006878 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006870:	461a      	mov	r2, r3
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	791b      	ldrb	r3, [r3, #4]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d128      	bne.n	80068d2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800688c:	2b00      	cmp	r3, #0
 800688e:	d110      	bne.n	80068b2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	015a      	lsls	r2, r3, #5
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	4413      	add	r3, r2
 8006898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	69ba      	ldr	r2, [r7, #24]
 80068a0:	0151      	lsls	r1, r2, #5
 80068a2:	69fa      	ldr	r2, [r7, #28]
 80068a4:	440a      	add	r2, r1
 80068a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068aa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80068ae:	6013      	str	r3, [r2, #0]
 80068b0:	e00f      	b.n	80068d2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	015a      	lsls	r2, r3, #5
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	4413      	add	r3, r2
 80068ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	69ba      	ldr	r2, [r7, #24]
 80068c2:	0151      	lsls	r1, r2, #5
 80068c4:	69fa      	ldr	r2, [r7, #28]
 80068c6:	440a      	add	r2, r1
 80068c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	015a      	lsls	r2, r3, #5
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	4413      	add	r3, r2
 80068da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	0151      	lsls	r1, r2, #5
 80068e4:	69fa      	ldr	r2, [r7, #28]
 80068e6:	440a      	add	r2, r1
 80068e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068ec:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80068f0:	6013      	str	r3, [r2, #0]
 80068f2:	e165      	b.n	8006bc0 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	69ba      	ldr	r2, [r7, #24]
 8006904:	0151      	lsls	r1, r2, #5
 8006906:	69fa      	ldr	r2, [r7, #28]
 8006908:	440a      	add	r2, r1
 800690a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800690e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006912:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	791b      	ldrb	r3, [r3, #4]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d015      	beq.n	8006948 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 814d 	beq.w	8006bc0 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800692c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	f003 030f 	and.w	r3, r3, #15
 8006936:	2101      	movs	r1, #1
 8006938:	fa01 f303 	lsl.w	r3, r1, r3
 800693c:	69f9      	ldr	r1, [r7, #28]
 800693e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006942:	4313      	orrs	r3, r2
 8006944:	634b      	str	r3, [r1, #52]	@ 0x34
 8006946:	e13b      	b.n	8006bc0 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006954:	2b00      	cmp	r3, #0
 8006956:	d110      	bne.n	800697a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	4413      	add	r3, r2
 8006960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	69ba      	ldr	r2, [r7, #24]
 8006968:	0151      	lsls	r1, r2, #5
 800696a:	69fa      	ldr	r2, [r7, #28]
 800696c:	440a      	add	r2, r1
 800696e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006972:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	e00f      	b.n	800699a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	4413      	add	r3, r2
 8006982:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	69ba      	ldr	r2, [r7, #24]
 800698a:	0151      	lsls	r1, r2, #5
 800698c:	69fa      	ldr	r2, [r7, #28]
 800698e:	440a      	add	r2, r1
 8006990:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006994:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006998:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	68d9      	ldr	r1, [r3, #12]
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	781a      	ldrb	r2, [r3, #0]
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	b298      	uxth	r0, r3
 80069a8:	79fb      	ldrb	r3, [r7, #7]
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	4603      	mov	r3, r0
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f000 f9b8 	bl	8006d24 <USB_WritePacket>
 80069b4:	e104      	b.n	8006bc0 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	69ba      	ldr	r2, [r7, #24]
 80069c6:	0151      	lsls	r1, r2, #5
 80069c8:	69fa      	ldr	r2, [r7, #28]
 80069ca:	440a      	add	r2, r1
 80069cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069d0:	0cdb      	lsrs	r3, r3, #19
 80069d2:	04db      	lsls	r3, r3, #19
 80069d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	015a      	lsls	r2, r3, #5
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	4413      	add	r3, r2
 80069de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	69ba      	ldr	r2, [r7, #24]
 80069e6:	0151      	lsls	r1, r2, #5
 80069e8:	69fa      	ldr	r2, [r7, #28]
 80069ea:	440a      	add	r2, r1
 80069ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069f0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80069f4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80069f8:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d131      	bne.n	8006a64 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d003      	beq.n	8006a10 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	689a      	ldr	r2, [r3, #8]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	689a      	ldr	r2, [r3, #8]
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	015a      	lsls	r2, r3, #5
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	4413      	add	r3, r2
 8006a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a24:	691a      	ldr	r2, [r3, #16]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a2e:	69b9      	ldr	r1, [r7, #24]
 8006a30:	0148      	lsls	r0, r1, #5
 8006a32:	69f9      	ldr	r1, [r7, #28]
 8006a34:	4401      	add	r1, r0
 8006a36:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	69ba      	ldr	r2, [r7, #24]
 8006a4e:	0151      	lsls	r1, r2, #5
 8006a50:	69fa      	ldr	r2, [r7, #28]
 8006a52:	440a      	add	r2, r1
 8006a54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a58:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006a5c:	6113      	str	r3, [r2, #16]
 8006a5e:	e061      	b.n	8006b24 <USB_EPStartXfer+0x484>
 8006a60:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d123      	bne.n	8006ab4 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a78:	691a      	ldr	r2, [r3, #16]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a82:	69b9      	ldr	r1, [r7, #24]
 8006a84:	0148      	lsls	r0, r1, #5
 8006a86:	69f9      	ldr	r1, [r7, #28]
 8006a88:	4401      	add	r1, r0
 8006a8a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	0151      	lsls	r1, r2, #5
 8006aa4:	69fa      	ldr	r2, [r7, #28]
 8006aa6:	440a      	add	r2, r1
 8006aa8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006aac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ab0:	6113      	str	r3, [r2, #16]
 8006ab2:	e037      	b.n	8006b24 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	691a      	ldr	r2, [r3, #16]
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	4413      	add	r3, r2
 8006abe:	1e5a      	subs	r2, r3, #1
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	8afa      	ldrh	r2, [r7, #22]
 8006ad0:	fb03 f202 	mul.w	r2, r3, r2
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	015a      	lsls	r2, r3, #5
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	4413      	add	r3, r2
 8006ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ae4:	691a      	ldr	r2, [r3, #16]
 8006ae6:	8afb      	ldrh	r3, [r7, #22]
 8006ae8:	04d9      	lsls	r1, r3, #19
 8006aea:	4b38      	ldr	r3, [pc, #224]	@ (8006bcc <USB_EPStartXfer+0x52c>)
 8006aec:	400b      	ands	r3, r1
 8006aee:	69b9      	ldr	r1, [r7, #24]
 8006af0:	0148      	lsls	r0, r1, #5
 8006af2:	69f9      	ldr	r1, [r7, #28]
 8006af4:	4401      	add	r1, r0
 8006af6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006afa:	4313      	orrs	r3, r2
 8006afc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b0a:	691a      	ldr	r2, [r3, #16]
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b14:	69b9      	ldr	r1, [r7, #24]
 8006b16:	0148      	lsls	r0, r1, #5
 8006b18:	69f9      	ldr	r1, [r7, #28]
 8006b1a:	4401      	add	r1, r0
 8006b1c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006b20:	4313      	orrs	r3, r2
 8006b22:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006b24:	79fb      	ldrb	r3, [r7, #7]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d10d      	bne.n	8006b46 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d009      	beq.n	8006b46 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	68d9      	ldr	r1, [r3, #12]
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	015a      	lsls	r2, r3, #5
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b42:	460a      	mov	r2, r1
 8006b44:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	791b      	ldrb	r3, [r3, #4]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d128      	bne.n	8006ba0 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d110      	bne.n	8006b80 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	015a      	lsls	r2, r3, #5
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	4413      	add	r3, r2
 8006b66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	69ba      	ldr	r2, [r7, #24]
 8006b6e:	0151      	lsls	r1, r2, #5
 8006b70:	69fa      	ldr	r2, [r7, #28]
 8006b72:	440a      	add	r2, r1
 8006b74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b78:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006b7c:	6013      	str	r3, [r2, #0]
 8006b7e:	e00f      	b.n	8006ba0 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	015a      	lsls	r2, r3, #5
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	4413      	add	r3, r2
 8006b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	69ba      	ldr	r2, [r7, #24]
 8006b90:	0151      	lsls	r1, r2, #5
 8006b92:	69fa      	ldr	r2, [r7, #28]
 8006b94:	440a      	add	r2, r1
 8006b96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b9e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	015a      	lsls	r2, r3, #5
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	69ba      	ldr	r2, [r7, #24]
 8006bb0:	0151      	lsls	r1, r2, #5
 8006bb2:	69fa      	ldr	r2, [r7, #28]
 8006bb4:	440a      	add	r2, r1
 8006bb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bba:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006bbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3720      	adds	r7, #32
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	1ff80000 	.word	0x1ff80000

08006bd0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b087      	sub	sp, #28
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	785b      	ldrb	r3, [r3, #1]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d14a      	bne.n	8006c84 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	015a      	lsls	r2, r3, #5
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c06:	f040 8086 	bne.w	8006d16 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	015a      	lsls	r2, r3, #5
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	4413      	add	r3, r2
 8006c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	7812      	ldrb	r2, [r2, #0]
 8006c1e:	0151      	lsls	r1, r2, #5
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	440a      	add	r2, r1
 8006c24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c28:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006c2c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	7812      	ldrb	r2, [r2, #0]
 8006c42:	0151      	lsls	r1, r2, #5
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	440a      	add	r2, r1
 8006c48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c50:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	3301      	adds	r3, #1
 8006c56:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d902      	bls.n	8006c68 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	75fb      	strb	r3, [r7, #23]
          break;
 8006c66:	e056      	b.n	8006d16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c80:	d0e7      	beq.n	8006c52 <USB_EPStopXfer+0x82>
 8006c82:	e048      	b.n	8006d16 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	015a      	lsls	r2, r3, #5
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c9c:	d13b      	bne.n	8006d16 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	7812      	ldrb	r2, [r2, #0]
 8006cb2:	0151      	lsls	r1, r2, #5
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	440a      	add	r2, r1
 8006cb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cbc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006cc0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	7812      	ldrb	r2, [r2, #0]
 8006cd6:	0151      	lsls	r1, r2, #5
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	440a      	add	r2, r1
 8006cdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ce0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ce4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d902      	bls.n	8006cfc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	75fb      	strb	r3, [r7, #23]
          break;
 8006cfa:	e00c      	b.n	8006d16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	015a      	lsls	r2, r3, #5
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	4413      	add	r3, r2
 8006d06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d14:	d0e7      	beq.n	8006ce6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	371c      	adds	r7, #28
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b089      	sub	sp, #36	@ 0x24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	4611      	mov	r1, r2
 8006d30:	461a      	mov	r2, r3
 8006d32:	460b      	mov	r3, r1
 8006d34:	71fb      	strb	r3, [r7, #7]
 8006d36:	4613      	mov	r3, r2
 8006d38:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006d42:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d123      	bne.n	8006d92 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006d4a:	88bb      	ldrh	r3, [r7, #4]
 8006d4c:	3303      	adds	r3, #3
 8006d4e:	089b      	lsrs	r3, r3, #2
 8006d50:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006d52:	2300      	movs	r3, #0
 8006d54:	61bb      	str	r3, [r7, #24]
 8006d56:	e018      	b.n	8006d8a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d58:	79fb      	ldrb	r3, [r7, #7]
 8006d5a:	031a      	lsls	r2, r3, #12
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d64:	461a      	mov	r2, r3
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	3301      	adds	r3, #1
 8006d76:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	3301      	adds	r3, #1
 8006d82:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	3301      	adds	r3, #1
 8006d88:	61bb      	str	r3, [r7, #24]
 8006d8a:	69ba      	ldr	r2, [r7, #24]
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d3e2      	bcc.n	8006d58 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3724      	adds	r7, #36	@ 0x24
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b08b      	sub	sp, #44	@ 0x2c
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	4613      	mov	r3, r2
 8006dac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006db6:	88fb      	ldrh	r3, [r7, #6]
 8006db8:	089b      	lsrs	r3, r3, #2
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006dbe:	88fb      	ldrh	r3, [r7, #6]
 8006dc0:	f003 0303 	and.w	r3, r3, #3
 8006dc4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	623b      	str	r3, [r7, #32]
 8006dca:	e014      	b.n	8006df6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd6:	601a      	str	r2, [r3, #0]
    pDest++;
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dda:	3301      	adds	r3, #1
 8006ddc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de0:	3301      	adds	r3, #1
 8006de2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de6:	3301      	adds	r3, #1
 8006de8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dec:	3301      	adds	r3, #1
 8006dee:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006df0:	6a3b      	ldr	r3, [r7, #32]
 8006df2:	3301      	adds	r3, #1
 8006df4:	623b      	str	r3, [r7, #32]
 8006df6:	6a3a      	ldr	r2, [r7, #32]
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d3e6      	bcc.n	8006dcc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006dfe:	8bfb      	ldrh	r3, [r7, #30]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d01e      	beq.n	8006e42 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e0e:	461a      	mov	r2, r3
 8006e10:	f107 0310 	add.w	r3, r7, #16
 8006e14:	6812      	ldr	r2, [r2, #0]
 8006e16:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	00db      	lsls	r3, r3, #3
 8006e20:	fa22 f303 	lsr.w	r3, r2, r3
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e28:	701a      	strb	r2, [r3, #0]
      i++;
 8006e2a:	6a3b      	ldr	r3, [r7, #32]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e32:	3301      	adds	r3, #1
 8006e34:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006e36:	8bfb      	ldrh	r3, [r7, #30]
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006e3c:	8bfb      	ldrh	r3, [r7, #30]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1ea      	bne.n	8006e18 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	372c      	adds	r7, #44	@ 0x2c
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	785b      	ldrb	r3, [r3, #1]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d12c      	bne.n	8006ec6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	db12      	blt.n	8006ea4 <USB_EPSetStall+0x54>
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00f      	beq.n	8006ea4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	015a      	lsls	r2, r3, #5
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	0151      	lsls	r1, r2, #5
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	440a      	add	r2, r1
 8006e9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e9e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006ea2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	015a      	lsls	r2, r3, #5
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	4413      	add	r3, r2
 8006eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	0151      	lsls	r1, r2, #5
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	440a      	add	r2, r1
 8006eba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ebe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006ec2:	6013      	str	r3, [r2, #0]
 8006ec4:	e02b      	b.n	8006f1e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	015a      	lsls	r2, r3, #5
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	4413      	add	r3, r2
 8006ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	db12      	blt.n	8006efe <USB_EPSetStall+0xae>
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00f      	beq.n	8006efe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	0151      	lsls	r1, r2, #5
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	440a      	add	r2, r1
 8006ef4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ef8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006efc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	0151      	lsls	r1, r2, #5
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	440a      	add	r2, r1
 8006f14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f1c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	785b      	ldrb	r3, [r3, #1]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d128      	bne.n	8006f9a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	015a      	lsls	r2, r3, #5
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	4413      	add	r3, r2
 8006f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	0151      	lsls	r1, r2, #5
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	440a      	add	r2, r1
 8006f5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006f66:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	791b      	ldrb	r3, [r3, #4]
 8006f6c:	2b03      	cmp	r3, #3
 8006f6e:	d003      	beq.n	8006f78 <USB_EPClearStall+0x4c>
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	791b      	ldrb	r3, [r3, #4]
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d138      	bne.n	8006fea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	015a      	lsls	r2, r3, #5
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	0151      	lsls	r1, r2, #5
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	440a      	add	r2, r1
 8006f8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	e027      	b.n	8006fea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	015a      	lsls	r2, r3, #5
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	0151      	lsls	r1, r2, #5
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	440a      	add	r2, r1
 8006fb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fb4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006fb8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	791b      	ldrb	r3, [r3, #4]
 8006fbe:	2b03      	cmp	r3, #3
 8006fc0:	d003      	beq.n	8006fca <USB_EPClearStall+0x9e>
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	791b      	ldrb	r3, [r3, #4]
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d10f      	bne.n	8006fea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	015a      	lsls	r2, r3, #5
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	0151      	lsls	r1, r2, #5
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	440a      	add	r2, r1
 8006fe0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fe8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3714      	adds	r7, #20
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	460b      	mov	r3, r1
 8007002:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007016:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800701a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	78fb      	ldrb	r3, [r7, #3]
 8007026:	011b      	lsls	r3, r3, #4
 8007028:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800702c:	68f9      	ldr	r1, [r7, #12]
 800702e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007032:	4313      	orrs	r3, r2
 8007034:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3714      	adds	r7, #20
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800705e:	f023 0303 	bic.w	r3, r3, #3
 8007062:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007072:	f023 0302 	bic.w	r3, r3, #2
 8007076:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007086:	b480      	push	{r7}
 8007088:	b085      	sub	sp, #20
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80070a0:	f023 0303 	bic.w	r3, r3, #3
 80070a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070b4:	f043 0302 	orr.w	r3, r3, #2
 80070b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	695b      	ldr	r3, [r3, #20]
 80070d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	4013      	ands	r3, r2
 80070de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80070e0:	68fb      	ldr	r3, [r7, #12]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3714      	adds	r7, #20
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b085      	sub	sp, #20
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800710a:	69db      	ldr	r3, [r3, #28]
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	4013      	ands	r3, r2
 8007110:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	0c1b      	lsrs	r3, r3, #16
}
 8007116:	4618      	mov	r0, r3
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007122:	b480      	push	{r7}
 8007124:	b085      	sub	sp, #20
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800713e:	69db      	ldr	r3, [r3, #28]
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	4013      	ands	r3, r2
 8007144:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	b29b      	uxth	r3, r3
}
 800714a:	4618      	mov	r0, r3
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007156:	b480      	push	{r7}
 8007158:	b085      	sub	sp, #20
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	460b      	mov	r3, r1
 8007160:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007166:	78fb      	ldrb	r3, [r7, #3]
 8007168:	015a      	lsls	r2, r3, #5
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	4413      	add	r3, r2
 800716e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	4013      	ands	r3, r2
 8007182:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007184:	68bb      	ldr	r3, [r7, #8]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007192:	b480      	push	{r7}
 8007194:	b087      	sub	sp, #28
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	460b      	mov	r3, r1
 800719c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80071b6:	78fb      	ldrb	r3, [r7, #3]
 80071b8:	f003 030f 	and.w	r3, r3, #15
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	fa22 f303 	lsr.w	r3, r2, r3
 80071c2:	01db      	lsls	r3, r3, #7
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80071cc:	78fb      	ldrb	r3, [r7, #3]
 80071ce:	015a      	lsls	r2, r3, #5
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	4413      	add	r3, r2
 80071d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	4013      	ands	r3, r2
 80071de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80071e0:	68bb      	ldr	r3, [r7, #8]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	371c      	adds	r7, #28
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b083      	sub	sp, #12
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	f003 0301 	and.w	r3, r3, #1
}
 80071fe:	4618      	mov	r0, r3
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800720a:	b480      	push	{r7}
 800720c:	b085      	sub	sp, #20
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007224:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007228:	f023 0307 	bic.w	r3, r3, #7
 800722c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800723c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007240:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3714      	adds	r7, #20
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007250:	b480      	push	{r7}
 8007252:	b087      	sub	sp, #28
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	460b      	mov	r3, r1
 800725a:	607a      	str	r2, [r7, #4]
 800725c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	333c      	adds	r3, #60	@ 0x3c
 8007266:	3304      	adds	r3, #4
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	4a26      	ldr	r2, [pc, #152]	@ (8007308 <USB_EP0_OutStart+0xb8>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d90a      	bls.n	800728a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007280:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007284:	d101      	bne.n	800728a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	e037      	b.n	80072fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007290:	461a      	mov	r2, r3
 8007292:	2300      	movs	r3, #0
 8007294:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80072a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	697a      	ldr	r2, [r7, #20]
 80072b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072b8:	f043 0318 	orr.w	r3, r3, #24
 80072bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072cc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80072d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80072d2:	7afb      	ldrb	r3, [r7, #11]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d10f      	bne.n	80072f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072de:	461a      	mov	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	697a      	ldr	r2, [r7, #20]
 80072ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072f2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80072f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	371c      	adds	r7, #28
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	4f54300a 	.word	0x4f54300a

0800730c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007314:	2300      	movs	r3, #0
 8007316:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	3301      	adds	r3, #1
 800731c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007324:	d901      	bls.n	800732a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e01b      	b.n	8007362 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	2b00      	cmp	r3, #0
 8007330:	daf2      	bge.n	8007318 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007332:	2300      	movs	r3, #0
 8007334:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	f043 0201 	orr.w	r2, r3, #1
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	3301      	adds	r3, #1
 8007346:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800734e:	d901      	bls.n	8007354 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	e006      	b.n	8007362 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	2b01      	cmp	r3, #1
 800735e:	d0f0      	beq.n	8007342 <USB_CoreReset+0x36>

  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
	...

08007370 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	460b      	mov	r3, r1
 800737a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800737c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007380:	f002 fcb8 	bl	8009cf4 <USBD_static_malloc>
 8007384:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d109      	bne.n	80073a0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	32b0      	adds	r2, #176	@ 0xb0
 8007396:	2100      	movs	r1, #0
 8007398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800739c:	2302      	movs	r3, #2
 800739e:	e0d4      	b.n	800754a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80073a0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80073a4:	2100      	movs	r1, #0
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f002 fd08 	bl	8009dbc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	32b0      	adds	r2, #176	@ 0xb0
 80073b6:	68f9      	ldr	r1, [r7, #12]
 80073b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	32b0      	adds	r2, #176	@ 0xb0
 80073c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	7c1b      	ldrb	r3, [r3, #16]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d138      	bne.n	800744a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80073d8:	4b5e      	ldr	r3, [pc, #376]	@ (8007554 <USBD_CDC_Init+0x1e4>)
 80073da:	7819      	ldrb	r1, [r3, #0]
 80073dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80073e0:	2202      	movs	r2, #2
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f002 fb63 	bl	8009aae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80073e8:	4b5a      	ldr	r3, [pc, #360]	@ (8007554 <USBD_CDC_Init+0x1e4>)
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	f003 020f 	and.w	r2, r3, #15
 80073f0:	6879      	ldr	r1, [r7, #4]
 80073f2:	4613      	mov	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	440b      	add	r3, r1
 80073fc:	3324      	adds	r3, #36	@ 0x24
 80073fe:	2201      	movs	r2, #1
 8007400:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007402:	4b55      	ldr	r3, [pc, #340]	@ (8007558 <USBD_CDC_Init+0x1e8>)
 8007404:	7819      	ldrb	r1, [r3, #0]
 8007406:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800740a:	2202      	movs	r2, #2
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f002 fb4e 	bl	8009aae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007412:	4b51      	ldr	r3, [pc, #324]	@ (8007558 <USBD_CDC_Init+0x1e8>)
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	f003 020f 	and.w	r2, r3, #15
 800741a:	6879      	ldr	r1, [r7, #4]
 800741c:	4613      	mov	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	440b      	add	r3, r1
 8007426:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800742a:	2201      	movs	r2, #1
 800742c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800742e:	4b4b      	ldr	r3, [pc, #300]	@ (800755c <USBD_CDC_Init+0x1ec>)
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	f003 020f 	and.w	r2, r3, #15
 8007436:	6879      	ldr	r1, [r7, #4]
 8007438:	4613      	mov	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	440b      	add	r3, r1
 8007442:	3326      	adds	r3, #38	@ 0x26
 8007444:	2210      	movs	r2, #16
 8007446:	801a      	strh	r2, [r3, #0]
 8007448:	e035      	b.n	80074b6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800744a:	4b42      	ldr	r3, [pc, #264]	@ (8007554 <USBD_CDC_Init+0x1e4>)
 800744c:	7819      	ldrb	r1, [r3, #0]
 800744e:	2340      	movs	r3, #64	@ 0x40
 8007450:	2202      	movs	r2, #2
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f002 fb2b 	bl	8009aae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007458:	4b3e      	ldr	r3, [pc, #248]	@ (8007554 <USBD_CDC_Init+0x1e4>)
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	f003 020f 	and.w	r2, r3, #15
 8007460:	6879      	ldr	r1, [r7, #4]
 8007462:	4613      	mov	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4413      	add	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	440b      	add	r3, r1
 800746c:	3324      	adds	r3, #36	@ 0x24
 800746e:	2201      	movs	r2, #1
 8007470:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007472:	4b39      	ldr	r3, [pc, #228]	@ (8007558 <USBD_CDC_Init+0x1e8>)
 8007474:	7819      	ldrb	r1, [r3, #0]
 8007476:	2340      	movs	r3, #64	@ 0x40
 8007478:	2202      	movs	r2, #2
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f002 fb17 	bl	8009aae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007480:	4b35      	ldr	r3, [pc, #212]	@ (8007558 <USBD_CDC_Init+0x1e8>)
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	f003 020f 	and.w	r2, r3, #15
 8007488:	6879      	ldr	r1, [r7, #4]
 800748a:	4613      	mov	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4413      	add	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	440b      	add	r3, r1
 8007494:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007498:	2201      	movs	r2, #1
 800749a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800749c:	4b2f      	ldr	r3, [pc, #188]	@ (800755c <USBD_CDC_Init+0x1ec>)
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	f003 020f 	and.w	r2, r3, #15
 80074a4:	6879      	ldr	r1, [r7, #4]
 80074a6:	4613      	mov	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	440b      	add	r3, r1
 80074b0:	3326      	adds	r3, #38	@ 0x26
 80074b2:	2210      	movs	r2, #16
 80074b4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80074b6:	4b29      	ldr	r3, [pc, #164]	@ (800755c <USBD_CDC_Init+0x1ec>)
 80074b8:	7819      	ldrb	r1, [r3, #0]
 80074ba:	2308      	movs	r3, #8
 80074bc:	2203      	movs	r2, #3
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f002 faf5 	bl	8009aae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80074c4:	4b25      	ldr	r3, [pc, #148]	@ (800755c <USBD_CDC_Init+0x1ec>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	f003 020f 	and.w	r2, r3, #15
 80074cc:	6879      	ldr	r1, [r7, #4]
 80074ce:	4613      	mov	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	440b      	add	r3, r1
 80074d8:	3324      	adds	r3, #36	@ 0x24
 80074da:	2201      	movs	r2, #1
 80074dc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	33b0      	adds	r3, #176	@ 0xb0
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007510:	2b00      	cmp	r3, #0
 8007512:	d101      	bne.n	8007518 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007514:	2302      	movs	r3, #2
 8007516:	e018      	b.n	800754a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	7c1b      	ldrb	r3, [r3, #16]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10a      	bne.n	8007536 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007520:	4b0d      	ldr	r3, [pc, #52]	@ (8007558 <USBD_CDC_Init+0x1e8>)
 8007522:	7819      	ldrb	r1, [r3, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800752a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f002 fbac 	bl	8009c8c <USBD_LL_PrepareReceive>
 8007534:	e008      	b.n	8007548 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007536:	4b08      	ldr	r3, [pc, #32]	@ (8007558 <USBD_CDC_Init+0x1e8>)
 8007538:	7819      	ldrb	r1, [r3, #0]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007540:	2340      	movs	r3, #64	@ 0x40
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f002 fba2 	bl	8009c8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	200000cb 	.word	0x200000cb
 8007558:	200000cc 	.word	0x200000cc
 800755c:	200000cd 	.word	0x200000cd

08007560 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	460b      	mov	r3, r1
 800756a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800756c:	4b3a      	ldr	r3, [pc, #232]	@ (8007658 <USBD_CDC_DeInit+0xf8>)
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	4619      	mov	r1, r3
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f002 fac1 	bl	8009afa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007578:	4b37      	ldr	r3, [pc, #220]	@ (8007658 <USBD_CDC_DeInit+0xf8>)
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	f003 020f 	and.w	r2, r3, #15
 8007580:	6879      	ldr	r1, [r7, #4]
 8007582:	4613      	mov	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	440b      	add	r3, r1
 800758c:	3324      	adds	r3, #36	@ 0x24
 800758e:	2200      	movs	r2, #0
 8007590:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007592:	4b32      	ldr	r3, [pc, #200]	@ (800765c <USBD_CDC_DeInit+0xfc>)
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	4619      	mov	r1, r3
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f002 faae 	bl	8009afa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800759e:	4b2f      	ldr	r3, [pc, #188]	@ (800765c <USBD_CDC_DeInit+0xfc>)
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	f003 020f 	and.w	r2, r3, #15
 80075a6:	6879      	ldr	r1, [r7, #4]
 80075a8:	4613      	mov	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	440b      	add	r3, r1
 80075b2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80075b6:	2200      	movs	r2, #0
 80075b8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80075ba:	4b29      	ldr	r3, [pc, #164]	@ (8007660 <USBD_CDC_DeInit+0x100>)
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	4619      	mov	r1, r3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f002 fa9a 	bl	8009afa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80075c6:	4b26      	ldr	r3, [pc, #152]	@ (8007660 <USBD_CDC_DeInit+0x100>)
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	f003 020f 	and.w	r2, r3, #15
 80075ce:	6879      	ldr	r1, [r7, #4]
 80075d0:	4613      	mov	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4413      	add	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	440b      	add	r3, r1
 80075da:	3324      	adds	r3, #36	@ 0x24
 80075dc:	2200      	movs	r2, #0
 80075de:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80075e0:	4b1f      	ldr	r3, [pc, #124]	@ (8007660 <USBD_CDC_DeInit+0x100>)
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	f003 020f 	and.w	r2, r3, #15
 80075e8:	6879      	ldr	r1, [r7, #4]
 80075ea:	4613      	mov	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4413      	add	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	440b      	add	r3, r1
 80075f4:	3326      	adds	r3, #38	@ 0x26
 80075f6:	2200      	movs	r2, #0
 80075f8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	32b0      	adds	r2, #176	@ 0xb0
 8007604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d01f      	beq.n	800764c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	33b0      	adds	r3, #176	@ 0xb0
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4413      	add	r3, r2
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	32b0      	adds	r2, #176	@ 0xb0
 800762a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800762e:	4618      	mov	r0, r3
 8007630:	f002 fb6e 	bl	8009d10 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	32b0      	adds	r2, #176	@ 0xb0
 800763e:	2100      	movs	r1, #0
 8007640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3708      	adds	r7, #8
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	200000cb 	.word	0x200000cb
 800765c:	200000cc 	.word	0x200000cc
 8007660:	200000cd 	.word	0x200000cd

08007664 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	32b0      	adds	r2, #176	@ 0xb0
 8007678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800767c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800767e:	2300      	movs	r3, #0
 8007680:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007682:	2300      	movs	r3, #0
 8007684:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d101      	bne.n	8007694 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007690:	2303      	movs	r3, #3
 8007692:	e0bf      	b.n	8007814 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800769c:	2b00      	cmp	r3, #0
 800769e:	d050      	beq.n	8007742 <USBD_CDC_Setup+0xde>
 80076a0:	2b20      	cmp	r3, #32
 80076a2:	f040 80af 	bne.w	8007804 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	88db      	ldrh	r3, [r3, #6]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d03a      	beq.n	8007724 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	b25b      	sxtb	r3, r3
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	da1b      	bge.n	80076f0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	33b0      	adds	r3, #176	@ 0xb0
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	683a      	ldr	r2, [r7, #0]
 80076cc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80076ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80076d0:	683a      	ldr	r2, [r7, #0]
 80076d2:	88d2      	ldrh	r2, [r2, #6]
 80076d4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	88db      	ldrh	r3, [r3, #6]
 80076da:	2b07      	cmp	r3, #7
 80076dc:	bf28      	it	cs
 80076de:	2307      	movcs	r3, #7
 80076e0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	89fa      	ldrh	r2, [r7, #14]
 80076e6:	4619      	mov	r1, r3
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f001 fd87 	bl	80091fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80076ee:	e090      	b.n	8007812 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	785a      	ldrb	r2, [r3, #1]
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	88db      	ldrh	r3, [r3, #6]
 80076fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8007700:	d803      	bhi.n	800770a <USBD_CDC_Setup+0xa6>
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	88db      	ldrh	r3, [r3, #6]
 8007706:	b2da      	uxtb	r2, r3
 8007708:	e000      	b.n	800770c <USBD_CDC_Setup+0xa8>
 800770a:	2240      	movs	r2, #64	@ 0x40
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007712:	6939      	ldr	r1, [r7, #16]
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800771a:	461a      	mov	r2, r3
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f001 fd99 	bl	8009254 <USBD_CtlPrepareRx>
      break;
 8007722:	e076      	b.n	8007812 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	33b0      	adds	r3, #176	@ 0xb0
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	683a      	ldr	r2, [r7, #0]
 8007738:	7850      	ldrb	r0, [r2, #1]
 800773a:	2200      	movs	r2, #0
 800773c:	6839      	ldr	r1, [r7, #0]
 800773e:	4798      	blx	r3
      break;
 8007740:	e067      	b.n	8007812 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	785b      	ldrb	r3, [r3, #1]
 8007746:	2b0b      	cmp	r3, #11
 8007748:	d851      	bhi.n	80077ee <USBD_CDC_Setup+0x18a>
 800774a:	a201      	add	r2, pc, #4	@ (adr r2, 8007750 <USBD_CDC_Setup+0xec>)
 800774c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007750:	08007781 	.word	0x08007781
 8007754:	080077fd 	.word	0x080077fd
 8007758:	080077ef 	.word	0x080077ef
 800775c:	080077ef 	.word	0x080077ef
 8007760:	080077ef 	.word	0x080077ef
 8007764:	080077ef 	.word	0x080077ef
 8007768:	080077ef 	.word	0x080077ef
 800776c:	080077ef 	.word	0x080077ef
 8007770:	080077ef 	.word	0x080077ef
 8007774:	080077ef 	.word	0x080077ef
 8007778:	080077ab 	.word	0x080077ab
 800777c:	080077d5 	.word	0x080077d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007786:	b2db      	uxtb	r3, r3
 8007788:	2b03      	cmp	r3, #3
 800778a:	d107      	bne.n	800779c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800778c:	f107 030a 	add.w	r3, r7, #10
 8007790:	2202      	movs	r2, #2
 8007792:	4619      	mov	r1, r3
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f001 fd31 	bl	80091fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800779a:	e032      	b.n	8007802 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800779c:	6839      	ldr	r1, [r7, #0]
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f001 fcbb 	bl	800911a <USBD_CtlError>
            ret = USBD_FAIL;
 80077a4:	2303      	movs	r3, #3
 80077a6:	75fb      	strb	r3, [r7, #23]
          break;
 80077a8:	e02b      	b.n	8007802 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b03      	cmp	r3, #3
 80077b4:	d107      	bne.n	80077c6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80077b6:	f107 030d 	add.w	r3, r7, #13
 80077ba:	2201      	movs	r2, #1
 80077bc:	4619      	mov	r1, r3
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f001 fd1c 	bl	80091fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077c4:	e01d      	b.n	8007802 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80077c6:	6839      	ldr	r1, [r7, #0]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f001 fca6 	bl	800911a <USBD_CtlError>
            ret = USBD_FAIL;
 80077ce:	2303      	movs	r3, #3
 80077d0:	75fb      	strb	r3, [r7, #23]
          break;
 80077d2:	e016      	b.n	8007802 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	2b03      	cmp	r3, #3
 80077de:	d00f      	beq.n	8007800 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80077e0:	6839      	ldr	r1, [r7, #0]
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f001 fc99 	bl	800911a <USBD_CtlError>
            ret = USBD_FAIL;
 80077e8:	2303      	movs	r3, #3
 80077ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80077ec:	e008      	b.n	8007800 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80077ee:	6839      	ldr	r1, [r7, #0]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f001 fc92 	bl	800911a <USBD_CtlError>
          ret = USBD_FAIL;
 80077f6:	2303      	movs	r3, #3
 80077f8:	75fb      	strb	r3, [r7, #23]
          break;
 80077fa:	e002      	b.n	8007802 <USBD_CDC_Setup+0x19e>
          break;
 80077fc:	bf00      	nop
 80077fe:	e008      	b.n	8007812 <USBD_CDC_Setup+0x1ae>
          break;
 8007800:	bf00      	nop
      }
      break;
 8007802:	e006      	b.n	8007812 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007804:	6839      	ldr	r1, [r7, #0]
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f001 fc87 	bl	800911a <USBD_CtlError>
      ret = USBD_FAIL;
 800780c:	2303      	movs	r3, #3
 800780e:	75fb      	strb	r3, [r7, #23]
      break;
 8007810:	bf00      	nop
  }

  return (uint8_t)ret;
 8007812:	7dfb      	ldrb	r3, [r7, #23]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3718      	adds	r7, #24
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	460b      	mov	r3, r1
 8007826:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800782e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	32b0      	adds	r2, #176	@ 0xb0
 800783a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d101      	bne.n	8007846 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007842:	2303      	movs	r3, #3
 8007844:	e065      	b.n	8007912 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	32b0      	adds	r2, #176	@ 0xb0
 8007850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007854:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007856:	78fb      	ldrb	r3, [r7, #3]
 8007858:	f003 020f 	and.w	r2, r3, #15
 800785c:	6879      	ldr	r1, [r7, #4]
 800785e:	4613      	mov	r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	4413      	add	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	440b      	add	r3, r1
 8007868:	3318      	adds	r3, #24
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d02f      	beq.n	80078d0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007870:	78fb      	ldrb	r3, [r7, #3]
 8007872:	f003 020f 	and.w	r2, r3, #15
 8007876:	6879      	ldr	r1, [r7, #4]
 8007878:	4613      	mov	r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4413      	add	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	440b      	add	r3, r1
 8007882:	3318      	adds	r3, #24
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	78fb      	ldrb	r3, [r7, #3]
 8007888:	f003 010f 	and.w	r1, r3, #15
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	460b      	mov	r3, r1
 8007890:	00db      	lsls	r3, r3, #3
 8007892:	440b      	add	r3, r1
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4403      	add	r3, r0
 8007898:	331c      	adds	r3, #28
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	fbb2 f1f3 	udiv	r1, r2, r3
 80078a0:	fb01 f303 	mul.w	r3, r1, r3
 80078a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d112      	bne.n	80078d0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80078aa:	78fb      	ldrb	r3, [r7, #3]
 80078ac:	f003 020f 	and.w	r2, r3, #15
 80078b0:	6879      	ldr	r1, [r7, #4]
 80078b2:	4613      	mov	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	440b      	add	r3, r1
 80078bc:	3318      	adds	r3, #24
 80078be:	2200      	movs	r2, #0
 80078c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80078c2:	78f9      	ldrb	r1, [r7, #3]
 80078c4:	2300      	movs	r3, #0
 80078c6:	2200      	movs	r2, #0
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f002 f9be 	bl	8009c4a <USBD_LL_Transmit>
 80078ce:	e01f      	b.n	8007910 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	33b0      	adds	r3, #176	@ 0xb0
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4413      	add	r3, r2
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d010      	beq.n	8007910 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	33b0      	adds	r3, #176	@ 0xb0
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800790c:	78fa      	ldrb	r2, [r7, #3]
 800790e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b084      	sub	sp, #16
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	460b      	mov	r3, r1
 8007924:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	32b0      	adds	r2, #176	@ 0xb0
 8007930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007934:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	32b0      	adds	r2, #176	@ 0xb0
 8007940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007948:	2303      	movs	r3, #3
 800794a:	e01a      	b.n	8007982 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800794c:	78fb      	ldrb	r3, [r7, #3]
 800794e:	4619      	mov	r1, r3
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f002 f9bc 	bl	8009cce <USBD_LL_GetRxDataSize>
 8007956:	4602      	mov	r2, r0
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	33b0      	adds	r3, #176	@ 0xb0
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800797c:	4611      	mov	r1, r2
 800797e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b084      	sub	sp, #16
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	32b0      	adds	r2, #176	@ 0xb0
 800799c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d101      	bne.n	80079ac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e024      	b.n	80079f6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	33b0      	adds	r3, #176	@ 0xb0
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d019      	beq.n	80079f4 <USBD_CDC_EP0_RxReady+0x6a>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80079c6:	2bff      	cmp	r3, #255	@ 0xff
 80079c8:	d014      	beq.n	80079f4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	33b0      	adds	r3, #176	@ 0xb0
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80079e2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80079ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	22ff      	movs	r2, #255	@ 0xff
 80079f0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
	...

08007a00 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a08:	2182      	movs	r1, #130	@ 0x82
 8007a0a:	4818      	ldr	r0, [pc, #96]	@ (8007a6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a0c:	f000 fd4f 	bl	80084ae <USBD_GetEpDesc>
 8007a10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a12:	2101      	movs	r1, #1
 8007a14:	4815      	ldr	r0, [pc, #84]	@ (8007a6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a16:	f000 fd4a 	bl	80084ae <USBD_GetEpDesc>
 8007a1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a1c:	2181      	movs	r1, #129	@ 0x81
 8007a1e:	4813      	ldr	r0, [pc, #76]	@ (8007a6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a20:	f000 fd45 	bl	80084ae <USBD_GetEpDesc>
 8007a24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d002      	beq.n	8007a32 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	2210      	movs	r2, #16
 8007a30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d006      	beq.n	8007a46 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a40:	711a      	strb	r2, [r3, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d006      	beq.n	8007a5a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a54:	711a      	strb	r2, [r3, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2243      	movs	r2, #67	@ 0x43
 8007a5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007a60:	4b02      	ldr	r3, [pc, #8]	@ (8007a6c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3718      	adds	r7, #24
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20000088 	.word	0x20000088

08007a70 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a78:	2182      	movs	r1, #130	@ 0x82
 8007a7a:	4818      	ldr	r0, [pc, #96]	@ (8007adc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a7c:	f000 fd17 	bl	80084ae <USBD_GetEpDesc>
 8007a80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a82:	2101      	movs	r1, #1
 8007a84:	4815      	ldr	r0, [pc, #84]	@ (8007adc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a86:	f000 fd12 	bl	80084ae <USBD_GetEpDesc>
 8007a8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a8c:	2181      	movs	r1, #129	@ 0x81
 8007a8e:	4813      	ldr	r0, [pc, #76]	@ (8007adc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007a90:	f000 fd0d 	bl	80084ae <USBD_GetEpDesc>
 8007a94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d002      	beq.n	8007aa2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	2210      	movs	r2, #16
 8007aa0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d006      	beq.n	8007ab6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	711a      	strb	r2, [r3, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f042 0202 	orr.w	r2, r2, #2
 8007ab4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d006      	beq.n	8007aca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	711a      	strb	r2, [r3, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f042 0202 	orr.w	r2, r2, #2
 8007ac8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2243      	movs	r2, #67	@ 0x43
 8007ace:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ad0:	4b02      	ldr	r3, [pc, #8]	@ (8007adc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3718      	adds	r7, #24
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	20000088 	.word	0x20000088

08007ae0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ae8:	2182      	movs	r1, #130	@ 0x82
 8007aea:	4818      	ldr	r0, [pc, #96]	@ (8007b4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007aec:	f000 fcdf 	bl	80084ae <USBD_GetEpDesc>
 8007af0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007af2:	2101      	movs	r1, #1
 8007af4:	4815      	ldr	r0, [pc, #84]	@ (8007b4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007af6:	f000 fcda 	bl	80084ae <USBD_GetEpDesc>
 8007afa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007afc:	2181      	movs	r1, #129	@ 0x81
 8007afe:	4813      	ldr	r0, [pc, #76]	@ (8007b4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007b00:	f000 fcd5 	bl	80084ae <USBD_GetEpDesc>
 8007b04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d002      	beq.n	8007b12 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	2210      	movs	r2, #16
 8007b10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d006      	beq.n	8007b26 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b20:	711a      	strb	r2, [r3, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d006      	beq.n	8007b3a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b34:	711a      	strb	r2, [r3, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2243      	movs	r2, #67	@ 0x43
 8007b3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b40:	4b02      	ldr	r3, [pc, #8]	@ (8007b4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3718      	adds	r7, #24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	20000088 	.word	0x20000088

08007b50 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	220a      	movs	r2, #10
 8007b5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007b5e:	4b03      	ldr	r3, [pc, #12]	@ (8007b6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	20000044 	.word	0x20000044

08007b70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e009      	b.n	8007b98 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	33b0      	adds	r3, #176	@ 0xb0
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b087      	sub	sp, #28
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	32b0      	adds	r2, #176	@ 0xb0
 8007bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bbe:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d101      	bne.n	8007bca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e008      	b.n	8007bdc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	371c      	adds	r7, #28
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	32b0      	adds	r2, #176	@ 0xb0
 8007bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c00:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d101      	bne.n	8007c0c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e004      	b.n	8007c16 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	683a      	ldr	r2, [r7, #0]
 8007c10:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
	...

08007c24 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	32b0      	adds	r2, #176	@ 0xb0
 8007c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c3a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d101      	bne.n	8007c4a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e025      	b.n	8007c96 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d11f      	bne.n	8007c94 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007c5c:	4b10      	ldr	r3, [pc, #64]	@ (8007ca0 <USBD_CDC_TransmitPacket+0x7c>)
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	f003 020f 	and.w	r2, r3, #15
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	4403      	add	r3, r0
 8007c76:	3318      	adds	r3, #24
 8007c78:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007c7a:	4b09      	ldr	r3, [pc, #36]	@ (8007ca0 <USBD_CDC_TransmitPacket+0x7c>)
 8007c7c:	7819      	ldrb	r1, [r3, #0]
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f001 ffdd 	bl	8009c4a <USBD_LL_Transmit>

    ret = USBD_OK;
 8007c90:	2300      	movs	r3, #0
 8007c92:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	200000cb 	.word	0x200000cb

08007ca4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	32b0      	adds	r2, #176	@ 0xb0
 8007cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	32b0      	adds	r2, #176	@ 0xb0
 8007cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d101      	bne.n	8007cd2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e018      	b.n	8007d04 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	7c1b      	ldrb	r3, [r3, #16]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10a      	bne.n	8007cf0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007cda:	4b0c      	ldr	r3, [pc, #48]	@ (8007d0c <USBD_CDC_ReceivePacket+0x68>)
 8007cdc:	7819      	ldrb	r1, [r3, #0]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007ce4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f001 ffcf 	bl	8009c8c <USBD_LL_PrepareReceive>
 8007cee:	e008      	b.n	8007d02 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007cf0:	4b06      	ldr	r3, [pc, #24]	@ (8007d0c <USBD_CDC_ReceivePacket+0x68>)
 8007cf2:	7819      	ldrb	r1, [r3, #0]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007cfa:	2340      	movs	r3, #64	@ 0x40
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f001 ffc5 	bl	8009c8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	200000cc 	.word	0x200000cc

08007d10 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d101      	bne.n	8007d28 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e01f      	b.n	8007d68 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d003      	beq.n	8007d4e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	79fa      	ldrb	r2, [r7, #7]
 8007d5a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f001 fe3f 	bl	80099e0 <USBD_LL_Init>
 8007d62:	4603      	mov	r3, r0
 8007d64:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3718      	adds	r7, #24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d101      	bne.n	8007d88 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e025      	b.n	8007dd4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	32ae      	adds	r2, #174	@ 0xae
 8007d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00f      	beq.n	8007dc4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	32ae      	adds	r2, #174	@ 0xae
 8007dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db4:	f107 020e 	add.w	r2, r7, #14
 8007db8:	4610      	mov	r0, r2
 8007dba:	4798      	blx	r3
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007dca:	1c5a      	adds	r2, r3, #1
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f001 fe47 	bl	8009a78 <USBD_LL_Start>
 8007dea:	4603      	mov	r3, r0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007dfc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b084      	sub	sp, #16
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	460b      	mov	r3, r1
 8007e14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d009      	beq.n	8007e38 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	78fa      	ldrb	r2, [r7, #3]
 8007e2e:	4611      	mov	r1, r2
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	4798      	blx	r3
 8007e34:	4603      	mov	r3, r0
 8007e36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b084      	sub	sp, #16
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	78fa      	ldrb	r2, [r7, #3]
 8007e5c:	4611      	mov	r1, r2
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	4798      	blx	r3
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d001      	beq.n	8007e6c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b084      	sub	sp, #16
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007e86:	6839      	ldr	r1, [r7, #0]
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f001 f90c 	bl	80090a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2201      	movs	r2, #1
 8007e92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007eaa:	f003 031f 	and.w	r3, r3, #31
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d01a      	beq.n	8007ee8 <USBD_LL_SetupStage+0x72>
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d822      	bhi.n	8007efc <USBD_LL_SetupStage+0x86>
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d002      	beq.n	8007ec0 <USBD_LL_SetupStage+0x4a>
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d00a      	beq.n	8007ed4 <USBD_LL_SetupStage+0x5e>
 8007ebe:	e01d      	b.n	8007efc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 fb63 	bl	8008594 <USBD_StdDevReq>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ed2:	e020      	b.n	8007f16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007eda:	4619      	mov	r1, r3
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 fbcb 	bl	8008678 <USBD_StdItfReq>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ee6:	e016      	b.n	8007f16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007eee:	4619      	mov	r1, r3
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 fc2d 	bl	8008750 <USBD_StdEPReq>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	73fb      	strb	r3, [r7, #15]
      break;
 8007efa:	e00c      	b.n	8007f16 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007f02:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	4619      	mov	r1, r3
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f001 fe14 	bl	8009b38 <USBD_LL_StallEP>
 8007f10:	4603      	mov	r3, r0
 8007f12:	73fb      	strb	r3, [r7, #15]
      break;
 8007f14:	bf00      	nop
  }

  return ret;
 8007f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3710      	adds	r7, #16
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	460b      	mov	r3, r1
 8007f2a:	607a      	str	r2, [r7, #4]
 8007f2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007f32:	7afb      	ldrb	r3, [r7, #11]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d16e      	bne.n	8008016 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007f3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007f46:	2b03      	cmp	r3, #3
 8007f48:	f040 8098 	bne.w	800807c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	689a      	ldr	r2, [r3, #8]
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d913      	bls.n	8007f80 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	689a      	ldr	r2, [r3, #8]
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	1ad2      	subs	r2, r2, r3
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	68da      	ldr	r2, [r3, #12]
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	bf28      	it	cs
 8007f72:	4613      	movcs	r3, r2
 8007f74:	461a      	mov	r2, r3
 8007f76:	6879      	ldr	r1, [r7, #4]
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f001 f988 	bl	800928e <USBD_CtlContinueRx>
 8007f7e:	e07d      	b.n	800807c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007f86:	f003 031f 	and.w	r3, r3, #31
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d014      	beq.n	8007fb8 <USBD_LL_DataOutStage+0x98>
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d81d      	bhi.n	8007fce <USBD_LL_DataOutStage+0xae>
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d002      	beq.n	8007f9c <USBD_LL_DataOutStage+0x7c>
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d003      	beq.n	8007fa2 <USBD_LL_DataOutStage+0x82>
 8007f9a:	e018      	b.n	8007fce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	75bb      	strb	r3, [r7, #22]
            break;
 8007fa0:	e018      	b.n	8007fd4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	4619      	mov	r1, r3
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f000 fa64 	bl	800847a <USBD_CoreFindIF>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	75bb      	strb	r3, [r7, #22]
            break;
 8007fb6:	e00d      	b.n	8007fd4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	f000 fa66 	bl	8008494 <USBD_CoreFindEP>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	75bb      	strb	r3, [r7, #22]
            break;
 8007fcc:	e002      	b.n	8007fd4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	75bb      	strb	r3, [r7, #22]
            break;
 8007fd2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007fd4:	7dbb      	ldrb	r3, [r7, #22]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d119      	bne.n	800800e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d113      	bne.n	800800e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007fe6:	7dba      	ldrb	r2, [r7, #22]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	32ae      	adds	r2, #174	@ 0xae
 8007fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00b      	beq.n	800800e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007ff6:	7dba      	ldrb	r2, [r7, #22]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007ffe:	7dba      	ldrb	r2, [r7, #22]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	32ae      	adds	r2, #174	@ 0xae
 8008004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f001 f94e 	bl	80092b0 <USBD_CtlSendStatus>
 8008014:	e032      	b.n	800807c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008016:	7afb      	ldrb	r3, [r7, #11]
 8008018:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800801c:	b2db      	uxtb	r3, r3
 800801e:	4619      	mov	r1, r3
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f000 fa37 	bl	8008494 <USBD_CoreFindEP>
 8008026:	4603      	mov	r3, r0
 8008028:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800802a:	7dbb      	ldrb	r3, [r7, #22]
 800802c:	2bff      	cmp	r3, #255	@ 0xff
 800802e:	d025      	beq.n	800807c <USBD_LL_DataOutStage+0x15c>
 8008030:	7dbb      	ldrb	r3, [r7, #22]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d122      	bne.n	800807c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800803c:	b2db      	uxtb	r3, r3
 800803e:	2b03      	cmp	r3, #3
 8008040:	d117      	bne.n	8008072 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008042:	7dba      	ldrb	r2, [r7, #22]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	32ae      	adds	r2, #174	@ 0xae
 8008048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00f      	beq.n	8008072 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008052:	7dba      	ldrb	r2, [r7, #22]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800805a:	7dba      	ldrb	r2, [r7, #22]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	32ae      	adds	r2, #174	@ 0xae
 8008060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	7afa      	ldrb	r2, [r7, #11]
 8008068:	4611      	mov	r1, r2
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	4798      	blx	r3
 800806e:	4603      	mov	r3, r0
 8008070:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008072:	7dfb      	ldrb	r3, [r7, #23]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008078:	7dfb      	ldrb	r3, [r7, #23]
 800807a:	e000      	b.n	800807e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3718      	adds	r7, #24
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b086      	sub	sp, #24
 800808a:	af00      	add	r7, sp, #0
 800808c:	60f8      	str	r0, [r7, #12]
 800808e:	460b      	mov	r3, r1
 8008090:	607a      	str	r2, [r7, #4]
 8008092:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008094:	7afb      	ldrb	r3, [r7, #11]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d16f      	bne.n	800817a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	3314      	adds	r3, #20
 800809e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d15a      	bne.n	8008160 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	689a      	ldr	r2, [r3, #8]
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d914      	bls.n	80080e0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	689a      	ldr	r2, [r3, #8]
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	1ad2      	subs	r2, r2, r3
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	461a      	mov	r2, r3
 80080ca:	6879      	ldr	r1, [r7, #4]
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	f001 f8b0 	bl	8009232 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080d2:	2300      	movs	r3, #0
 80080d4:	2200      	movs	r2, #0
 80080d6:	2100      	movs	r1, #0
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f001 fdd7 	bl	8009c8c <USBD_LL_PrepareReceive>
 80080de:	e03f      	b.n	8008160 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	68da      	ldr	r2, [r3, #12]
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d11c      	bne.n	8008126 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	685a      	ldr	r2, [r3, #4]
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d316      	bcc.n	8008126 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008102:	429a      	cmp	r2, r3
 8008104:	d20f      	bcs.n	8008126 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008106:	2200      	movs	r2, #0
 8008108:	2100      	movs	r1, #0
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f001 f891 	bl	8009232 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2200      	movs	r2, #0
 8008114:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008118:	2300      	movs	r3, #0
 800811a:	2200      	movs	r2, #0
 800811c:	2100      	movs	r1, #0
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f001 fdb4 	bl	8009c8c <USBD_LL_PrepareReceive>
 8008124:	e01c      	b.n	8008160 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b03      	cmp	r3, #3
 8008130:	d10f      	bne.n	8008152 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d009      	beq.n	8008152 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2200      	movs	r2, #0
 8008142:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008152:	2180      	movs	r1, #128	@ 0x80
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f001 fcef 	bl	8009b38 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f001 f8bb 	bl	80092d6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d03a      	beq.n	80081e0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f7ff fe42 	bl	8007df4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2200      	movs	r2, #0
 8008174:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008178:	e032      	b.n	80081e0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800817a:	7afb      	ldrb	r3, [r7, #11]
 800817c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008180:	b2db      	uxtb	r3, r3
 8008182:	4619      	mov	r1, r3
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f000 f985 	bl	8008494 <USBD_CoreFindEP>
 800818a:	4603      	mov	r3, r0
 800818c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800818e:	7dfb      	ldrb	r3, [r7, #23]
 8008190:	2bff      	cmp	r3, #255	@ 0xff
 8008192:	d025      	beq.n	80081e0 <USBD_LL_DataInStage+0x15a>
 8008194:	7dfb      	ldrb	r3, [r7, #23]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d122      	bne.n	80081e0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b03      	cmp	r3, #3
 80081a4:	d11c      	bne.n	80081e0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80081a6:	7dfa      	ldrb	r2, [r7, #23]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	32ae      	adds	r2, #174	@ 0xae
 80081ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d014      	beq.n	80081e0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80081b6:	7dfa      	ldrb	r2, [r7, #23]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80081be:	7dfa      	ldrb	r2, [r7, #23]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	32ae      	adds	r2, #174	@ 0xae
 80081c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c8:	695b      	ldr	r3, [r3, #20]
 80081ca:	7afa      	ldrb	r2, [r7, #11]
 80081cc:	4611      	mov	r1, r2
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	4798      	blx	r3
 80081d2:	4603      	mov	r3, r0
 80081d4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80081d6:	7dbb      	ldrb	r3, [r7, #22]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d001      	beq.n	80081e0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80081dc:	7dbb      	ldrb	r3, [r7, #22]
 80081de:	e000      	b.n	80081e2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3718      	adds	r7, #24
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b084      	sub	sp, #16
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80081f2:	2300      	movs	r3, #0
 80081f4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2201      	movs	r2, #1
 80081fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008222:	2b00      	cmp	r3, #0
 8008224:	d014      	beq.n	8008250 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00e      	beq.n	8008250 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	6852      	ldr	r2, [r2, #4]
 800823e:	b2d2      	uxtb	r2, r2
 8008240:	4611      	mov	r1, r2
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	4798      	blx	r3
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d001      	beq.n	8008250 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800824c:	2303      	movs	r3, #3
 800824e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008250:	2340      	movs	r3, #64	@ 0x40
 8008252:	2200      	movs	r2, #0
 8008254:	2100      	movs	r1, #0
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f001 fc29 	bl	8009aae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2240      	movs	r2, #64	@ 0x40
 8008268:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800826c:	2340      	movs	r3, #64	@ 0x40
 800826e:	2200      	movs	r2, #0
 8008270:	2180      	movs	r1, #128	@ 0x80
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f001 fc1b 	bl	8009aae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2240      	movs	r2, #64	@ 0x40
 8008282:	621a      	str	r2, [r3, #32]

  return ret;
 8008284:	7bfb      	ldrb	r3, [r7, #15]
}
 8008286:	4618      	mov	r0, r3
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800828e:	b480      	push	{r7}
 8008290:	b083      	sub	sp, #12
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
 8008296:	460b      	mov	r3, r1
 8008298:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	78fa      	ldrb	r2, [r7, #3]
 800829e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	370c      	adds	r7, #12
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr

080082ae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80082ae:	b480      	push	{r7}
 80082b0:	b083      	sub	sp, #12
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b04      	cmp	r3, #4
 80082c0:	d006      	beq.n	80082d0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082c8:	b2da      	uxtb	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2204      	movs	r2, #4
 80082d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	370c      	adds	r7, #12
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr

080082e6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80082e6:	b480      	push	{r7}
 80082e8:	b083      	sub	sp, #12
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	2b04      	cmp	r3, #4
 80082f8:	d106      	bne.n	8008308 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008300:	b2da      	uxtb	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	370c      	adds	r7, #12
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr

08008316 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b082      	sub	sp, #8
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008324:	b2db      	uxtb	r3, r3
 8008326:	2b03      	cmp	r3, #3
 8008328:	d110      	bne.n	800834c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00b      	beq.n	800834c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800833a:	69db      	ldr	r3, [r3, #28]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d005      	beq.n	800834c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008346:	69db      	ldr	r3, [r3, #28]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b082      	sub	sp, #8
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
 800835e:	460b      	mov	r3, r1
 8008360:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	32ae      	adds	r2, #174	@ 0xae
 800836c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008374:	2303      	movs	r3, #3
 8008376:	e01c      	b.n	80083b2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800837e:	b2db      	uxtb	r3, r3
 8008380:	2b03      	cmp	r3, #3
 8008382:	d115      	bne.n	80083b0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	32ae      	adds	r2, #174	@ 0xae
 800838e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008392:	6a1b      	ldr	r3, [r3, #32]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00b      	beq.n	80083b0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	32ae      	adds	r2, #174	@ 0xae
 80083a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a6:	6a1b      	ldr	r3, [r3, #32]
 80083a8:	78fa      	ldrb	r2, [r7, #3]
 80083aa:	4611      	mov	r1, r2
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b082      	sub	sp, #8
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	460b      	mov	r3, r1
 80083c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	32ae      	adds	r2, #174	@ 0xae
 80083d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d101      	bne.n	80083dc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80083d8:	2303      	movs	r3, #3
 80083da:	e01c      	b.n	8008416 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	2b03      	cmp	r3, #3
 80083e6:	d115      	bne.n	8008414 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	32ae      	adds	r2, #174	@ 0xae
 80083f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00b      	beq.n	8008414 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	32ae      	adds	r2, #174	@ 0xae
 8008406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800840a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800840c:	78fa      	ldrb	r2, [r7, #3]
 800840e:	4611      	mov	r1, r2
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800841e:	b480      	push	{r7}
 8008420:	b083      	sub	sp, #12
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00e      	beq.n	8008470 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	6852      	ldr	r2, [r2, #4]
 800845e:	b2d2      	uxtb	r2, r2
 8008460:	4611      	mov	r1, r2
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	4798      	blx	r3
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800846c:	2303      	movs	r3, #3
 800846e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008470:	7bfb      	ldrb	r3, [r7, #15]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800847a:	b480      	push	{r7}
 800847c:	b083      	sub	sp, #12
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
 8008482:	460b      	mov	r3, r1
 8008484:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008486:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008488:	4618      	mov	r0, r3
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	460b      	mov	r3, r1
 800849e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80084a0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	370c      	adds	r7, #12
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr

080084ae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b086      	sub	sp, #24
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	460b      	mov	r3, r1
 80084b8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80084c2:	2300      	movs	r3, #0
 80084c4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	885b      	ldrh	r3, [r3, #2]
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	7812      	ldrb	r2, [r2, #0]
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d91f      	bls.n	8008514 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80084da:	e013      	b.n	8008504 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80084dc:	f107 030a 	add.w	r3, r7, #10
 80084e0:	4619      	mov	r1, r3
 80084e2:	6978      	ldr	r0, [r7, #20]
 80084e4:	f000 f81b 	bl	800851e <USBD_GetNextDesc>
 80084e8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	785b      	ldrb	r3, [r3, #1]
 80084ee:	2b05      	cmp	r3, #5
 80084f0:	d108      	bne.n	8008504 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	789b      	ldrb	r3, [r3, #2]
 80084fa:	78fa      	ldrb	r2, [r7, #3]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d008      	beq.n	8008512 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008500:	2300      	movs	r3, #0
 8008502:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	885b      	ldrh	r3, [r3, #2]
 8008508:	b29a      	uxth	r2, r3
 800850a:	897b      	ldrh	r3, [r7, #10]
 800850c:	429a      	cmp	r2, r3
 800850e:	d8e5      	bhi.n	80084dc <USBD_GetEpDesc+0x2e>
 8008510:	e000      	b.n	8008514 <USBD_GetEpDesc+0x66>
          break;
 8008512:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008514:	693b      	ldr	r3, [r7, #16]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3718      	adds	r7, #24
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800851e:	b480      	push	{r7}
 8008520:	b085      	sub	sp, #20
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	881b      	ldrh	r3, [r3, #0]
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	7812      	ldrb	r2, [r2, #0]
 8008534:	4413      	add	r3, r2
 8008536:	b29a      	uxth	r2, r3
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	461a      	mov	r2, r3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4413      	add	r3, r2
 8008546:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008548:	68fb      	ldr	r3, [r7, #12]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3714      	adds	r7, #20
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008556:	b480      	push	{r7}
 8008558:	b087      	sub	sp, #28
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	3301      	adds	r3, #1
 800856c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008574:	8a3b      	ldrh	r3, [r7, #16]
 8008576:	021b      	lsls	r3, r3, #8
 8008578:	b21a      	sxth	r2, r3
 800857a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800857e:	4313      	orrs	r3, r2
 8008580:	b21b      	sxth	r3, r3
 8008582:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008584:	89fb      	ldrh	r3, [r7, #14]
}
 8008586:	4618      	mov	r0, r3
 8008588:	371c      	adds	r7, #28
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
	...

08008594 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800859e:	2300      	movs	r3, #0
 80085a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80085aa:	2b40      	cmp	r3, #64	@ 0x40
 80085ac:	d005      	beq.n	80085ba <USBD_StdDevReq+0x26>
 80085ae:	2b40      	cmp	r3, #64	@ 0x40
 80085b0:	d857      	bhi.n	8008662 <USBD_StdDevReq+0xce>
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00f      	beq.n	80085d6 <USBD_StdDevReq+0x42>
 80085b6:	2b20      	cmp	r3, #32
 80085b8:	d153      	bne.n	8008662 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	32ae      	adds	r2, #174	@ 0xae
 80085c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	6839      	ldr	r1, [r7, #0]
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	4798      	blx	r3
 80085d0:	4603      	mov	r3, r0
 80085d2:	73fb      	strb	r3, [r7, #15]
      break;
 80085d4:	e04a      	b.n	800866c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	785b      	ldrb	r3, [r3, #1]
 80085da:	2b09      	cmp	r3, #9
 80085dc:	d83b      	bhi.n	8008656 <USBD_StdDevReq+0xc2>
 80085de:	a201      	add	r2, pc, #4	@ (adr r2, 80085e4 <USBD_StdDevReq+0x50>)
 80085e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e4:	08008639 	.word	0x08008639
 80085e8:	0800864d 	.word	0x0800864d
 80085ec:	08008657 	.word	0x08008657
 80085f0:	08008643 	.word	0x08008643
 80085f4:	08008657 	.word	0x08008657
 80085f8:	08008617 	.word	0x08008617
 80085fc:	0800860d 	.word	0x0800860d
 8008600:	08008657 	.word	0x08008657
 8008604:	0800862f 	.word	0x0800862f
 8008608:	08008621 	.word	0x08008621
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800860c:	6839      	ldr	r1, [r7, #0]
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 fa3c 	bl	8008a8c <USBD_GetDescriptor>
          break;
 8008614:	e024      	b.n	8008660 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fba1 	bl	8008d60 <USBD_SetAddress>
          break;
 800861e:	e01f      	b.n	8008660 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008620:	6839      	ldr	r1, [r7, #0]
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fbe0 	bl	8008de8 <USBD_SetConfig>
 8008628:	4603      	mov	r3, r0
 800862a:	73fb      	strb	r3, [r7, #15]
          break;
 800862c:	e018      	b.n	8008660 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 fc83 	bl	8008f3c <USBD_GetConfig>
          break;
 8008636:	e013      	b.n	8008660 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008638:	6839      	ldr	r1, [r7, #0]
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fcb4 	bl	8008fa8 <USBD_GetStatus>
          break;
 8008640:	e00e      	b.n	8008660 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008642:	6839      	ldr	r1, [r7, #0]
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 fce3 	bl	8009010 <USBD_SetFeature>
          break;
 800864a:	e009      	b.n	8008660 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800864c:	6839      	ldr	r1, [r7, #0]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fd07 	bl	8009062 <USBD_ClrFeature>
          break;
 8008654:	e004      	b.n	8008660 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008656:	6839      	ldr	r1, [r7, #0]
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 fd5e 	bl	800911a <USBD_CtlError>
          break;
 800865e:	bf00      	nop
      }
      break;
 8008660:	e004      	b.n	800866c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008662:	6839      	ldr	r1, [r7, #0]
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 fd58 	bl	800911a <USBD_CtlError>
      break;
 800866a:	bf00      	nop
  }

  return ret;
 800866c:	7bfb      	ldrb	r3, [r7, #15]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop

08008678 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008682:	2300      	movs	r3, #0
 8008684:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800868e:	2b40      	cmp	r3, #64	@ 0x40
 8008690:	d005      	beq.n	800869e <USBD_StdItfReq+0x26>
 8008692:	2b40      	cmp	r3, #64	@ 0x40
 8008694:	d852      	bhi.n	800873c <USBD_StdItfReq+0xc4>
 8008696:	2b00      	cmp	r3, #0
 8008698:	d001      	beq.n	800869e <USBD_StdItfReq+0x26>
 800869a:	2b20      	cmp	r3, #32
 800869c:	d14e      	bne.n	800873c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	3b01      	subs	r3, #1
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d840      	bhi.n	800872e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	889b      	ldrh	r3, [r3, #4]
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d836      	bhi.n	8008724 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	889b      	ldrh	r3, [r3, #4]
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	4619      	mov	r1, r3
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f7ff fedb 	bl	800847a <USBD_CoreFindIF>
 80086c4:	4603      	mov	r3, r0
 80086c6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086c8:	7bbb      	ldrb	r3, [r7, #14]
 80086ca:	2bff      	cmp	r3, #255	@ 0xff
 80086cc:	d01d      	beq.n	800870a <USBD_StdItfReq+0x92>
 80086ce:	7bbb      	ldrb	r3, [r7, #14]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d11a      	bne.n	800870a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80086d4:	7bba      	ldrb	r2, [r7, #14]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	32ae      	adds	r2, #174	@ 0xae
 80086da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00f      	beq.n	8008704 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80086e4:	7bba      	ldrb	r2, [r7, #14]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80086ec:	7bba      	ldrb	r2, [r7, #14]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	32ae      	adds	r2, #174	@ 0xae
 80086f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	6839      	ldr	r1, [r7, #0]
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	4798      	blx	r3
 80086fe:	4603      	mov	r3, r0
 8008700:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008702:	e004      	b.n	800870e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008704:	2303      	movs	r3, #3
 8008706:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008708:	e001      	b.n	800870e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800870a:	2303      	movs	r3, #3
 800870c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	88db      	ldrh	r3, [r3, #6]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d110      	bne.n	8008738 <USBD_StdItfReq+0xc0>
 8008716:	7bfb      	ldrb	r3, [r7, #15]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d10d      	bne.n	8008738 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fdc7 	bl	80092b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008722:	e009      	b.n	8008738 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008724:	6839      	ldr	r1, [r7, #0]
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fcf7 	bl	800911a <USBD_CtlError>
          break;
 800872c:	e004      	b.n	8008738 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800872e:	6839      	ldr	r1, [r7, #0]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 fcf2 	bl	800911a <USBD_CtlError>
          break;
 8008736:	e000      	b.n	800873a <USBD_StdItfReq+0xc2>
          break;
 8008738:	bf00      	nop
      }
      break;
 800873a:	e004      	b.n	8008746 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800873c:	6839      	ldr	r1, [r7, #0]
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fceb 	bl	800911a <USBD_CtlError>
      break;
 8008744:	bf00      	nop
  }

  return ret;
 8008746:	7bfb      	ldrb	r3, [r7, #15]
}
 8008748:	4618      	mov	r0, r3
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800875a:	2300      	movs	r3, #0
 800875c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	889b      	ldrh	r3, [r3, #4]
 8008762:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800876c:	2b40      	cmp	r3, #64	@ 0x40
 800876e:	d007      	beq.n	8008780 <USBD_StdEPReq+0x30>
 8008770:	2b40      	cmp	r3, #64	@ 0x40
 8008772:	f200 817f 	bhi.w	8008a74 <USBD_StdEPReq+0x324>
 8008776:	2b00      	cmp	r3, #0
 8008778:	d02a      	beq.n	80087d0 <USBD_StdEPReq+0x80>
 800877a:	2b20      	cmp	r3, #32
 800877c:	f040 817a 	bne.w	8008a74 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008780:	7bbb      	ldrb	r3, [r7, #14]
 8008782:	4619      	mov	r1, r3
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f7ff fe85 	bl	8008494 <USBD_CoreFindEP>
 800878a:	4603      	mov	r3, r0
 800878c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800878e:	7b7b      	ldrb	r3, [r7, #13]
 8008790:	2bff      	cmp	r3, #255	@ 0xff
 8008792:	f000 8174 	beq.w	8008a7e <USBD_StdEPReq+0x32e>
 8008796:	7b7b      	ldrb	r3, [r7, #13]
 8008798:	2b00      	cmp	r3, #0
 800879a:	f040 8170 	bne.w	8008a7e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800879e:	7b7a      	ldrb	r2, [r7, #13]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80087a6:	7b7a      	ldrb	r2, [r7, #13]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	32ae      	adds	r2, #174	@ 0xae
 80087ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f000 8163 	beq.w	8008a7e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80087b8:	7b7a      	ldrb	r2, [r7, #13]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	32ae      	adds	r2, #174	@ 0xae
 80087be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	4798      	blx	r3
 80087ca:	4603      	mov	r3, r0
 80087cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80087ce:	e156      	b.n	8008a7e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	785b      	ldrb	r3, [r3, #1]
 80087d4:	2b03      	cmp	r3, #3
 80087d6:	d008      	beq.n	80087ea <USBD_StdEPReq+0x9a>
 80087d8:	2b03      	cmp	r3, #3
 80087da:	f300 8145 	bgt.w	8008a68 <USBD_StdEPReq+0x318>
 80087de:	2b00      	cmp	r3, #0
 80087e0:	f000 809b 	beq.w	800891a <USBD_StdEPReq+0x1ca>
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d03c      	beq.n	8008862 <USBD_StdEPReq+0x112>
 80087e8:	e13e      	b.n	8008a68 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d002      	beq.n	80087fc <USBD_StdEPReq+0xac>
 80087f6:	2b03      	cmp	r3, #3
 80087f8:	d016      	beq.n	8008828 <USBD_StdEPReq+0xd8>
 80087fa:	e02c      	b.n	8008856 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087fc:	7bbb      	ldrb	r3, [r7, #14]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00d      	beq.n	800881e <USBD_StdEPReq+0xce>
 8008802:	7bbb      	ldrb	r3, [r7, #14]
 8008804:	2b80      	cmp	r3, #128	@ 0x80
 8008806:	d00a      	beq.n	800881e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008808:	7bbb      	ldrb	r3, [r7, #14]
 800880a:	4619      	mov	r1, r3
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f001 f993 	bl	8009b38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008812:	2180      	movs	r1, #128	@ 0x80
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f001 f98f 	bl	8009b38 <USBD_LL_StallEP>
 800881a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800881c:	e020      	b.n	8008860 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800881e:	6839      	ldr	r1, [r7, #0]
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fc7a 	bl	800911a <USBD_CtlError>
              break;
 8008826:	e01b      	b.n	8008860 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	885b      	ldrh	r3, [r3, #2]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d10e      	bne.n	800884e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008830:	7bbb      	ldrb	r3, [r7, #14]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00b      	beq.n	800884e <USBD_StdEPReq+0xfe>
 8008836:	7bbb      	ldrb	r3, [r7, #14]
 8008838:	2b80      	cmp	r3, #128	@ 0x80
 800883a:	d008      	beq.n	800884e <USBD_StdEPReq+0xfe>
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	88db      	ldrh	r3, [r3, #6]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d104      	bne.n	800884e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008844:	7bbb      	ldrb	r3, [r7, #14]
 8008846:	4619      	mov	r1, r3
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f001 f975 	bl	8009b38 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fd2e 	bl	80092b0 <USBD_CtlSendStatus>

              break;
 8008854:	e004      	b.n	8008860 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fc5e 	bl	800911a <USBD_CtlError>
              break;
 800885e:	bf00      	nop
          }
          break;
 8008860:	e107      	b.n	8008a72 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b02      	cmp	r3, #2
 800886c:	d002      	beq.n	8008874 <USBD_StdEPReq+0x124>
 800886e:	2b03      	cmp	r3, #3
 8008870:	d016      	beq.n	80088a0 <USBD_StdEPReq+0x150>
 8008872:	e04b      	b.n	800890c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008874:	7bbb      	ldrb	r3, [r7, #14]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00d      	beq.n	8008896 <USBD_StdEPReq+0x146>
 800887a:	7bbb      	ldrb	r3, [r7, #14]
 800887c:	2b80      	cmp	r3, #128	@ 0x80
 800887e:	d00a      	beq.n	8008896 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008880:	7bbb      	ldrb	r3, [r7, #14]
 8008882:	4619      	mov	r1, r3
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f001 f957 	bl	8009b38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800888a:	2180      	movs	r1, #128	@ 0x80
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f001 f953 	bl	8009b38 <USBD_LL_StallEP>
 8008892:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008894:	e040      	b.n	8008918 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008896:	6839      	ldr	r1, [r7, #0]
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fc3e 	bl	800911a <USBD_CtlError>
              break;
 800889e:	e03b      	b.n	8008918 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	885b      	ldrh	r3, [r3, #2]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d136      	bne.n	8008916 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80088a8:	7bbb      	ldrb	r3, [r7, #14]
 80088aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d004      	beq.n	80088bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80088b2:	7bbb      	ldrb	r3, [r7, #14]
 80088b4:	4619      	mov	r1, r3
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f001 f95d 	bl	8009b76 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fcf7 	bl	80092b0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80088c2:	7bbb      	ldrb	r3, [r7, #14]
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f7ff fde4 	bl	8008494 <USBD_CoreFindEP>
 80088cc:	4603      	mov	r3, r0
 80088ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088d0:	7b7b      	ldrb	r3, [r7, #13]
 80088d2:	2bff      	cmp	r3, #255	@ 0xff
 80088d4:	d01f      	beq.n	8008916 <USBD_StdEPReq+0x1c6>
 80088d6:	7b7b      	ldrb	r3, [r7, #13]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d11c      	bne.n	8008916 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80088dc:	7b7a      	ldrb	r2, [r7, #13]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80088e4:	7b7a      	ldrb	r2, [r7, #13]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	32ae      	adds	r2, #174	@ 0xae
 80088ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d010      	beq.n	8008916 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80088f4:	7b7a      	ldrb	r2, [r7, #13]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	32ae      	adds	r2, #174	@ 0xae
 80088fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	6839      	ldr	r1, [r7, #0]
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	4798      	blx	r3
 8008906:	4603      	mov	r3, r0
 8008908:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800890a:	e004      	b.n	8008916 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800890c:	6839      	ldr	r1, [r7, #0]
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 fc03 	bl	800911a <USBD_CtlError>
              break;
 8008914:	e000      	b.n	8008918 <USBD_StdEPReq+0x1c8>
              break;
 8008916:	bf00      	nop
          }
          break;
 8008918:	e0ab      	b.n	8008a72 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008920:	b2db      	uxtb	r3, r3
 8008922:	2b02      	cmp	r3, #2
 8008924:	d002      	beq.n	800892c <USBD_StdEPReq+0x1dc>
 8008926:	2b03      	cmp	r3, #3
 8008928:	d032      	beq.n	8008990 <USBD_StdEPReq+0x240>
 800892a:	e097      	b.n	8008a5c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800892c:	7bbb      	ldrb	r3, [r7, #14]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d007      	beq.n	8008942 <USBD_StdEPReq+0x1f2>
 8008932:	7bbb      	ldrb	r3, [r7, #14]
 8008934:	2b80      	cmp	r3, #128	@ 0x80
 8008936:	d004      	beq.n	8008942 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fbed 	bl	800911a <USBD_CtlError>
                break;
 8008940:	e091      	b.n	8008a66 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008942:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008946:	2b00      	cmp	r3, #0
 8008948:	da0b      	bge.n	8008962 <USBD_StdEPReq+0x212>
 800894a:	7bbb      	ldrb	r3, [r7, #14]
 800894c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008950:	4613      	mov	r3, r2
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	4413      	add	r3, r2
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	3310      	adds	r3, #16
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	4413      	add	r3, r2
 800895e:	3304      	adds	r3, #4
 8008960:	e00b      	b.n	800897a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008962:	7bbb      	ldrb	r3, [r7, #14]
 8008964:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008968:	4613      	mov	r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	4413      	add	r3, r2
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	4413      	add	r3, r2
 8008978:	3304      	adds	r3, #4
 800897a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	2200      	movs	r2, #0
 8008980:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	2202      	movs	r2, #2
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 fc37 	bl	80091fc <USBD_CtlSendData>
              break;
 800898e:	e06a      	b.n	8008a66 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008990:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008994:	2b00      	cmp	r3, #0
 8008996:	da11      	bge.n	80089bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008998:	7bbb      	ldrb	r3, [r7, #14]
 800899a:	f003 020f 	and.w	r2, r3, #15
 800899e:	6879      	ldr	r1, [r7, #4]
 80089a0:	4613      	mov	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	4413      	add	r3, r2
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	440b      	add	r3, r1
 80089aa:	3324      	adds	r3, #36	@ 0x24
 80089ac:	881b      	ldrh	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d117      	bne.n	80089e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80089b2:	6839      	ldr	r1, [r7, #0]
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fbb0 	bl	800911a <USBD_CtlError>
                  break;
 80089ba:	e054      	b.n	8008a66 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80089bc:	7bbb      	ldrb	r3, [r7, #14]
 80089be:	f003 020f 	and.w	r2, r3, #15
 80089c2:	6879      	ldr	r1, [r7, #4]
 80089c4:	4613      	mov	r3, r2
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	4413      	add	r3, r2
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	440b      	add	r3, r1
 80089ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80089d2:	881b      	ldrh	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d104      	bne.n	80089e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fb9d 	bl	800911a <USBD_CtlError>
                  break;
 80089e0:	e041      	b.n	8008a66 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	da0b      	bge.n	8008a02 <USBD_StdEPReq+0x2b2>
 80089ea:	7bbb      	ldrb	r3, [r7, #14]
 80089ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80089f0:	4613      	mov	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4413      	add	r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	3310      	adds	r3, #16
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	4413      	add	r3, r2
 80089fe:	3304      	adds	r3, #4
 8008a00:	e00b      	b.n	8008a1a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a02:	7bbb      	ldrb	r3, [r7, #14]
 8008a04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a08:	4613      	mov	r3, r2
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	4413      	add	r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	4413      	add	r3, r2
 8008a18:	3304      	adds	r3, #4
 8008a1a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008a1c:	7bbb      	ldrb	r3, [r7, #14]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d002      	beq.n	8008a28 <USBD_StdEPReq+0x2d8>
 8008a22:	7bbb      	ldrb	r3, [r7, #14]
 8008a24:	2b80      	cmp	r3, #128	@ 0x80
 8008a26:	d103      	bne.n	8008a30 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	601a      	str	r2, [r3, #0]
 8008a2e:	e00e      	b.n	8008a4e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008a30:	7bbb      	ldrb	r3, [r7, #14]
 8008a32:	4619      	mov	r1, r3
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f001 f8bd 	bl	8009bb4 <USBD_LL_IsStallEP>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d003      	beq.n	8008a48 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	2201      	movs	r2, #1
 8008a44:	601a      	str	r2, [r3, #0]
 8008a46:	e002      	b.n	8008a4e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	2202      	movs	r2, #2
 8008a52:	4619      	mov	r1, r3
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 fbd1 	bl	80091fc <USBD_CtlSendData>
              break;
 8008a5a:	e004      	b.n	8008a66 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fb5b 	bl	800911a <USBD_CtlError>
              break;
 8008a64:	bf00      	nop
          }
          break;
 8008a66:	e004      	b.n	8008a72 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008a68:	6839      	ldr	r1, [r7, #0]
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fb55 	bl	800911a <USBD_CtlError>
          break;
 8008a70:	bf00      	nop
      }
      break;
 8008a72:	e005      	b.n	8008a80 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008a74:	6839      	ldr	r1, [r7, #0]
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fb4f 	bl	800911a <USBD_CtlError>
      break;
 8008a7c:	e000      	b.n	8008a80 <USBD_StdEPReq+0x330>
      break;
 8008a7e:	bf00      	nop
  }

  return ret;
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
	...

08008a8c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a96:	2300      	movs	r3, #0
 8008a98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	885b      	ldrh	r3, [r3, #2]
 8008aa6:	0a1b      	lsrs	r3, r3, #8
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	2b06      	cmp	r3, #6
 8008aae:	f200 8128 	bhi.w	8008d02 <USBD_GetDescriptor+0x276>
 8008ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ab8 <USBD_GetDescriptor+0x2c>)
 8008ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab8:	08008ad5 	.word	0x08008ad5
 8008abc:	08008aed 	.word	0x08008aed
 8008ac0:	08008b2d 	.word	0x08008b2d
 8008ac4:	08008d03 	.word	0x08008d03
 8008ac8:	08008d03 	.word	0x08008d03
 8008acc:	08008ca3 	.word	0x08008ca3
 8008ad0:	08008ccf 	.word	0x08008ccf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	7c12      	ldrb	r2, [r2, #16]
 8008ae0:	f107 0108 	add.w	r1, r7, #8
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	4798      	blx	r3
 8008ae8:	60f8      	str	r0, [r7, #12]
      break;
 8008aea:	e112      	b.n	8008d12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	7c1b      	ldrb	r3, [r3, #16]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10d      	bne.n	8008b10 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008afc:	f107 0208 	add.w	r2, r7, #8
 8008b00:	4610      	mov	r0, r2
 8008b02:	4798      	blx	r3
 8008b04:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008b0e:	e100      	b.n	8008d12 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b18:	f107 0208 	add.w	r2, r7, #8
 8008b1c:	4610      	mov	r0, r2
 8008b1e:	4798      	blx	r3
 8008b20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	3301      	adds	r3, #1
 8008b26:	2202      	movs	r2, #2
 8008b28:	701a      	strb	r2, [r3, #0]
      break;
 8008b2a:	e0f2      	b.n	8008d12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	885b      	ldrh	r3, [r3, #2]
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	2b05      	cmp	r3, #5
 8008b34:	f200 80ac 	bhi.w	8008c90 <USBD_GetDescriptor+0x204>
 8008b38:	a201      	add	r2, pc, #4	@ (adr r2, 8008b40 <USBD_GetDescriptor+0xb4>)
 8008b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3e:	bf00      	nop
 8008b40:	08008b59 	.word	0x08008b59
 8008b44:	08008b8d 	.word	0x08008b8d
 8008b48:	08008bc1 	.word	0x08008bc1
 8008b4c:	08008bf5 	.word	0x08008bf5
 8008b50:	08008c29 	.word	0x08008c29
 8008b54:	08008c5d 	.word	0x08008c5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00b      	beq.n	8008b7c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	7c12      	ldrb	r2, [r2, #16]
 8008b70:	f107 0108 	add.w	r1, r7, #8
 8008b74:	4610      	mov	r0, r2
 8008b76:	4798      	blx	r3
 8008b78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b7a:	e091      	b.n	8008ca0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b7c:	6839      	ldr	r1, [r7, #0]
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 facb 	bl	800911a <USBD_CtlError>
            err++;
 8008b84:	7afb      	ldrb	r3, [r7, #11]
 8008b86:	3301      	adds	r3, #1
 8008b88:	72fb      	strb	r3, [r7, #11]
          break;
 8008b8a:	e089      	b.n	8008ca0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00b      	beq.n	8008bb0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	7c12      	ldrb	r2, [r2, #16]
 8008ba4:	f107 0108 	add.w	r1, r7, #8
 8008ba8:	4610      	mov	r0, r2
 8008baa:	4798      	blx	r3
 8008bac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bae:	e077      	b.n	8008ca0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 fab1 	bl	800911a <USBD_CtlError>
            err++;
 8008bb8:	7afb      	ldrb	r3, [r7, #11]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	72fb      	strb	r3, [r7, #11]
          break;
 8008bbe:	e06f      	b.n	8008ca0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00b      	beq.n	8008be4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	7c12      	ldrb	r2, [r2, #16]
 8008bd8:	f107 0108 	add.w	r1, r7, #8
 8008bdc:	4610      	mov	r0, r2
 8008bde:	4798      	blx	r3
 8008be0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008be2:	e05d      	b.n	8008ca0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008be4:	6839      	ldr	r1, [r7, #0]
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 fa97 	bl	800911a <USBD_CtlError>
            err++;
 8008bec:	7afb      	ldrb	r3, [r7, #11]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	72fb      	strb	r3, [r7, #11]
          break;
 8008bf2:	e055      	b.n	8008ca0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bfa:	691b      	ldr	r3, [r3, #16]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d00b      	beq.n	8008c18 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c06:	691b      	ldr	r3, [r3, #16]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	7c12      	ldrb	r2, [r2, #16]
 8008c0c:	f107 0108 	add.w	r1, r7, #8
 8008c10:	4610      	mov	r0, r2
 8008c12:	4798      	blx	r3
 8008c14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c16:	e043      	b.n	8008ca0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c18:	6839      	ldr	r1, [r7, #0]
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fa7d 	bl	800911a <USBD_CtlError>
            err++;
 8008c20:	7afb      	ldrb	r3, [r7, #11]
 8008c22:	3301      	adds	r3, #1
 8008c24:	72fb      	strb	r3, [r7, #11]
          break;
 8008c26:	e03b      	b.n	8008ca0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c2e:	695b      	ldr	r3, [r3, #20]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00b      	beq.n	8008c4c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c3a:	695b      	ldr	r3, [r3, #20]
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	7c12      	ldrb	r2, [r2, #16]
 8008c40:	f107 0108 	add.w	r1, r7, #8
 8008c44:	4610      	mov	r0, r2
 8008c46:	4798      	blx	r3
 8008c48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c4a:	e029      	b.n	8008ca0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c4c:	6839      	ldr	r1, [r7, #0]
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 fa63 	bl	800911a <USBD_CtlError>
            err++;
 8008c54:	7afb      	ldrb	r3, [r7, #11]
 8008c56:	3301      	adds	r3, #1
 8008c58:	72fb      	strb	r3, [r7, #11]
          break;
 8008c5a:	e021      	b.n	8008ca0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00b      	beq.n	8008c80 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c6e:	699b      	ldr	r3, [r3, #24]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	7c12      	ldrb	r2, [r2, #16]
 8008c74:	f107 0108 	add.w	r1, r7, #8
 8008c78:	4610      	mov	r0, r2
 8008c7a:	4798      	blx	r3
 8008c7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c7e:	e00f      	b.n	8008ca0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c80:	6839      	ldr	r1, [r7, #0]
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fa49 	bl	800911a <USBD_CtlError>
            err++;
 8008c88:	7afb      	ldrb	r3, [r7, #11]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c8e:	e007      	b.n	8008ca0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008c90:	6839      	ldr	r1, [r7, #0]
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 fa41 	bl	800911a <USBD_CtlError>
          err++;
 8008c98:	7afb      	ldrb	r3, [r7, #11]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008c9e:	bf00      	nop
      }
      break;
 8008ca0:	e037      	b.n	8008d12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	7c1b      	ldrb	r3, [r3, #16]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d109      	bne.n	8008cbe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cb2:	f107 0208 	add.w	r2, r7, #8
 8008cb6:	4610      	mov	r0, r2
 8008cb8:	4798      	blx	r3
 8008cba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cbc:	e029      	b.n	8008d12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008cbe:	6839      	ldr	r1, [r7, #0]
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fa2a 	bl	800911a <USBD_CtlError>
        err++;
 8008cc6:	7afb      	ldrb	r3, [r7, #11]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	72fb      	strb	r3, [r7, #11]
      break;
 8008ccc:	e021      	b.n	8008d12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	7c1b      	ldrb	r3, [r3, #16]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10d      	bne.n	8008cf2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cde:	f107 0208 	add.w	r2, r7, #8
 8008ce2:	4610      	mov	r0, r2
 8008ce4:	4798      	blx	r3
 8008ce6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	3301      	adds	r3, #1
 8008cec:	2207      	movs	r2, #7
 8008cee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cf0:	e00f      	b.n	8008d12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008cf2:	6839      	ldr	r1, [r7, #0]
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fa10 	bl	800911a <USBD_CtlError>
        err++;
 8008cfa:	7afb      	ldrb	r3, [r7, #11]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	72fb      	strb	r3, [r7, #11]
      break;
 8008d00:	e007      	b.n	8008d12 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008d02:	6839      	ldr	r1, [r7, #0]
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 fa08 	bl	800911a <USBD_CtlError>
      err++;
 8008d0a:	7afb      	ldrb	r3, [r7, #11]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	72fb      	strb	r3, [r7, #11]
      break;
 8008d10:	bf00      	nop
  }

  if (err != 0U)
 8008d12:	7afb      	ldrb	r3, [r7, #11]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d11e      	bne.n	8008d56 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	88db      	ldrh	r3, [r3, #6]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d016      	beq.n	8008d4e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008d20:	893b      	ldrh	r3, [r7, #8]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00e      	beq.n	8008d44 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	88da      	ldrh	r2, [r3, #6]
 8008d2a:	893b      	ldrh	r3, [r7, #8]
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	bf28      	it	cs
 8008d30:	4613      	movcs	r3, r2
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008d36:	893b      	ldrh	r3, [r7, #8]
 8008d38:	461a      	mov	r2, r3
 8008d3a:	68f9      	ldr	r1, [r7, #12]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fa5d 	bl	80091fc <USBD_CtlSendData>
 8008d42:	e009      	b.n	8008d58 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008d44:	6839      	ldr	r1, [r7, #0]
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f9e7 	bl	800911a <USBD_CtlError>
 8008d4c:	e004      	b.n	8008d58 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 faae 	bl	80092b0 <USBD_CtlSendStatus>
 8008d54:	e000      	b.n	8008d58 <USBD_GetDescriptor+0x2cc>
    return;
 8008d56:	bf00      	nop
  }
}
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop

08008d60 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	889b      	ldrh	r3, [r3, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d131      	bne.n	8008dd6 <USBD_SetAddress+0x76>
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	88db      	ldrh	r3, [r3, #6]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d12d      	bne.n	8008dd6 <USBD_SetAddress+0x76>
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	885b      	ldrh	r3, [r3, #2]
 8008d7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008d80:	d829      	bhi.n	8008dd6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	885b      	ldrh	r3, [r3, #2]
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b03      	cmp	r3, #3
 8008d98:	d104      	bne.n	8008da4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 f9bc 	bl	800911a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008da2:	e01d      	b.n	8008de0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	7bfa      	ldrb	r2, [r7, #15]
 8008da8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
 8008dae:	4619      	mov	r1, r3
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 ff2b 	bl	8009c0c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fa7a 	bl	80092b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008dbc:	7bfb      	ldrb	r3, [r7, #15]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d004      	beq.n	8008dcc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2202      	movs	r2, #2
 8008dc6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dca:	e009      	b.n	8008de0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dd4:	e004      	b.n	8008de0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008dd6:	6839      	ldr	r1, [r7, #0]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f99e 	bl	800911a <USBD_CtlError>
  }
}
 8008dde:	bf00      	nop
 8008de0:	bf00      	nop
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	885b      	ldrh	r3, [r3, #2]
 8008dfa:	b2da      	uxtb	r2, r3
 8008dfc:	4b4e      	ldr	r3, [pc, #312]	@ (8008f38 <USBD_SetConfig+0x150>)
 8008dfe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008e00:	4b4d      	ldr	r3, [pc, #308]	@ (8008f38 <USBD_SetConfig+0x150>)
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d905      	bls.n	8008e14 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008e08:	6839      	ldr	r1, [r7, #0]
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 f985 	bl	800911a <USBD_CtlError>
    return USBD_FAIL;
 8008e10:	2303      	movs	r3, #3
 8008e12:	e08c      	b.n	8008f2e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d002      	beq.n	8008e26 <USBD_SetConfig+0x3e>
 8008e20:	2b03      	cmp	r3, #3
 8008e22:	d029      	beq.n	8008e78 <USBD_SetConfig+0x90>
 8008e24:	e075      	b.n	8008f12 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008e26:	4b44      	ldr	r3, [pc, #272]	@ (8008f38 <USBD_SetConfig+0x150>)
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d020      	beq.n	8008e70 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008e2e:	4b42      	ldr	r3, [pc, #264]	@ (8008f38 <USBD_SetConfig+0x150>)
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	461a      	mov	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008e38:	4b3f      	ldr	r3, [pc, #252]	@ (8008f38 <USBD_SetConfig+0x150>)
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f7fe ffe3 	bl	8007e0a <USBD_SetClassConfig>
 8008e44:	4603      	mov	r3, r0
 8008e46:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d008      	beq.n	8008e60 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008e4e:	6839      	ldr	r1, [r7, #0]
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 f962 	bl	800911a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2202      	movs	r2, #2
 8008e5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008e5e:	e065      	b.n	8008f2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 fa25 	bl	80092b0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2203      	movs	r2, #3
 8008e6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008e6e:	e05d      	b.n	8008f2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fa1d 	bl	80092b0 <USBD_CtlSendStatus>
      break;
 8008e76:	e059      	b.n	8008f2c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008e78:	4b2f      	ldr	r3, [pc, #188]	@ (8008f38 <USBD_SetConfig+0x150>)
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d112      	bne.n	8008ea6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2202      	movs	r2, #2
 8008e84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008e88:	4b2b      	ldr	r3, [pc, #172]	@ (8008f38 <USBD_SetConfig+0x150>)
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e92:	4b29      	ldr	r3, [pc, #164]	@ (8008f38 <USBD_SetConfig+0x150>)
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	4619      	mov	r1, r3
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f7fe ffd2 	bl	8007e42 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fa06 	bl	80092b0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ea4:	e042      	b.n	8008f2c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008ea6:	4b24      	ldr	r3, [pc, #144]	@ (8008f38 <USBD_SetConfig+0x150>)
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d02a      	beq.n	8008f0a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	4619      	mov	r1, r3
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f7fe ffc0 	bl	8007e42 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8008f38 <USBD_SetConfig+0x150>)
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8008f38 <USBD_SetConfig+0x150>)
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f7fe ff99 	bl	8007e0a <USBD_SetClassConfig>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00f      	beq.n	8008f02 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008ee2:	6839      	ldr	r1, [r7, #0]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 f918 	bl	800911a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f7fe ffa5 	bl	8007e42 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2202      	movs	r2, #2
 8008efc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008f00:	e014      	b.n	8008f2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f9d4 	bl	80092b0 <USBD_CtlSendStatus>
      break;
 8008f08:	e010      	b.n	8008f2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f9d0 	bl	80092b0 <USBD_CtlSendStatus>
      break;
 8008f10:	e00c      	b.n	8008f2c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008f12:	6839      	ldr	r1, [r7, #0]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f900 	bl	800911a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f1a:	4b07      	ldr	r3, [pc, #28]	@ (8008f38 <USBD_SetConfig+0x150>)
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	4619      	mov	r1, r3
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f7fe ff8e 	bl	8007e42 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008f26:	2303      	movs	r3, #3
 8008f28:	73fb      	strb	r3, [r7, #15]
      break;
 8008f2a:	bf00      	nop
  }

  return ret;
 8008f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	20000594 	.word	0x20000594

08008f3c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	88db      	ldrh	r3, [r3, #6]
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d004      	beq.n	8008f58 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008f4e:	6839      	ldr	r1, [r7, #0]
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f8e2 	bl	800911a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008f56:	e023      	b.n	8008fa0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	dc02      	bgt.n	8008f6a <USBD_GetConfig+0x2e>
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	dc03      	bgt.n	8008f70 <USBD_GetConfig+0x34>
 8008f68:	e015      	b.n	8008f96 <USBD_GetConfig+0x5a>
 8008f6a:	2b03      	cmp	r3, #3
 8008f6c:	d00b      	beq.n	8008f86 <USBD_GetConfig+0x4a>
 8008f6e:	e012      	b.n	8008f96 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	3308      	adds	r3, #8
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 f93c 	bl	80091fc <USBD_CtlSendData>
        break;
 8008f84:	e00c      	b.n	8008fa0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	3304      	adds	r3, #4
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f934 	bl	80091fc <USBD_CtlSendData>
        break;
 8008f94:	e004      	b.n	8008fa0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008f96:	6839      	ldr	r1, [r7, #0]
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 f8be 	bl	800911a <USBD_CtlError>
        break;
 8008f9e:	bf00      	nop
}
 8008fa0:	bf00      	nop
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d81e      	bhi.n	8008ffe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	88db      	ldrh	r3, [r3, #6]
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d004      	beq.n	8008fd2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008fc8:	6839      	ldr	r1, [r7, #0]
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 f8a5 	bl	800911a <USBD_CtlError>
        break;
 8008fd0:	e01a      	b.n	8009008 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d005      	beq.n	8008fee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	f043 0202 	orr.w	r2, r3, #2
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	330c      	adds	r3, #12
 8008ff2:	2202      	movs	r2, #2
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f900 	bl	80091fc <USBD_CtlSendData>
      break;
 8008ffc:	e004      	b.n	8009008 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008ffe:	6839      	ldr	r1, [r7, #0]
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 f88a 	bl	800911a <USBD_CtlError>
      break;
 8009006:	bf00      	nop
  }
}
 8009008:	bf00      	nop
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	885b      	ldrh	r3, [r3, #2]
 800901e:	2b01      	cmp	r3, #1
 8009020:	d107      	bne.n	8009032 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f940 	bl	80092b0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009030:	e013      	b.n	800905a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	885b      	ldrh	r3, [r3, #2]
 8009036:	2b02      	cmp	r3, #2
 8009038:	d10b      	bne.n	8009052 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	889b      	ldrh	r3, [r3, #4]
 800903e:	0a1b      	lsrs	r3, r3, #8
 8009040:	b29b      	uxth	r3, r3
 8009042:	b2da      	uxtb	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f930 	bl	80092b0 <USBD_CtlSendStatus>
}
 8009050:	e003      	b.n	800905a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f860 	bl	800911a <USBD_CtlError>
}
 800905a:	bf00      	nop
 800905c:	3708      	adds	r7, #8
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b082      	sub	sp, #8
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
 800906a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009072:	b2db      	uxtb	r3, r3
 8009074:	3b01      	subs	r3, #1
 8009076:	2b02      	cmp	r3, #2
 8009078:	d80b      	bhi.n	8009092 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	885b      	ldrh	r3, [r3, #2]
 800907e:	2b01      	cmp	r3, #1
 8009080:	d10c      	bne.n	800909c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 f910 	bl	80092b0 <USBD_CtlSendStatus>
      }
      break;
 8009090:	e004      	b.n	800909c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 f840 	bl	800911a <USBD_CtlError>
      break;
 800909a:	e000      	b.n	800909e <USBD_ClrFeature+0x3c>
      break;
 800909c:	bf00      	nop
  }
}
 800909e:	bf00      	nop
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b084      	sub	sp, #16
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	781a      	ldrb	r2, [r3, #0]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	3301      	adds	r3, #1
 80090c0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	781a      	ldrb	r2, [r3, #0]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	3301      	adds	r3, #1
 80090ce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	f7ff fa40 	bl	8008556 <SWAPBYTE>
 80090d6:	4603      	mov	r3, r0
 80090d8:	461a      	mov	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	3301      	adds	r3, #1
 80090e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	3301      	adds	r3, #1
 80090e8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f7ff fa33 	bl	8008556 <SWAPBYTE>
 80090f0:	4603      	mov	r3, r0
 80090f2:	461a      	mov	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	3301      	adds	r3, #1
 80090fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	3301      	adds	r3, #1
 8009102:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f7ff fa26 	bl	8008556 <SWAPBYTE>
 800910a:	4603      	mov	r3, r0
 800910c:	461a      	mov	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	80da      	strh	r2, [r3, #6]
}
 8009112:	bf00      	nop
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b082      	sub	sp, #8
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
 8009122:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009124:	2180      	movs	r1, #128	@ 0x80
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 fd06 	bl	8009b38 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800912c:	2100      	movs	r1, #0
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fd02 	bl	8009b38 <USBD_LL_StallEP>
}
 8009134:	bf00      	nop
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009148:	2300      	movs	r3, #0
 800914a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d036      	beq.n	80091c0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009156:	6938      	ldr	r0, [r7, #16]
 8009158:	f000 f836 	bl	80091c8 <USBD_GetLen>
 800915c:	4603      	mov	r3, r0
 800915e:	3301      	adds	r3, #1
 8009160:	b29b      	uxth	r3, r3
 8009162:	005b      	lsls	r3, r3, #1
 8009164:	b29a      	uxth	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800916a:	7dfb      	ldrb	r3, [r7, #23]
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	4413      	add	r3, r2
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	7812      	ldrb	r2, [r2, #0]
 8009174:	701a      	strb	r2, [r3, #0]
  idx++;
 8009176:	7dfb      	ldrb	r3, [r7, #23]
 8009178:	3301      	adds	r3, #1
 800917a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800917c:	7dfb      	ldrb	r3, [r7, #23]
 800917e:	68ba      	ldr	r2, [r7, #8]
 8009180:	4413      	add	r3, r2
 8009182:	2203      	movs	r2, #3
 8009184:	701a      	strb	r2, [r3, #0]
  idx++;
 8009186:	7dfb      	ldrb	r3, [r7, #23]
 8009188:	3301      	adds	r3, #1
 800918a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800918c:	e013      	b.n	80091b6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800918e:	7dfb      	ldrb	r3, [r7, #23]
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	4413      	add	r3, r2
 8009194:	693a      	ldr	r2, [r7, #16]
 8009196:	7812      	ldrb	r2, [r2, #0]
 8009198:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	3301      	adds	r3, #1
 800919e:	613b      	str	r3, [r7, #16]
    idx++;
 80091a0:	7dfb      	ldrb	r3, [r7, #23]
 80091a2:	3301      	adds	r3, #1
 80091a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80091a6:	7dfb      	ldrb	r3, [r7, #23]
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	4413      	add	r3, r2
 80091ac:	2200      	movs	r2, #0
 80091ae:	701a      	strb	r2, [r3, #0]
    idx++;
 80091b0:	7dfb      	ldrb	r3, [r7, #23]
 80091b2:	3301      	adds	r3, #1
 80091b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1e7      	bne.n	800918e <USBD_GetString+0x52>
 80091be:	e000      	b.n	80091c2 <USBD_GetString+0x86>
    return;
 80091c0:	bf00      	nop
  }
}
 80091c2:	3718      	adds	r7, #24
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80091d0:	2300      	movs	r3, #0
 80091d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80091d8:	e005      	b.n	80091e6 <USBD_GetLen+0x1e>
  {
    len++;
 80091da:	7bfb      	ldrb	r3, [r7, #15]
 80091dc:	3301      	adds	r3, #1
 80091de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	3301      	adds	r3, #1
 80091e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1f5      	bne.n	80091da <USBD_GetLen+0x12>
  }

  return len;
 80091ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2202      	movs	r2, #2
 800920c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	68ba      	ldr	r2, [r7, #8]
 8009220:	2100      	movs	r1, #0
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	f000 fd11 	bl	8009c4a <USBD_LL_Transmit>

  return USBD_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b084      	sub	sp, #16
 8009236:	af00      	add	r7, sp, #0
 8009238:	60f8      	str	r0, [r7, #12]
 800923a:	60b9      	str	r1, [r7, #8]
 800923c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	2100      	movs	r1, #0
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f000 fd00 	bl	8009c4a <USBD_LL_Transmit>

  return USBD_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2203      	movs	r2, #3
 8009264:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	2100      	movs	r1, #0
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f000 fd04 	bl	8009c8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b084      	sub	sp, #16
 8009292:	af00      	add	r7, sp, #0
 8009294:	60f8      	str	r0, [r7, #12]
 8009296:	60b9      	str	r1, [r7, #8]
 8009298:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	68ba      	ldr	r2, [r7, #8]
 800929e:	2100      	movs	r1, #0
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f000 fcf3 	bl	8009c8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2204      	movs	r2, #4
 80092bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80092c0:	2300      	movs	r3, #0
 80092c2:	2200      	movs	r2, #0
 80092c4:	2100      	movs	r1, #0
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 fcbf 	bl	8009c4a <USBD_LL_Transmit>

  return USBD_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b082      	sub	sp, #8
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2205      	movs	r2, #5
 80092e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092e6:	2300      	movs	r3, #0
 80092e8:	2200      	movs	r2, #0
 80092ea:	2100      	movs	r1, #0
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fccd 	bl	8009c8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009300:	2200      	movs	r2, #0
 8009302:	4912      	ldr	r1, [pc, #72]	@ (800934c <MX_USB_DEVICE_Init+0x50>)
 8009304:	4812      	ldr	r0, [pc, #72]	@ (8009350 <MX_USB_DEVICE_Init+0x54>)
 8009306:	f7fe fd03 	bl	8007d10 <USBD_Init>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d001      	beq.n	8009314 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009310:	f7f8 fb6e 	bl	80019f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009314:	490f      	ldr	r1, [pc, #60]	@ (8009354 <MX_USB_DEVICE_Init+0x58>)
 8009316:	480e      	ldr	r0, [pc, #56]	@ (8009350 <MX_USB_DEVICE_Init+0x54>)
 8009318:	f7fe fd2a 	bl	8007d70 <USBD_RegisterClass>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009322:	f7f8 fb65 	bl	80019f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009326:	490c      	ldr	r1, [pc, #48]	@ (8009358 <MX_USB_DEVICE_Init+0x5c>)
 8009328:	4809      	ldr	r0, [pc, #36]	@ (8009350 <MX_USB_DEVICE_Init+0x54>)
 800932a:	f7fe fc21 	bl	8007b70 <USBD_CDC_RegisterInterface>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d001      	beq.n	8009338 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009334:	f7f8 fb5c 	bl	80019f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009338:	4805      	ldr	r0, [pc, #20]	@ (8009350 <MX_USB_DEVICE_Init+0x54>)
 800933a:	f7fe fd4f 	bl	8007ddc <USBD_Start>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d001      	beq.n	8009348 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009344:	f7f8 fb54 	bl	80019f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009348:	bf00      	nop
 800934a:	bd80      	pop	{r7, pc}
 800934c:	200000e4 	.word	0x200000e4
 8009350:	20000598 	.word	0x20000598
 8009354:	20000050 	.word	0x20000050
 8009358:	200000d0 	.word	0x200000d0

0800935c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009360:	2200      	movs	r2, #0
 8009362:	4905      	ldr	r1, [pc, #20]	@ (8009378 <CDC_Init_FS+0x1c>)
 8009364:	4805      	ldr	r0, [pc, #20]	@ (800937c <CDC_Init_FS+0x20>)
 8009366:	f7fe fc1d 	bl	8007ba4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800936a:	4905      	ldr	r1, [pc, #20]	@ (8009380 <CDC_Init_FS+0x24>)
 800936c:	4803      	ldr	r0, [pc, #12]	@ (800937c <CDC_Init_FS+0x20>)
 800936e:	f7fe fc3b 	bl	8007be8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009372:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009374:	4618      	mov	r0, r3
 8009376:	bd80      	pop	{r7, pc}
 8009378:	20001074 	.word	0x20001074
 800937c:	20000598 	.word	0x20000598
 8009380:	20000874 	.word	0x20000874

08009384 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009384:	b480      	push	{r7}
 8009386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009388:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800938a:	4618      	mov	r0, r3
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	4603      	mov	r3, r0
 800939c:	6039      	str	r1, [r7, #0]
 800939e:	71fb      	strb	r3, [r7, #7]
 80093a0:	4613      	mov	r3, r2
 80093a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 80093a4:	4a49      	ldr	r2, [pc, #292]	@ (80094cc <CDC_Control_FS+0x138>)
 80093a6:	f107 0308 	add.w	r3, r7, #8
 80093aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80093ae:	6018      	str	r0, [r3, #0]
 80093b0:	3304      	adds	r3, #4
 80093b2:	8019      	strh	r1, [r3, #0]
 80093b4:	3302      	adds	r3, #2
 80093b6:	0c0a      	lsrs	r2, r1, #16
 80093b8:	701a      	strb	r2, [r3, #0]

  switch(cmd)
 80093ba:	79fb      	ldrb	r3, [r7, #7]
 80093bc:	2b23      	cmp	r3, #35	@ 0x23
 80093be:	d87d      	bhi.n	80094bc <CDC_Control_FS+0x128>
 80093c0:	a201      	add	r2, pc, #4	@ (adr r2, 80093c8 <CDC_Control_FS+0x34>)
 80093c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c6:	bf00      	nop
 80093c8:	080094bd 	.word	0x080094bd
 80093cc:	080094bd 	.word	0x080094bd
 80093d0:	080094bd 	.word	0x080094bd
 80093d4:	080094bd 	.word	0x080094bd
 80093d8:	080094bd 	.word	0x080094bd
 80093dc:	080094bd 	.word	0x080094bd
 80093e0:	080094bd 	.word	0x080094bd
 80093e4:	080094bd 	.word	0x080094bd
 80093e8:	080094bd 	.word	0x080094bd
 80093ec:	080094bd 	.word	0x080094bd
 80093f0:	080094bd 	.word	0x080094bd
 80093f4:	080094bd 	.word	0x080094bd
 80093f8:	080094bd 	.word	0x080094bd
 80093fc:	080094bd 	.word	0x080094bd
 8009400:	080094bd 	.word	0x080094bd
 8009404:	080094bd 	.word	0x080094bd
 8009408:	080094bd 	.word	0x080094bd
 800940c:	080094bd 	.word	0x080094bd
 8009410:	080094bd 	.word	0x080094bd
 8009414:	080094bd 	.word	0x080094bd
 8009418:	080094bd 	.word	0x080094bd
 800941c:	080094bd 	.word	0x080094bd
 8009420:	080094bd 	.word	0x080094bd
 8009424:	080094bd 	.word	0x080094bd
 8009428:	080094bd 	.word	0x080094bd
 800942c:	080094bd 	.word	0x080094bd
 8009430:	080094bd 	.word	0x080094bd
 8009434:	080094bd 	.word	0x080094bd
 8009438:	080094bd 	.word	0x080094bd
 800943c:	080094bd 	.word	0x080094bd
 8009440:	080094bd 	.word	0x080094bd
 8009444:	080094bd 	.word	0x080094bd
 8009448:	08009459 	.word	0x08009459
 800944c:	08009485 	.word	0x08009485
 8009450:	080094bd 	.word	0x080094bd
 8009454:	080094bd 	.word	0x080094bd
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
           tempbuf[0] = pbuf[0];
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	723b      	strb	r3, [r7, #8]
           tempbuf[1] = pbuf[1];
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	785b      	ldrb	r3, [r3, #1]
 8009462:	727b      	strb	r3, [r7, #9]
           tempbuf[2] = pbuf[2];
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	789b      	ldrb	r3, [r3, #2]
 8009468:	72bb      	strb	r3, [r7, #10]
           tempbuf[3] = pbuf[3];
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	78db      	ldrb	r3, [r3, #3]
 800946e:	72fb      	strb	r3, [r7, #11]
           tempbuf[4] = pbuf[4];
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	791b      	ldrb	r3, [r3, #4]
 8009474:	733b      	strb	r3, [r7, #12]
           tempbuf[5] = pbuf[5];
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	795b      	ldrb	r3, [r3, #5]
 800947a:	737b      	strb	r3, [r7, #13]
           tempbuf[6] = pbuf[6];
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	799b      	ldrb	r3, [r3, #6]
 8009480:	73bb      	strb	r3, [r7, #14]
           break;
 8009482:	e01c      	b.n	80094be <CDC_Control_FS+0x12a>

    case CDC_GET_LINE_CODING:
           pbuf[0] = tempbuf[0];
 8009484:	7a3a      	ldrb	r2, [r7, #8]
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	701a      	strb	r2, [r3, #0]
           pbuf[1] = tempbuf[1];
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	3301      	adds	r3, #1
 800948e:	7a7a      	ldrb	r2, [r7, #9]
 8009490:	701a      	strb	r2, [r3, #0]
           pbuf[2] = tempbuf[2];
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	3302      	adds	r3, #2
 8009496:	7aba      	ldrb	r2, [r7, #10]
 8009498:	701a      	strb	r2, [r3, #0]
           pbuf[3] = tempbuf[3];
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	3303      	adds	r3, #3
 800949e:	7afa      	ldrb	r2, [r7, #11]
 80094a0:	701a      	strb	r2, [r3, #0]
           pbuf[4] = tempbuf[4];
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	3304      	adds	r3, #4
 80094a6:	7b3a      	ldrb	r2, [r7, #12]
 80094a8:	701a      	strb	r2, [r3, #0]
           pbuf[5] = tempbuf[5];
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	3305      	adds	r3, #5
 80094ae:	7b7a      	ldrb	r2, [r7, #13]
 80094b0:	701a      	strb	r2, [r3, #0]
           pbuf[6] = tempbuf[6];
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	3306      	adds	r3, #6
 80094b6:	7bba      	ldrb	r2, [r7, #14]
 80094b8:	701a      	strb	r2, [r3, #0]
           break;
 80094ba:	e000      	b.n	80094be <CDC_Control_FS+0x12a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80094bc:	bf00      	nop
  }

  return (USBD_OK);
 80094be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3714      	adds	r7, #20
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr
 80094cc:	0800b628 	.word	0x0800b628

080094d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80094da:	6879      	ldr	r1, [r7, #4]
 80094dc:	4805      	ldr	r0, [pc, #20]	@ (80094f4 <CDC_Receive_FS+0x24>)
 80094de:	f7fe fb83 	bl	8007be8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80094e2:	4804      	ldr	r0, [pc, #16]	@ (80094f4 <CDC_Receive_FS+0x24>)
 80094e4:	f7fe fbde 	bl	8007ca4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80094e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	20000598 	.word	0x20000598

080094f8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	460b      	mov	r3, r1
 8009502:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009504:	2300      	movs	r3, #0
 8009506:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009508:	4b0d      	ldr	r3, [pc, #52]	@ (8009540 <CDC_Transmit_FS+0x48>)
 800950a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800950e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009516:	2b00      	cmp	r3, #0
 8009518:	d001      	beq.n	800951e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800951a:	2301      	movs	r3, #1
 800951c:	e00b      	b.n	8009536 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800951e:	887b      	ldrh	r3, [r7, #2]
 8009520:	461a      	mov	r2, r3
 8009522:	6879      	ldr	r1, [r7, #4]
 8009524:	4806      	ldr	r0, [pc, #24]	@ (8009540 <CDC_Transmit_FS+0x48>)
 8009526:	f7fe fb3d 	bl	8007ba4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800952a:	4805      	ldr	r0, [pc, #20]	@ (8009540 <CDC_Transmit_FS+0x48>)
 800952c:	f7fe fb7a 	bl	8007c24 <USBD_CDC_TransmitPacket>
 8009530:	4603      	mov	r3, r0
 8009532:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009534:	7bfb      	ldrb	r3, [r7, #15]
}
 8009536:	4618      	mov	r0, r3
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	20000598 	.word	0x20000598

08009544 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009544:	b480      	push	{r7}
 8009546:	b087      	sub	sp, #28
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	4613      	mov	r3, r2
 8009550:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009552:	2300      	movs	r3, #0
 8009554:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009556:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800955a:	4618      	mov	r0, r3
 800955c:	371c      	adds	r7, #28
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
	...

08009568 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	4603      	mov	r3, r0
 8009570:	6039      	str	r1, [r7, #0]
 8009572:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	2212      	movs	r2, #18
 8009578:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800957a:	4b03      	ldr	r3, [pc, #12]	@ (8009588 <USBD_FS_DeviceDescriptor+0x20>)
}
 800957c:	4618      	mov	r0, r3
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr
 8009588:	20000100 	.word	0x20000100

0800958c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	4603      	mov	r3, r0
 8009594:	6039      	str	r1, [r7, #0]
 8009596:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	2204      	movs	r2, #4
 800959c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800959e:	4b03      	ldr	r3, [pc, #12]	@ (80095ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr
 80095ac:	20000114 	.word	0x20000114

080095b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	4603      	mov	r3, r0
 80095b8:	6039      	str	r1, [r7, #0]
 80095ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095bc:	79fb      	ldrb	r3, [r7, #7]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d105      	bne.n	80095ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095c2:	683a      	ldr	r2, [r7, #0]
 80095c4:	4907      	ldr	r1, [pc, #28]	@ (80095e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80095c6:	4808      	ldr	r0, [pc, #32]	@ (80095e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80095c8:	f7ff fdb8 	bl	800913c <USBD_GetString>
 80095cc:	e004      	b.n	80095d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095ce:	683a      	ldr	r2, [r7, #0]
 80095d0:	4904      	ldr	r1, [pc, #16]	@ (80095e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80095d2:	4805      	ldr	r0, [pc, #20]	@ (80095e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80095d4:	f7ff fdb2 	bl	800913c <USBD_GetString>
  }
  return USBD_StrDesc;
 80095d8:	4b02      	ldr	r3, [pc, #8]	@ (80095e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3708      	adds	r7, #8
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	20001874 	.word	0x20001874
 80095e8:	0800b630 	.word	0x0800b630

080095ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	4603      	mov	r3, r0
 80095f4:	6039      	str	r1, [r7, #0]
 80095f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80095f8:	683a      	ldr	r2, [r7, #0]
 80095fa:	4904      	ldr	r1, [pc, #16]	@ (800960c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80095fc:	4804      	ldr	r0, [pc, #16]	@ (8009610 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80095fe:	f7ff fd9d 	bl	800913c <USBD_GetString>
  return USBD_StrDesc;
 8009602:	4b02      	ldr	r3, [pc, #8]	@ (800960c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009604:	4618      	mov	r0, r3
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	20001874 	.word	0x20001874
 8009610:	0800b648 	.word	0x0800b648

08009614 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	4603      	mov	r3, r0
 800961c:	6039      	str	r1, [r7, #0]
 800961e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	221a      	movs	r2, #26
 8009624:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009626:	f000 f843 	bl	80096b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800962a:	4b02      	ldr	r3, [pc, #8]	@ (8009634 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800962c:	4618      	mov	r0, r3
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	20000118 	.word	0x20000118

08009638 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	4603      	mov	r3, r0
 8009640:	6039      	str	r1, [r7, #0]
 8009642:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009644:	79fb      	ldrb	r3, [r7, #7]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d105      	bne.n	8009656 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800964a:	683a      	ldr	r2, [r7, #0]
 800964c:	4907      	ldr	r1, [pc, #28]	@ (800966c <USBD_FS_ConfigStrDescriptor+0x34>)
 800964e:	4808      	ldr	r0, [pc, #32]	@ (8009670 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009650:	f7ff fd74 	bl	800913c <USBD_GetString>
 8009654:	e004      	b.n	8009660 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009656:	683a      	ldr	r2, [r7, #0]
 8009658:	4904      	ldr	r1, [pc, #16]	@ (800966c <USBD_FS_ConfigStrDescriptor+0x34>)
 800965a:	4805      	ldr	r0, [pc, #20]	@ (8009670 <USBD_FS_ConfigStrDescriptor+0x38>)
 800965c:	f7ff fd6e 	bl	800913c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009660:	4b02      	ldr	r3, [pc, #8]	@ (800966c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009662:	4618      	mov	r0, r3
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	20001874 	.word	0x20001874
 8009670:	0800b65c 	.word	0x0800b65c

08009674 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	4603      	mov	r3, r0
 800967c:	6039      	str	r1, [r7, #0]
 800967e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009680:	79fb      	ldrb	r3, [r7, #7]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d105      	bne.n	8009692 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009686:	683a      	ldr	r2, [r7, #0]
 8009688:	4907      	ldr	r1, [pc, #28]	@ (80096a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800968a:	4808      	ldr	r0, [pc, #32]	@ (80096ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800968c:	f7ff fd56 	bl	800913c <USBD_GetString>
 8009690:	e004      	b.n	800969c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009692:	683a      	ldr	r2, [r7, #0]
 8009694:	4904      	ldr	r1, [pc, #16]	@ (80096a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009696:	4805      	ldr	r0, [pc, #20]	@ (80096ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009698:	f7ff fd50 	bl	800913c <USBD_GetString>
  }
  return USBD_StrDesc;
 800969c:	4b02      	ldr	r3, [pc, #8]	@ (80096a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3708      	adds	r7, #8
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	20001874 	.word	0x20001874
 80096ac:	0800b668 	.word	0x0800b668

080096b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	4413      	add	r3, r2
 80096bc:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d009      	beq.n	80096d8 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80096c4:	2208      	movs	r2, #8
 80096c6:	4906      	ldr	r1, [pc, #24]	@ (80096e0 <Get_SerialNum+0x30>)
 80096c8:	68f8      	ldr	r0, [r7, #12]
 80096ca:	f000 f80d 	bl	80096e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80096ce:	2204      	movs	r2, #4
 80096d0:	4904      	ldr	r1, [pc, #16]	@ (80096e4 <Get_SerialNum+0x34>)
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 f808 	bl	80096e8 <IntToUnicode>
  }
}
 80096d8:	bf00      	nop
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	2000011a 	.word	0x2000011a
 80096e4:	2000012a 	.word	0x2000012a

080096e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b087      	sub	sp, #28
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	4613      	mov	r3, r2
 80096f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80096f6:	2300      	movs	r3, #0
 80096f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80096fa:	2300      	movs	r3, #0
 80096fc:	75fb      	strb	r3, [r7, #23]
 80096fe:	e027      	b.n	8009750 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	0f1b      	lsrs	r3, r3, #28
 8009704:	2b09      	cmp	r3, #9
 8009706:	d80b      	bhi.n	8009720 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	0f1b      	lsrs	r3, r3, #28
 800970c:	b2da      	uxtb	r2, r3
 800970e:	7dfb      	ldrb	r3, [r7, #23]
 8009710:	005b      	lsls	r3, r3, #1
 8009712:	4619      	mov	r1, r3
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	440b      	add	r3, r1
 8009718:	3230      	adds	r2, #48	@ 0x30
 800971a:	b2d2      	uxtb	r2, r2
 800971c:	701a      	strb	r2, [r3, #0]
 800971e:	e00a      	b.n	8009736 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	0f1b      	lsrs	r3, r3, #28
 8009724:	b2da      	uxtb	r2, r3
 8009726:	7dfb      	ldrb	r3, [r7, #23]
 8009728:	005b      	lsls	r3, r3, #1
 800972a:	4619      	mov	r1, r3
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	440b      	add	r3, r1
 8009730:	3237      	adds	r2, #55	@ 0x37
 8009732:	b2d2      	uxtb	r2, r2
 8009734:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	011b      	lsls	r3, r3, #4
 800973a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800973c:	7dfb      	ldrb	r3, [r7, #23]
 800973e:	005b      	lsls	r3, r3, #1
 8009740:	3301      	adds	r3, #1
 8009742:	68ba      	ldr	r2, [r7, #8]
 8009744:	4413      	add	r3, r2
 8009746:	2200      	movs	r2, #0
 8009748:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800974a:	7dfb      	ldrb	r3, [r7, #23]
 800974c:	3301      	adds	r3, #1
 800974e:	75fb      	strb	r3, [r7, #23]
 8009750:	7dfa      	ldrb	r2, [r7, #23]
 8009752:	79fb      	ldrb	r3, [r7, #7]
 8009754:	429a      	cmp	r2, r3
 8009756:	d3d3      	bcc.n	8009700 <IntToUnicode+0x18>
  }
}
 8009758:	bf00      	nop
 800975a:	bf00      	nop
 800975c:	371c      	adds	r7, #28
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
	...

08009768 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b08a      	sub	sp, #40	@ 0x28
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009770:	f107 0314 	add.w	r3, r7, #20
 8009774:	2200      	movs	r2, #0
 8009776:	601a      	str	r2, [r3, #0]
 8009778:	605a      	str	r2, [r3, #4]
 800977a:	609a      	str	r2, [r3, #8]
 800977c:	60da      	str	r2, [r3, #12]
 800977e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009788:	d13a      	bne.n	8009800 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800978a:	2300      	movs	r3, #0
 800978c:	613b      	str	r3, [r7, #16]
 800978e:	4b1e      	ldr	r3, [pc, #120]	@ (8009808 <HAL_PCD_MspInit+0xa0>)
 8009790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009792:	4a1d      	ldr	r2, [pc, #116]	@ (8009808 <HAL_PCD_MspInit+0xa0>)
 8009794:	f043 0301 	orr.w	r3, r3, #1
 8009798:	6313      	str	r3, [r2, #48]	@ 0x30
 800979a:	4b1b      	ldr	r3, [pc, #108]	@ (8009808 <HAL_PCD_MspInit+0xa0>)
 800979c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800979e:	f003 0301 	and.w	r3, r3, #1
 80097a2:	613b      	str	r3, [r7, #16]
 80097a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80097a6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80097aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097ac:	2302      	movs	r3, #2
 80097ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097b0:	2300      	movs	r3, #0
 80097b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097b4:	2303      	movs	r3, #3
 80097b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80097b8:	230a      	movs	r3, #10
 80097ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097bc:	f107 0314 	add.w	r3, r7, #20
 80097c0:	4619      	mov	r1, r3
 80097c2:	4812      	ldr	r0, [pc, #72]	@ (800980c <HAL_PCD_MspInit+0xa4>)
 80097c4:	f7f8 fff6 	bl	80027b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80097c8:	4b0f      	ldr	r3, [pc, #60]	@ (8009808 <HAL_PCD_MspInit+0xa0>)
 80097ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097cc:	4a0e      	ldr	r2, [pc, #56]	@ (8009808 <HAL_PCD_MspInit+0xa0>)
 80097ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097d2:	6353      	str	r3, [r2, #52]	@ 0x34
 80097d4:	2300      	movs	r3, #0
 80097d6:	60fb      	str	r3, [r7, #12]
 80097d8:	4b0b      	ldr	r3, [pc, #44]	@ (8009808 <HAL_PCD_MspInit+0xa0>)
 80097da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097dc:	4a0a      	ldr	r2, [pc, #40]	@ (8009808 <HAL_PCD_MspInit+0xa0>)
 80097de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80097e2:	6453      	str	r3, [r2, #68]	@ 0x44
 80097e4:	4b08      	ldr	r3, [pc, #32]	@ (8009808 <HAL_PCD_MspInit+0xa0>)
 80097e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80097ec:	60fb      	str	r3, [r7, #12]
 80097ee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80097f0:	2200      	movs	r2, #0
 80097f2:	2100      	movs	r1, #0
 80097f4:	2043      	movs	r0, #67	@ 0x43
 80097f6:	f7f8 fc14 	bl	8002022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80097fa:	2043      	movs	r0, #67	@ 0x43
 80097fc:	f7f8 fc2d 	bl	800205a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009800:	bf00      	nop
 8009802:	3728      	adds	r7, #40	@ 0x28
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	40023800 	.word	0x40023800
 800980c:	40020000 	.word	0x40020000

08009810 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009824:	4619      	mov	r1, r3
 8009826:	4610      	mov	r0, r2
 8009828:	f7fe fb25 	bl	8007e76 <USBD_LL_SetupStage>
}
 800982c:	bf00      	nop
 800982e:	3708      	adds	r7, #8
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	460b      	mov	r3, r1
 800983e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009846:	78fa      	ldrb	r2, [r7, #3]
 8009848:	6879      	ldr	r1, [r7, #4]
 800984a:	4613      	mov	r3, r2
 800984c:	00db      	lsls	r3, r3, #3
 800984e:	4413      	add	r3, r2
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	440b      	add	r3, r1
 8009854:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	78fb      	ldrb	r3, [r7, #3]
 800985c:	4619      	mov	r1, r3
 800985e:	f7fe fb5f 	bl	8007f20 <USBD_LL_DataOutStage>
}
 8009862:	bf00      	nop
 8009864:	3708      	adds	r7, #8
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b082      	sub	sp, #8
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
 8009872:	460b      	mov	r3, r1
 8009874:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800987c:	78fa      	ldrb	r2, [r7, #3]
 800987e:	6879      	ldr	r1, [r7, #4]
 8009880:	4613      	mov	r3, r2
 8009882:	00db      	lsls	r3, r3, #3
 8009884:	4413      	add	r3, r2
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	440b      	add	r3, r1
 800988a:	3320      	adds	r3, #32
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	78fb      	ldrb	r3, [r7, #3]
 8009890:	4619      	mov	r1, r3
 8009892:	f7fe fbf8 	bl	8008086 <USBD_LL_DataInStage>
}
 8009896:	bf00      	nop
 8009898:	3708      	adds	r7, #8
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b082      	sub	sp, #8
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7fe fd32 	bl	8008316 <USBD_LL_SOF>
}
 80098b2:	bf00      	nop
 80098b4:	3708      	adds	r7, #8
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b084      	sub	sp, #16
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80098c2:	2301      	movs	r3, #1
 80098c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	79db      	ldrb	r3, [r3, #7]
 80098ca:	2b02      	cmp	r3, #2
 80098cc:	d001      	beq.n	80098d2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80098ce:	f7f8 f88f 	bl	80019f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80098d8:	7bfa      	ldrb	r2, [r7, #15]
 80098da:	4611      	mov	r1, r2
 80098dc:	4618      	mov	r0, r3
 80098de:	f7fe fcd6 	bl	800828e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7fe fc7e 	bl	80081ea <USBD_LL_Reset>
}
 80098ee:	bf00      	nop
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
	...

080098f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009906:	4618      	mov	r0, r3
 8009908:	f7fe fcd1 	bl	80082ae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	6812      	ldr	r2, [r2, #0]
 800991a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800991e:	f043 0301 	orr.w	r3, r3, #1
 8009922:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	7adb      	ldrb	r3, [r3, #11]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d005      	beq.n	8009938 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800992c:	4b04      	ldr	r3, [pc, #16]	@ (8009940 <HAL_PCD_SuspendCallback+0x48>)
 800992e:	691b      	ldr	r3, [r3, #16]
 8009930:	4a03      	ldr	r2, [pc, #12]	@ (8009940 <HAL_PCD_SuspendCallback+0x48>)
 8009932:	f043 0306 	orr.w	r3, r3, #6
 8009936:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009938:	bf00      	nop
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	e000ed00 	.word	0xe000ed00

08009944 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009952:	4618      	mov	r0, r3
 8009954:	f7fe fcc7 	bl	80082e6 <USBD_LL_Resume>
}
 8009958:	bf00      	nop
 800995a:	3708      	adds	r7, #8
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	460b      	mov	r3, r1
 800996a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009972:	78fa      	ldrb	r2, [r7, #3]
 8009974:	4611      	mov	r1, r2
 8009976:	4618      	mov	r0, r3
 8009978:	f7fe fd1f 	bl	80083ba <USBD_LL_IsoOUTIncomplete>
}
 800997c:	bf00      	nop
 800997e:	3708      	adds	r7, #8
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	460b      	mov	r3, r1
 800998e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009996:	78fa      	ldrb	r2, [r7, #3]
 8009998:	4611      	mov	r1, r2
 800999a:	4618      	mov	r0, r3
 800999c:	f7fe fcdb 	bl	8008356 <USBD_LL_IsoINIncomplete>
}
 80099a0:	bf00      	nop
 80099a2:	3708      	adds	r7, #8
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7fe fd31 	bl	800841e <USBD_LL_DevConnected>
}
 80099bc:	bf00      	nop
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fe fd2e 	bl	8008434 <USBD_LL_DevDisconnected>
}
 80099d8:	bf00      	nop
 80099da:	3708      	adds	r7, #8
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d13c      	bne.n	8009a6a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80099f0:	4a20      	ldr	r2, [pc, #128]	@ (8009a74 <USBD_LL_Init+0x94>)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4a1e      	ldr	r2, [pc, #120]	@ (8009a74 <USBD_LL_Init+0x94>)
 80099fc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009a00:	4b1c      	ldr	r3, [pc, #112]	@ (8009a74 <USBD_LL_Init+0x94>)
 8009a02:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009a06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009a08:	4b1a      	ldr	r3, [pc, #104]	@ (8009a74 <USBD_LL_Init+0x94>)
 8009a0a:	2204      	movs	r2, #4
 8009a0c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009a0e:	4b19      	ldr	r3, [pc, #100]	@ (8009a74 <USBD_LL_Init+0x94>)
 8009a10:	2202      	movs	r2, #2
 8009a12:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009a14:	4b17      	ldr	r3, [pc, #92]	@ (8009a74 <USBD_LL_Init+0x94>)
 8009a16:	2200      	movs	r2, #0
 8009a18:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009a1a:	4b16      	ldr	r3, [pc, #88]	@ (8009a74 <USBD_LL_Init+0x94>)
 8009a1c:	2202      	movs	r2, #2
 8009a1e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009a20:	4b14      	ldr	r3, [pc, #80]	@ (8009a74 <USBD_LL_Init+0x94>)
 8009a22:	2200      	movs	r2, #0
 8009a24:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009a26:	4b13      	ldr	r3, [pc, #76]	@ (8009a74 <USBD_LL_Init+0x94>)
 8009a28:	2200      	movs	r2, #0
 8009a2a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009a2c:	4b11      	ldr	r3, [pc, #68]	@ (8009a74 <USBD_LL_Init+0x94>)
 8009a2e:	2200      	movs	r2, #0
 8009a30:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009a32:	4b10      	ldr	r3, [pc, #64]	@ (8009a74 <USBD_LL_Init+0x94>)
 8009a34:	2200      	movs	r2, #0
 8009a36:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009a38:	4b0e      	ldr	r3, [pc, #56]	@ (8009a74 <USBD_LL_Init+0x94>)
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009a3e:	480d      	ldr	r0, [pc, #52]	@ (8009a74 <USBD_LL_Init+0x94>)
 8009a40:	f7f9 f886 	bl	8002b50 <HAL_PCD_Init>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d001      	beq.n	8009a4e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009a4a:	f7f7 ffd1 	bl	80019f0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009a4e:	2180      	movs	r1, #128	@ 0x80
 8009a50:	4808      	ldr	r0, [pc, #32]	@ (8009a74 <USBD_LL_Init+0x94>)
 8009a52:	f7fa fab0 	bl	8003fb6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009a56:	2240      	movs	r2, #64	@ 0x40
 8009a58:	2100      	movs	r1, #0
 8009a5a:	4806      	ldr	r0, [pc, #24]	@ (8009a74 <USBD_LL_Init+0x94>)
 8009a5c:	f7fa fa64 	bl	8003f28 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009a60:	2280      	movs	r2, #128	@ 0x80
 8009a62:	2101      	movs	r1, #1
 8009a64:	4803      	ldr	r0, [pc, #12]	@ (8009a74 <USBD_LL_Init+0x94>)
 8009a66:	f7fa fa5f 	bl	8003f28 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3708      	adds	r7, #8
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	20001a74 	.word	0x20001a74

08009a78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a80:	2300      	movs	r3, #0
 8009a82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a84:	2300      	movs	r3, #0
 8009a86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7f9 f96d 	bl	8002d6e <HAL_PCD_Start>
 8009a94:	4603      	mov	r3, r0
 8009a96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a98:	7bfb      	ldrb	r3, [r7, #15]
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f000 f942 	bl	8009d24 <USBD_Get_USB_Status>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009aa4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b084      	sub	sp, #16
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
 8009ab6:	4608      	mov	r0, r1
 8009ab8:	4611      	mov	r1, r2
 8009aba:	461a      	mov	r2, r3
 8009abc:	4603      	mov	r3, r0
 8009abe:	70fb      	strb	r3, [r7, #3]
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	70bb      	strb	r3, [r7, #2]
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009acc:	2300      	movs	r3, #0
 8009ace:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009ad6:	78bb      	ldrb	r3, [r7, #2]
 8009ad8:	883a      	ldrh	r2, [r7, #0]
 8009ada:	78f9      	ldrb	r1, [r7, #3]
 8009adc:	f7f9 fe41 	bl	8003762 <HAL_PCD_EP_Open>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ae4:	7bfb      	ldrb	r3, [r7, #15]
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f000 f91c 	bl	8009d24 <USBD_Get_USB_Status>
 8009aec:	4603      	mov	r3, r0
 8009aee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009af0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3710      	adds	r7, #16
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}

08009afa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009afa:	b580      	push	{r7, lr}
 8009afc:	b084      	sub	sp, #16
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
 8009b02:	460b      	mov	r3, r1
 8009b04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b06:	2300      	movs	r3, #0
 8009b08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009b14:	78fa      	ldrb	r2, [r7, #3]
 8009b16:	4611      	mov	r1, r2
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7f9 fe8a 	bl	8003832 <HAL_PCD_EP_Close>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b22:	7bfb      	ldrb	r3, [r7, #15]
 8009b24:	4618      	mov	r0, r3
 8009b26:	f000 f8fd 	bl	8009d24 <USBD_Get_USB_Status>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3710      	adds	r7, #16
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	460b      	mov	r3, r1
 8009b42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b44:	2300      	movs	r3, #0
 8009b46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009b52:	78fa      	ldrb	r2, [r7, #3]
 8009b54:	4611      	mov	r1, r2
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7f9 ff42 	bl	80039e0 <HAL_PCD_EP_SetStall>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b60:	7bfb      	ldrb	r3, [r7, #15]
 8009b62:	4618      	mov	r0, r3
 8009b64:	f000 f8de 	bl	8009d24 <USBD_Get_USB_Status>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}

08009b76 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b084      	sub	sp, #16
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
 8009b7e:	460b      	mov	r3, r1
 8009b80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b82:	2300      	movs	r3, #0
 8009b84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b86:	2300      	movs	r3, #0
 8009b88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009b90:	78fa      	ldrb	r2, [r7, #3]
 8009b92:	4611      	mov	r1, r2
 8009b94:	4618      	mov	r0, r3
 8009b96:	f7f9 ff86 	bl	8003aa6 <HAL_PCD_EP_ClrStall>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f000 f8bf 	bl	8009d24 <USBD_Get_USB_Status>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009baa:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3710      	adds	r7, #16
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009bc6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009bc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	da0b      	bge.n	8009be8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009bd0:	78fb      	ldrb	r3, [r7, #3]
 8009bd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009bd6:	68f9      	ldr	r1, [r7, #12]
 8009bd8:	4613      	mov	r3, r2
 8009bda:	00db      	lsls	r3, r3, #3
 8009bdc:	4413      	add	r3, r2
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	440b      	add	r3, r1
 8009be2:	3316      	adds	r3, #22
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	e00b      	b.n	8009c00 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009be8:	78fb      	ldrb	r3, [r7, #3]
 8009bea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009bee:	68f9      	ldr	r1, [r7, #12]
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	00db      	lsls	r3, r3, #3
 8009bf4:	4413      	add	r3, r2
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	440b      	add	r3, r1
 8009bfa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009bfe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3714      	adds	r7, #20
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	460b      	mov	r3, r1
 8009c16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009c26:	78fa      	ldrb	r2, [r7, #3]
 8009c28:	4611      	mov	r1, r2
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7f9 fd75 	bl	800371a <HAL_PCD_SetAddress>
 8009c30:	4603      	mov	r3, r0
 8009c32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c34:	7bfb      	ldrb	r3, [r7, #15]
 8009c36:	4618      	mov	r0, r3
 8009c38:	f000 f874 	bl	8009d24 <USBD_Get_USB_Status>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c40:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}

08009c4a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009c4a:	b580      	push	{r7, lr}
 8009c4c:	b086      	sub	sp, #24
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	60f8      	str	r0, [r7, #12]
 8009c52:	607a      	str	r2, [r7, #4]
 8009c54:	603b      	str	r3, [r7, #0]
 8009c56:	460b      	mov	r3, r1
 8009c58:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009c68:	7af9      	ldrb	r1, [r7, #11]
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	f7f9 fe7d 	bl	800396c <HAL_PCD_EP_Transmit>
 8009c72:	4603      	mov	r3, r0
 8009c74:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c76:	7dfb      	ldrb	r3, [r7, #23]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f000 f853 	bl	8009d24 <USBD_Get_USB_Status>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c82:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3718      	adds	r7, #24
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b086      	sub	sp, #24
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	607a      	str	r2, [r7, #4]
 8009c96:	603b      	str	r3, [r7, #0]
 8009c98:	460b      	mov	r3, r1
 8009c9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009caa:	7af9      	ldrb	r1, [r7, #11]
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	f7f9 fe09 	bl	80038c6 <HAL_PCD_EP_Receive>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cb8:	7dfb      	ldrb	r3, [r7, #23]
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f000 f832 	bl	8009d24 <USBD_Get_USB_Status>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009cc4:	7dbb      	ldrb	r3, [r7, #22]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3718      	adds	r7, #24
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b082      	sub	sp, #8
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ce0:	78fa      	ldrb	r2, [r7, #3]
 8009ce2:	4611      	mov	r1, r2
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7f9 fe29 	bl	800393c <HAL_PCD_EP_GetRxCount>
 8009cea:	4603      	mov	r3, r0
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3708      	adds	r7, #8
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009cfc:	4b03      	ldr	r3, [pc, #12]	@ (8009d0c <USBD_static_malloc+0x18>)
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	370c      	adds	r7, #12
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	20001f58 	.word	0x20001f58

08009d10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]

}
 8009d18:	bf00      	nop
 8009d1a:	370c      	adds	r7, #12
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr

08009d24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d32:	79fb      	ldrb	r3, [r7, #7]
 8009d34:	2b03      	cmp	r3, #3
 8009d36:	d817      	bhi.n	8009d68 <USBD_Get_USB_Status+0x44>
 8009d38:	a201      	add	r2, pc, #4	@ (adr r2, 8009d40 <USBD_Get_USB_Status+0x1c>)
 8009d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d3e:	bf00      	nop
 8009d40:	08009d51 	.word	0x08009d51
 8009d44:	08009d57 	.word	0x08009d57
 8009d48:	08009d5d 	.word	0x08009d5d
 8009d4c:	08009d63 	.word	0x08009d63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009d50:	2300      	movs	r3, #0
 8009d52:	73fb      	strb	r3, [r7, #15]
    break;
 8009d54:	e00b      	b.n	8009d6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009d56:	2303      	movs	r3, #3
 8009d58:	73fb      	strb	r3, [r7, #15]
    break;
 8009d5a:	e008      	b.n	8009d6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	73fb      	strb	r3, [r7, #15]
    break;
 8009d60:	e005      	b.n	8009d6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009d62:	2303      	movs	r3, #3
 8009d64:	73fb      	strb	r3, [r7, #15]
    break;
 8009d66:	e002      	b.n	8009d6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009d68:	2303      	movs	r3, #3
 8009d6a:	73fb      	strb	r3, [r7, #15]
    break;
 8009d6c:	bf00      	nop
  }
  return usb_status;
 8009d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3714      	adds	r7, #20
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr

08009d7c <siprintf>:
 8009d7c:	b40e      	push	{r1, r2, r3}
 8009d7e:	b500      	push	{lr}
 8009d80:	b09c      	sub	sp, #112	@ 0x70
 8009d82:	ab1d      	add	r3, sp, #116	@ 0x74
 8009d84:	9002      	str	r0, [sp, #8]
 8009d86:	9006      	str	r0, [sp, #24]
 8009d88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009d8c:	4809      	ldr	r0, [pc, #36]	@ (8009db4 <siprintf+0x38>)
 8009d8e:	9107      	str	r1, [sp, #28]
 8009d90:	9104      	str	r1, [sp, #16]
 8009d92:	4909      	ldr	r1, [pc, #36]	@ (8009db8 <siprintf+0x3c>)
 8009d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d98:	9105      	str	r1, [sp, #20]
 8009d9a:	6800      	ldr	r0, [r0, #0]
 8009d9c:	9301      	str	r3, [sp, #4]
 8009d9e:	a902      	add	r1, sp, #8
 8009da0:	f000 f994 	bl	800a0cc <_svfiprintf_r>
 8009da4:	9b02      	ldr	r3, [sp, #8]
 8009da6:	2200      	movs	r2, #0
 8009da8:	701a      	strb	r2, [r3, #0]
 8009daa:	b01c      	add	sp, #112	@ 0x70
 8009dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8009db0:	b003      	add	sp, #12
 8009db2:	4770      	bx	lr
 8009db4:	20000134 	.word	0x20000134
 8009db8:	ffff0208 	.word	0xffff0208

08009dbc <memset>:
 8009dbc:	4402      	add	r2, r0
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d100      	bne.n	8009dc6 <memset+0xa>
 8009dc4:	4770      	bx	lr
 8009dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8009dca:	e7f9      	b.n	8009dc0 <memset+0x4>

08009dcc <__errno>:
 8009dcc:	4b01      	ldr	r3, [pc, #4]	@ (8009dd4 <__errno+0x8>)
 8009dce:	6818      	ldr	r0, [r3, #0]
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	20000134 	.word	0x20000134

08009dd8 <__libc_init_array>:
 8009dd8:	b570      	push	{r4, r5, r6, lr}
 8009dda:	4d0d      	ldr	r5, [pc, #52]	@ (8009e10 <__libc_init_array+0x38>)
 8009ddc:	4c0d      	ldr	r4, [pc, #52]	@ (8009e14 <__libc_init_array+0x3c>)
 8009dde:	1b64      	subs	r4, r4, r5
 8009de0:	10a4      	asrs	r4, r4, #2
 8009de2:	2600      	movs	r6, #0
 8009de4:	42a6      	cmp	r6, r4
 8009de6:	d109      	bne.n	8009dfc <__libc_init_array+0x24>
 8009de8:	4d0b      	ldr	r5, [pc, #44]	@ (8009e18 <__libc_init_array+0x40>)
 8009dea:	4c0c      	ldr	r4, [pc, #48]	@ (8009e1c <__libc_init_array+0x44>)
 8009dec:	f001 fc0a 	bl	800b604 <_init>
 8009df0:	1b64      	subs	r4, r4, r5
 8009df2:	10a4      	asrs	r4, r4, #2
 8009df4:	2600      	movs	r6, #0
 8009df6:	42a6      	cmp	r6, r4
 8009df8:	d105      	bne.n	8009e06 <__libc_init_array+0x2e>
 8009dfa:	bd70      	pop	{r4, r5, r6, pc}
 8009dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e00:	4798      	blx	r3
 8009e02:	3601      	adds	r6, #1
 8009e04:	e7ee      	b.n	8009de4 <__libc_init_array+0xc>
 8009e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e0a:	4798      	blx	r3
 8009e0c:	3601      	adds	r6, #1
 8009e0e:	e7f2      	b.n	8009df6 <__libc_init_array+0x1e>
 8009e10:	0800b700 	.word	0x0800b700
 8009e14:	0800b700 	.word	0x0800b700
 8009e18:	0800b700 	.word	0x0800b700
 8009e1c:	0800b704 	.word	0x0800b704

08009e20 <__retarget_lock_acquire_recursive>:
 8009e20:	4770      	bx	lr

08009e22 <__retarget_lock_release_recursive>:
 8009e22:	4770      	bx	lr

08009e24 <_free_r>:
 8009e24:	b538      	push	{r3, r4, r5, lr}
 8009e26:	4605      	mov	r5, r0
 8009e28:	2900      	cmp	r1, #0
 8009e2a:	d041      	beq.n	8009eb0 <_free_r+0x8c>
 8009e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e30:	1f0c      	subs	r4, r1, #4
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	bfb8      	it	lt
 8009e36:	18e4      	addlt	r4, r4, r3
 8009e38:	f000 f8e0 	bl	8009ffc <__malloc_lock>
 8009e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8009eb4 <_free_r+0x90>)
 8009e3e:	6813      	ldr	r3, [r2, #0]
 8009e40:	b933      	cbnz	r3, 8009e50 <_free_r+0x2c>
 8009e42:	6063      	str	r3, [r4, #4]
 8009e44:	6014      	str	r4, [r2, #0]
 8009e46:	4628      	mov	r0, r5
 8009e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e4c:	f000 b8dc 	b.w	800a008 <__malloc_unlock>
 8009e50:	42a3      	cmp	r3, r4
 8009e52:	d908      	bls.n	8009e66 <_free_r+0x42>
 8009e54:	6820      	ldr	r0, [r4, #0]
 8009e56:	1821      	adds	r1, r4, r0
 8009e58:	428b      	cmp	r3, r1
 8009e5a:	bf01      	itttt	eq
 8009e5c:	6819      	ldreq	r1, [r3, #0]
 8009e5e:	685b      	ldreq	r3, [r3, #4]
 8009e60:	1809      	addeq	r1, r1, r0
 8009e62:	6021      	streq	r1, [r4, #0]
 8009e64:	e7ed      	b.n	8009e42 <_free_r+0x1e>
 8009e66:	461a      	mov	r2, r3
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	b10b      	cbz	r3, 8009e70 <_free_r+0x4c>
 8009e6c:	42a3      	cmp	r3, r4
 8009e6e:	d9fa      	bls.n	8009e66 <_free_r+0x42>
 8009e70:	6811      	ldr	r1, [r2, #0]
 8009e72:	1850      	adds	r0, r2, r1
 8009e74:	42a0      	cmp	r0, r4
 8009e76:	d10b      	bne.n	8009e90 <_free_r+0x6c>
 8009e78:	6820      	ldr	r0, [r4, #0]
 8009e7a:	4401      	add	r1, r0
 8009e7c:	1850      	adds	r0, r2, r1
 8009e7e:	4283      	cmp	r3, r0
 8009e80:	6011      	str	r1, [r2, #0]
 8009e82:	d1e0      	bne.n	8009e46 <_free_r+0x22>
 8009e84:	6818      	ldr	r0, [r3, #0]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	6053      	str	r3, [r2, #4]
 8009e8a:	4408      	add	r0, r1
 8009e8c:	6010      	str	r0, [r2, #0]
 8009e8e:	e7da      	b.n	8009e46 <_free_r+0x22>
 8009e90:	d902      	bls.n	8009e98 <_free_r+0x74>
 8009e92:	230c      	movs	r3, #12
 8009e94:	602b      	str	r3, [r5, #0]
 8009e96:	e7d6      	b.n	8009e46 <_free_r+0x22>
 8009e98:	6820      	ldr	r0, [r4, #0]
 8009e9a:	1821      	adds	r1, r4, r0
 8009e9c:	428b      	cmp	r3, r1
 8009e9e:	bf04      	itt	eq
 8009ea0:	6819      	ldreq	r1, [r3, #0]
 8009ea2:	685b      	ldreq	r3, [r3, #4]
 8009ea4:	6063      	str	r3, [r4, #4]
 8009ea6:	bf04      	itt	eq
 8009ea8:	1809      	addeq	r1, r1, r0
 8009eaa:	6021      	streq	r1, [r4, #0]
 8009eac:	6054      	str	r4, [r2, #4]
 8009eae:	e7ca      	b.n	8009e46 <_free_r+0x22>
 8009eb0:	bd38      	pop	{r3, r4, r5, pc}
 8009eb2:	bf00      	nop
 8009eb4:	200022bc 	.word	0x200022bc

08009eb8 <sbrk_aligned>:
 8009eb8:	b570      	push	{r4, r5, r6, lr}
 8009eba:	4e0f      	ldr	r6, [pc, #60]	@ (8009ef8 <sbrk_aligned+0x40>)
 8009ebc:	460c      	mov	r4, r1
 8009ebe:	6831      	ldr	r1, [r6, #0]
 8009ec0:	4605      	mov	r5, r0
 8009ec2:	b911      	cbnz	r1, 8009eca <sbrk_aligned+0x12>
 8009ec4:	f000 fba6 	bl	800a614 <_sbrk_r>
 8009ec8:	6030      	str	r0, [r6, #0]
 8009eca:	4621      	mov	r1, r4
 8009ecc:	4628      	mov	r0, r5
 8009ece:	f000 fba1 	bl	800a614 <_sbrk_r>
 8009ed2:	1c43      	adds	r3, r0, #1
 8009ed4:	d103      	bne.n	8009ede <sbrk_aligned+0x26>
 8009ed6:	f04f 34ff 	mov.w	r4, #4294967295
 8009eda:	4620      	mov	r0, r4
 8009edc:	bd70      	pop	{r4, r5, r6, pc}
 8009ede:	1cc4      	adds	r4, r0, #3
 8009ee0:	f024 0403 	bic.w	r4, r4, #3
 8009ee4:	42a0      	cmp	r0, r4
 8009ee6:	d0f8      	beq.n	8009eda <sbrk_aligned+0x22>
 8009ee8:	1a21      	subs	r1, r4, r0
 8009eea:	4628      	mov	r0, r5
 8009eec:	f000 fb92 	bl	800a614 <_sbrk_r>
 8009ef0:	3001      	adds	r0, #1
 8009ef2:	d1f2      	bne.n	8009eda <sbrk_aligned+0x22>
 8009ef4:	e7ef      	b.n	8009ed6 <sbrk_aligned+0x1e>
 8009ef6:	bf00      	nop
 8009ef8:	200022b8 	.word	0x200022b8

08009efc <_malloc_r>:
 8009efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f00:	1ccd      	adds	r5, r1, #3
 8009f02:	f025 0503 	bic.w	r5, r5, #3
 8009f06:	3508      	adds	r5, #8
 8009f08:	2d0c      	cmp	r5, #12
 8009f0a:	bf38      	it	cc
 8009f0c:	250c      	movcc	r5, #12
 8009f0e:	2d00      	cmp	r5, #0
 8009f10:	4606      	mov	r6, r0
 8009f12:	db01      	blt.n	8009f18 <_malloc_r+0x1c>
 8009f14:	42a9      	cmp	r1, r5
 8009f16:	d904      	bls.n	8009f22 <_malloc_r+0x26>
 8009f18:	230c      	movs	r3, #12
 8009f1a:	6033      	str	r3, [r6, #0]
 8009f1c:	2000      	movs	r0, #0
 8009f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ff8 <_malloc_r+0xfc>
 8009f26:	f000 f869 	bl	8009ffc <__malloc_lock>
 8009f2a:	f8d8 3000 	ldr.w	r3, [r8]
 8009f2e:	461c      	mov	r4, r3
 8009f30:	bb44      	cbnz	r4, 8009f84 <_malloc_r+0x88>
 8009f32:	4629      	mov	r1, r5
 8009f34:	4630      	mov	r0, r6
 8009f36:	f7ff ffbf 	bl	8009eb8 <sbrk_aligned>
 8009f3a:	1c43      	adds	r3, r0, #1
 8009f3c:	4604      	mov	r4, r0
 8009f3e:	d158      	bne.n	8009ff2 <_malloc_r+0xf6>
 8009f40:	f8d8 4000 	ldr.w	r4, [r8]
 8009f44:	4627      	mov	r7, r4
 8009f46:	2f00      	cmp	r7, #0
 8009f48:	d143      	bne.n	8009fd2 <_malloc_r+0xd6>
 8009f4a:	2c00      	cmp	r4, #0
 8009f4c:	d04b      	beq.n	8009fe6 <_malloc_r+0xea>
 8009f4e:	6823      	ldr	r3, [r4, #0]
 8009f50:	4639      	mov	r1, r7
 8009f52:	4630      	mov	r0, r6
 8009f54:	eb04 0903 	add.w	r9, r4, r3
 8009f58:	f000 fb5c 	bl	800a614 <_sbrk_r>
 8009f5c:	4581      	cmp	r9, r0
 8009f5e:	d142      	bne.n	8009fe6 <_malloc_r+0xea>
 8009f60:	6821      	ldr	r1, [r4, #0]
 8009f62:	1a6d      	subs	r5, r5, r1
 8009f64:	4629      	mov	r1, r5
 8009f66:	4630      	mov	r0, r6
 8009f68:	f7ff ffa6 	bl	8009eb8 <sbrk_aligned>
 8009f6c:	3001      	adds	r0, #1
 8009f6e:	d03a      	beq.n	8009fe6 <_malloc_r+0xea>
 8009f70:	6823      	ldr	r3, [r4, #0]
 8009f72:	442b      	add	r3, r5
 8009f74:	6023      	str	r3, [r4, #0]
 8009f76:	f8d8 3000 	ldr.w	r3, [r8]
 8009f7a:	685a      	ldr	r2, [r3, #4]
 8009f7c:	bb62      	cbnz	r2, 8009fd8 <_malloc_r+0xdc>
 8009f7e:	f8c8 7000 	str.w	r7, [r8]
 8009f82:	e00f      	b.n	8009fa4 <_malloc_r+0xa8>
 8009f84:	6822      	ldr	r2, [r4, #0]
 8009f86:	1b52      	subs	r2, r2, r5
 8009f88:	d420      	bmi.n	8009fcc <_malloc_r+0xd0>
 8009f8a:	2a0b      	cmp	r2, #11
 8009f8c:	d917      	bls.n	8009fbe <_malloc_r+0xc2>
 8009f8e:	1961      	adds	r1, r4, r5
 8009f90:	42a3      	cmp	r3, r4
 8009f92:	6025      	str	r5, [r4, #0]
 8009f94:	bf18      	it	ne
 8009f96:	6059      	strne	r1, [r3, #4]
 8009f98:	6863      	ldr	r3, [r4, #4]
 8009f9a:	bf08      	it	eq
 8009f9c:	f8c8 1000 	streq.w	r1, [r8]
 8009fa0:	5162      	str	r2, [r4, r5]
 8009fa2:	604b      	str	r3, [r1, #4]
 8009fa4:	4630      	mov	r0, r6
 8009fa6:	f000 f82f 	bl	800a008 <__malloc_unlock>
 8009faa:	f104 000b 	add.w	r0, r4, #11
 8009fae:	1d23      	adds	r3, r4, #4
 8009fb0:	f020 0007 	bic.w	r0, r0, #7
 8009fb4:	1ac2      	subs	r2, r0, r3
 8009fb6:	bf1c      	itt	ne
 8009fb8:	1a1b      	subne	r3, r3, r0
 8009fba:	50a3      	strne	r3, [r4, r2]
 8009fbc:	e7af      	b.n	8009f1e <_malloc_r+0x22>
 8009fbe:	6862      	ldr	r2, [r4, #4]
 8009fc0:	42a3      	cmp	r3, r4
 8009fc2:	bf0c      	ite	eq
 8009fc4:	f8c8 2000 	streq.w	r2, [r8]
 8009fc8:	605a      	strne	r2, [r3, #4]
 8009fca:	e7eb      	b.n	8009fa4 <_malloc_r+0xa8>
 8009fcc:	4623      	mov	r3, r4
 8009fce:	6864      	ldr	r4, [r4, #4]
 8009fd0:	e7ae      	b.n	8009f30 <_malloc_r+0x34>
 8009fd2:	463c      	mov	r4, r7
 8009fd4:	687f      	ldr	r7, [r7, #4]
 8009fd6:	e7b6      	b.n	8009f46 <_malloc_r+0x4a>
 8009fd8:	461a      	mov	r2, r3
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	42a3      	cmp	r3, r4
 8009fde:	d1fb      	bne.n	8009fd8 <_malloc_r+0xdc>
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	6053      	str	r3, [r2, #4]
 8009fe4:	e7de      	b.n	8009fa4 <_malloc_r+0xa8>
 8009fe6:	230c      	movs	r3, #12
 8009fe8:	6033      	str	r3, [r6, #0]
 8009fea:	4630      	mov	r0, r6
 8009fec:	f000 f80c 	bl	800a008 <__malloc_unlock>
 8009ff0:	e794      	b.n	8009f1c <_malloc_r+0x20>
 8009ff2:	6005      	str	r5, [r0, #0]
 8009ff4:	e7d6      	b.n	8009fa4 <_malloc_r+0xa8>
 8009ff6:	bf00      	nop
 8009ff8:	200022bc 	.word	0x200022bc

08009ffc <__malloc_lock>:
 8009ffc:	4801      	ldr	r0, [pc, #4]	@ (800a004 <__malloc_lock+0x8>)
 8009ffe:	f7ff bf0f 	b.w	8009e20 <__retarget_lock_acquire_recursive>
 800a002:	bf00      	nop
 800a004:	200022b4 	.word	0x200022b4

0800a008 <__malloc_unlock>:
 800a008:	4801      	ldr	r0, [pc, #4]	@ (800a010 <__malloc_unlock+0x8>)
 800a00a:	f7ff bf0a 	b.w	8009e22 <__retarget_lock_release_recursive>
 800a00e:	bf00      	nop
 800a010:	200022b4 	.word	0x200022b4

0800a014 <__ssputs_r>:
 800a014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a018:	688e      	ldr	r6, [r1, #8]
 800a01a:	461f      	mov	r7, r3
 800a01c:	42be      	cmp	r6, r7
 800a01e:	680b      	ldr	r3, [r1, #0]
 800a020:	4682      	mov	sl, r0
 800a022:	460c      	mov	r4, r1
 800a024:	4690      	mov	r8, r2
 800a026:	d82d      	bhi.n	800a084 <__ssputs_r+0x70>
 800a028:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a02c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a030:	d026      	beq.n	800a080 <__ssputs_r+0x6c>
 800a032:	6965      	ldr	r5, [r4, #20]
 800a034:	6909      	ldr	r1, [r1, #16]
 800a036:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a03a:	eba3 0901 	sub.w	r9, r3, r1
 800a03e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a042:	1c7b      	adds	r3, r7, #1
 800a044:	444b      	add	r3, r9
 800a046:	106d      	asrs	r5, r5, #1
 800a048:	429d      	cmp	r5, r3
 800a04a:	bf38      	it	cc
 800a04c:	461d      	movcc	r5, r3
 800a04e:	0553      	lsls	r3, r2, #21
 800a050:	d527      	bpl.n	800a0a2 <__ssputs_r+0x8e>
 800a052:	4629      	mov	r1, r5
 800a054:	f7ff ff52 	bl	8009efc <_malloc_r>
 800a058:	4606      	mov	r6, r0
 800a05a:	b360      	cbz	r0, 800a0b6 <__ssputs_r+0xa2>
 800a05c:	6921      	ldr	r1, [r4, #16]
 800a05e:	464a      	mov	r2, r9
 800a060:	f000 fae8 	bl	800a634 <memcpy>
 800a064:	89a3      	ldrh	r3, [r4, #12]
 800a066:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a06a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a06e:	81a3      	strh	r3, [r4, #12]
 800a070:	6126      	str	r6, [r4, #16]
 800a072:	6165      	str	r5, [r4, #20]
 800a074:	444e      	add	r6, r9
 800a076:	eba5 0509 	sub.w	r5, r5, r9
 800a07a:	6026      	str	r6, [r4, #0]
 800a07c:	60a5      	str	r5, [r4, #8]
 800a07e:	463e      	mov	r6, r7
 800a080:	42be      	cmp	r6, r7
 800a082:	d900      	bls.n	800a086 <__ssputs_r+0x72>
 800a084:	463e      	mov	r6, r7
 800a086:	6820      	ldr	r0, [r4, #0]
 800a088:	4632      	mov	r2, r6
 800a08a:	4641      	mov	r1, r8
 800a08c:	f000 faa8 	bl	800a5e0 <memmove>
 800a090:	68a3      	ldr	r3, [r4, #8]
 800a092:	1b9b      	subs	r3, r3, r6
 800a094:	60a3      	str	r3, [r4, #8]
 800a096:	6823      	ldr	r3, [r4, #0]
 800a098:	4433      	add	r3, r6
 800a09a:	6023      	str	r3, [r4, #0]
 800a09c:	2000      	movs	r0, #0
 800a09e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0a2:	462a      	mov	r2, r5
 800a0a4:	f000 fad4 	bl	800a650 <_realloc_r>
 800a0a8:	4606      	mov	r6, r0
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	d1e0      	bne.n	800a070 <__ssputs_r+0x5c>
 800a0ae:	6921      	ldr	r1, [r4, #16]
 800a0b0:	4650      	mov	r0, sl
 800a0b2:	f7ff feb7 	bl	8009e24 <_free_r>
 800a0b6:	230c      	movs	r3, #12
 800a0b8:	f8ca 3000 	str.w	r3, [sl]
 800a0bc:	89a3      	ldrh	r3, [r4, #12]
 800a0be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0c2:	81a3      	strh	r3, [r4, #12]
 800a0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c8:	e7e9      	b.n	800a09e <__ssputs_r+0x8a>
	...

0800a0cc <_svfiprintf_r>:
 800a0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d0:	4698      	mov	r8, r3
 800a0d2:	898b      	ldrh	r3, [r1, #12]
 800a0d4:	061b      	lsls	r3, r3, #24
 800a0d6:	b09d      	sub	sp, #116	@ 0x74
 800a0d8:	4607      	mov	r7, r0
 800a0da:	460d      	mov	r5, r1
 800a0dc:	4614      	mov	r4, r2
 800a0de:	d510      	bpl.n	800a102 <_svfiprintf_r+0x36>
 800a0e0:	690b      	ldr	r3, [r1, #16]
 800a0e2:	b973      	cbnz	r3, 800a102 <_svfiprintf_r+0x36>
 800a0e4:	2140      	movs	r1, #64	@ 0x40
 800a0e6:	f7ff ff09 	bl	8009efc <_malloc_r>
 800a0ea:	6028      	str	r0, [r5, #0]
 800a0ec:	6128      	str	r0, [r5, #16]
 800a0ee:	b930      	cbnz	r0, 800a0fe <_svfiprintf_r+0x32>
 800a0f0:	230c      	movs	r3, #12
 800a0f2:	603b      	str	r3, [r7, #0]
 800a0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f8:	b01d      	add	sp, #116	@ 0x74
 800a0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0fe:	2340      	movs	r3, #64	@ 0x40
 800a100:	616b      	str	r3, [r5, #20]
 800a102:	2300      	movs	r3, #0
 800a104:	9309      	str	r3, [sp, #36]	@ 0x24
 800a106:	2320      	movs	r3, #32
 800a108:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a10c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a110:	2330      	movs	r3, #48	@ 0x30
 800a112:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a2b0 <_svfiprintf_r+0x1e4>
 800a116:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a11a:	f04f 0901 	mov.w	r9, #1
 800a11e:	4623      	mov	r3, r4
 800a120:	469a      	mov	sl, r3
 800a122:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a126:	b10a      	cbz	r2, 800a12c <_svfiprintf_r+0x60>
 800a128:	2a25      	cmp	r2, #37	@ 0x25
 800a12a:	d1f9      	bne.n	800a120 <_svfiprintf_r+0x54>
 800a12c:	ebba 0b04 	subs.w	fp, sl, r4
 800a130:	d00b      	beq.n	800a14a <_svfiprintf_r+0x7e>
 800a132:	465b      	mov	r3, fp
 800a134:	4622      	mov	r2, r4
 800a136:	4629      	mov	r1, r5
 800a138:	4638      	mov	r0, r7
 800a13a:	f7ff ff6b 	bl	800a014 <__ssputs_r>
 800a13e:	3001      	adds	r0, #1
 800a140:	f000 80a7 	beq.w	800a292 <_svfiprintf_r+0x1c6>
 800a144:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a146:	445a      	add	r2, fp
 800a148:	9209      	str	r2, [sp, #36]	@ 0x24
 800a14a:	f89a 3000 	ldrb.w	r3, [sl]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	f000 809f 	beq.w	800a292 <_svfiprintf_r+0x1c6>
 800a154:	2300      	movs	r3, #0
 800a156:	f04f 32ff 	mov.w	r2, #4294967295
 800a15a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a15e:	f10a 0a01 	add.w	sl, sl, #1
 800a162:	9304      	str	r3, [sp, #16]
 800a164:	9307      	str	r3, [sp, #28]
 800a166:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a16a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a16c:	4654      	mov	r4, sl
 800a16e:	2205      	movs	r2, #5
 800a170:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a174:	484e      	ldr	r0, [pc, #312]	@ (800a2b0 <_svfiprintf_r+0x1e4>)
 800a176:	f7f6 f83b 	bl	80001f0 <memchr>
 800a17a:	9a04      	ldr	r2, [sp, #16]
 800a17c:	b9d8      	cbnz	r0, 800a1b6 <_svfiprintf_r+0xea>
 800a17e:	06d0      	lsls	r0, r2, #27
 800a180:	bf44      	itt	mi
 800a182:	2320      	movmi	r3, #32
 800a184:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a188:	0711      	lsls	r1, r2, #28
 800a18a:	bf44      	itt	mi
 800a18c:	232b      	movmi	r3, #43	@ 0x2b
 800a18e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a192:	f89a 3000 	ldrb.w	r3, [sl]
 800a196:	2b2a      	cmp	r3, #42	@ 0x2a
 800a198:	d015      	beq.n	800a1c6 <_svfiprintf_r+0xfa>
 800a19a:	9a07      	ldr	r2, [sp, #28]
 800a19c:	4654      	mov	r4, sl
 800a19e:	2000      	movs	r0, #0
 800a1a0:	f04f 0c0a 	mov.w	ip, #10
 800a1a4:	4621      	mov	r1, r4
 800a1a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1aa:	3b30      	subs	r3, #48	@ 0x30
 800a1ac:	2b09      	cmp	r3, #9
 800a1ae:	d94b      	bls.n	800a248 <_svfiprintf_r+0x17c>
 800a1b0:	b1b0      	cbz	r0, 800a1e0 <_svfiprintf_r+0x114>
 800a1b2:	9207      	str	r2, [sp, #28]
 800a1b4:	e014      	b.n	800a1e0 <_svfiprintf_r+0x114>
 800a1b6:	eba0 0308 	sub.w	r3, r0, r8
 800a1ba:	fa09 f303 	lsl.w	r3, r9, r3
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	9304      	str	r3, [sp, #16]
 800a1c2:	46a2      	mov	sl, r4
 800a1c4:	e7d2      	b.n	800a16c <_svfiprintf_r+0xa0>
 800a1c6:	9b03      	ldr	r3, [sp, #12]
 800a1c8:	1d19      	adds	r1, r3, #4
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	9103      	str	r1, [sp, #12]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	bfbb      	ittet	lt
 800a1d2:	425b      	neglt	r3, r3
 800a1d4:	f042 0202 	orrlt.w	r2, r2, #2
 800a1d8:	9307      	strge	r3, [sp, #28]
 800a1da:	9307      	strlt	r3, [sp, #28]
 800a1dc:	bfb8      	it	lt
 800a1de:	9204      	strlt	r2, [sp, #16]
 800a1e0:	7823      	ldrb	r3, [r4, #0]
 800a1e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a1e4:	d10a      	bne.n	800a1fc <_svfiprintf_r+0x130>
 800a1e6:	7863      	ldrb	r3, [r4, #1]
 800a1e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1ea:	d132      	bne.n	800a252 <_svfiprintf_r+0x186>
 800a1ec:	9b03      	ldr	r3, [sp, #12]
 800a1ee:	1d1a      	adds	r2, r3, #4
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	9203      	str	r2, [sp, #12]
 800a1f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a1f8:	3402      	adds	r4, #2
 800a1fa:	9305      	str	r3, [sp, #20]
 800a1fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a2c0 <_svfiprintf_r+0x1f4>
 800a200:	7821      	ldrb	r1, [r4, #0]
 800a202:	2203      	movs	r2, #3
 800a204:	4650      	mov	r0, sl
 800a206:	f7f5 fff3 	bl	80001f0 <memchr>
 800a20a:	b138      	cbz	r0, 800a21c <_svfiprintf_r+0x150>
 800a20c:	9b04      	ldr	r3, [sp, #16]
 800a20e:	eba0 000a 	sub.w	r0, r0, sl
 800a212:	2240      	movs	r2, #64	@ 0x40
 800a214:	4082      	lsls	r2, r0
 800a216:	4313      	orrs	r3, r2
 800a218:	3401      	adds	r4, #1
 800a21a:	9304      	str	r3, [sp, #16]
 800a21c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a220:	4824      	ldr	r0, [pc, #144]	@ (800a2b4 <_svfiprintf_r+0x1e8>)
 800a222:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a226:	2206      	movs	r2, #6
 800a228:	f7f5 ffe2 	bl	80001f0 <memchr>
 800a22c:	2800      	cmp	r0, #0
 800a22e:	d036      	beq.n	800a29e <_svfiprintf_r+0x1d2>
 800a230:	4b21      	ldr	r3, [pc, #132]	@ (800a2b8 <_svfiprintf_r+0x1ec>)
 800a232:	bb1b      	cbnz	r3, 800a27c <_svfiprintf_r+0x1b0>
 800a234:	9b03      	ldr	r3, [sp, #12]
 800a236:	3307      	adds	r3, #7
 800a238:	f023 0307 	bic.w	r3, r3, #7
 800a23c:	3308      	adds	r3, #8
 800a23e:	9303      	str	r3, [sp, #12]
 800a240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a242:	4433      	add	r3, r6
 800a244:	9309      	str	r3, [sp, #36]	@ 0x24
 800a246:	e76a      	b.n	800a11e <_svfiprintf_r+0x52>
 800a248:	fb0c 3202 	mla	r2, ip, r2, r3
 800a24c:	460c      	mov	r4, r1
 800a24e:	2001      	movs	r0, #1
 800a250:	e7a8      	b.n	800a1a4 <_svfiprintf_r+0xd8>
 800a252:	2300      	movs	r3, #0
 800a254:	3401      	adds	r4, #1
 800a256:	9305      	str	r3, [sp, #20]
 800a258:	4619      	mov	r1, r3
 800a25a:	f04f 0c0a 	mov.w	ip, #10
 800a25e:	4620      	mov	r0, r4
 800a260:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a264:	3a30      	subs	r2, #48	@ 0x30
 800a266:	2a09      	cmp	r2, #9
 800a268:	d903      	bls.n	800a272 <_svfiprintf_r+0x1a6>
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d0c6      	beq.n	800a1fc <_svfiprintf_r+0x130>
 800a26e:	9105      	str	r1, [sp, #20]
 800a270:	e7c4      	b.n	800a1fc <_svfiprintf_r+0x130>
 800a272:	fb0c 2101 	mla	r1, ip, r1, r2
 800a276:	4604      	mov	r4, r0
 800a278:	2301      	movs	r3, #1
 800a27a:	e7f0      	b.n	800a25e <_svfiprintf_r+0x192>
 800a27c:	ab03      	add	r3, sp, #12
 800a27e:	9300      	str	r3, [sp, #0]
 800a280:	462a      	mov	r2, r5
 800a282:	4b0e      	ldr	r3, [pc, #56]	@ (800a2bc <_svfiprintf_r+0x1f0>)
 800a284:	a904      	add	r1, sp, #16
 800a286:	4638      	mov	r0, r7
 800a288:	f3af 8000 	nop.w
 800a28c:	1c42      	adds	r2, r0, #1
 800a28e:	4606      	mov	r6, r0
 800a290:	d1d6      	bne.n	800a240 <_svfiprintf_r+0x174>
 800a292:	89ab      	ldrh	r3, [r5, #12]
 800a294:	065b      	lsls	r3, r3, #25
 800a296:	f53f af2d 	bmi.w	800a0f4 <_svfiprintf_r+0x28>
 800a29a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a29c:	e72c      	b.n	800a0f8 <_svfiprintf_r+0x2c>
 800a29e:	ab03      	add	r3, sp, #12
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	462a      	mov	r2, r5
 800a2a4:	4b05      	ldr	r3, [pc, #20]	@ (800a2bc <_svfiprintf_r+0x1f0>)
 800a2a6:	a904      	add	r1, sp, #16
 800a2a8:	4638      	mov	r0, r7
 800a2aa:	f000 f879 	bl	800a3a0 <_printf_i>
 800a2ae:	e7ed      	b.n	800a28c <_svfiprintf_r+0x1c0>
 800a2b0:	0800b690 	.word	0x0800b690
 800a2b4:	0800b69a 	.word	0x0800b69a
 800a2b8:	00000000 	.word	0x00000000
 800a2bc:	0800a015 	.word	0x0800a015
 800a2c0:	0800b696 	.word	0x0800b696

0800a2c4 <_printf_common>:
 800a2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2c8:	4616      	mov	r6, r2
 800a2ca:	4698      	mov	r8, r3
 800a2cc:	688a      	ldr	r2, [r1, #8]
 800a2ce:	690b      	ldr	r3, [r1, #16]
 800a2d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	bfb8      	it	lt
 800a2d8:	4613      	movlt	r3, r2
 800a2da:	6033      	str	r3, [r6, #0]
 800a2dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a2e0:	4607      	mov	r7, r0
 800a2e2:	460c      	mov	r4, r1
 800a2e4:	b10a      	cbz	r2, 800a2ea <_printf_common+0x26>
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	6033      	str	r3, [r6, #0]
 800a2ea:	6823      	ldr	r3, [r4, #0]
 800a2ec:	0699      	lsls	r1, r3, #26
 800a2ee:	bf42      	ittt	mi
 800a2f0:	6833      	ldrmi	r3, [r6, #0]
 800a2f2:	3302      	addmi	r3, #2
 800a2f4:	6033      	strmi	r3, [r6, #0]
 800a2f6:	6825      	ldr	r5, [r4, #0]
 800a2f8:	f015 0506 	ands.w	r5, r5, #6
 800a2fc:	d106      	bne.n	800a30c <_printf_common+0x48>
 800a2fe:	f104 0a19 	add.w	sl, r4, #25
 800a302:	68e3      	ldr	r3, [r4, #12]
 800a304:	6832      	ldr	r2, [r6, #0]
 800a306:	1a9b      	subs	r3, r3, r2
 800a308:	42ab      	cmp	r3, r5
 800a30a:	dc26      	bgt.n	800a35a <_printf_common+0x96>
 800a30c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a310:	6822      	ldr	r2, [r4, #0]
 800a312:	3b00      	subs	r3, #0
 800a314:	bf18      	it	ne
 800a316:	2301      	movne	r3, #1
 800a318:	0692      	lsls	r2, r2, #26
 800a31a:	d42b      	bmi.n	800a374 <_printf_common+0xb0>
 800a31c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a320:	4641      	mov	r1, r8
 800a322:	4638      	mov	r0, r7
 800a324:	47c8      	blx	r9
 800a326:	3001      	adds	r0, #1
 800a328:	d01e      	beq.n	800a368 <_printf_common+0xa4>
 800a32a:	6823      	ldr	r3, [r4, #0]
 800a32c:	6922      	ldr	r2, [r4, #16]
 800a32e:	f003 0306 	and.w	r3, r3, #6
 800a332:	2b04      	cmp	r3, #4
 800a334:	bf02      	ittt	eq
 800a336:	68e5      	ldreq	r5, [r4, #12]
 800a338:	6833      	ldreq	r3, [r6, #0]
 800a33a:	1aed      	subeq	r5, r5, r3
 800a33c:	68a3      	ldr	r3, [r4, #8]
 800a33e:	bf0c      	ite	eq
 800a340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a344:	2500      	movne	r5, #0
 800a346:	4293      	cmp	r3, r2
 800a348:	bfc4      	itt	gt
 800a34a:	1a9b      	subgt	r3, r3, r2
 800a34c:	18ed      	addgt	r5, r5, r3
 800a34e:	2600      	movs	r6, #0
 800a350:	341a      	adds	r4, #26
 800a352:	42b5      	cmp	r5, r6
 800a354:	d11a      	bne.n	800a38c <_printf_common+0xc8>
 800a356:	2000      	movs	r0, #0
 800a358:	e008      	b.n	800a36c <_printf_common+0xa8>
 800a35a:	2301      	movs	r3, #1
 800a35c:	4652      	mov	r2, sl
 800a35e:	4641      	mov	r1, r8
 800a360:	4638      	mov	r0, r7
 800a362:	47c8      	blx	r9
 800a364:	3001      	adds	r0, #1
 800a366:	d103      	bne.n	800a370 <_printf_common+0xac>
 800a368:	f04f 30ff 	mov.w	r0, #4294967295
 800a36c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a370:	3501      	adds	r5, #1
 800a372:	e7c6      	b.n	800a302 <_printf_common+0x3e>
 800a374:	18e1      	adds	r1, r4, r3
 800a376:	1c5a      	adds	r2, r3, #1
 800a378:	2030      	movs	r0, #48	@ 0x30
 800a37a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a37e:	4422      	add	r2, r4
 800a380:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a384:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a388:	3302      	adds	r3, #2
 800a38a:	e7c7      	b.n	800a31c <_printf_common+0x58>
 800a38c:	2301      	movs	r3, #1
 800a38e:	4622      	mov	r2, r4
 800a390:	4641      	mov	r1, r8
 800a392:	4638      	mov	r0, r7
 800a394:	47c8      	blx	r9
 800a396:	3001      	adds	r0, #1
 800a398:	d0e6      	beq.n	800a368 <_printf_common+0xa4>
 800a39a:	3601      	adds	r6, #1
 800a39c:	e7d9      	b.n	800a352 <_printf_common+0x8e>
	...

0800a3a0 <_printf_i>:
 800a3a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3a4:	7e0f      	ldrb	r7, [r1, #24]
 800a3a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a3a8:	2f78      	cmp	r7, #120	@ 0x78
 800a3aa:	4691      	mov	r9, r2
 800a3ac:	4680      	mov	r8, r0
 800a3ae:	460c      	mov	r4, r1
 800a3b0:	469a      	mov	sl, r3
 800a3b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a3b6:	d807      	bhi.n	800a3c8 <_printf_i+0x28>
 800a3b8:	2f62      	cmp	r7, #98	@ 0x62
 800a3ba:	d80a      	bhi.n	800a3d2 <_printf_i+0x32>
 800a3bc:	2f00      	cmp	r7, #0
 800a3be:	f000 80d2 	beq.w	800a566 <_printf_i+0x1c6>
 800a3c2:	2f58      	cmp	r7, #88	@ 0x58
 800a3c4:	f000 80b9 	beq.w	800a53a <_printf_i+0x19a>
 800a3c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a3cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a3d0:	e03a      	b.n	800a448 <_printf_i+0xa8>
 800a3d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a3d6:	2b15      	cmp	r3, #21
 800a3d8:	d8f6      	bhi.n	800a3c8 <_printf_i+0x28>
 800a3da:	a101      	add	r1, pc, #4	@ (adr r1, 800a3e0 <_printf_i+0x40>)
 800a3dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a3e0:	0800a439 	.word	0x0800a439
 800a3e4:	0800a44d 	.word	0x0800a44d
 800a3e8:	0800a3c9 	.word	0x0800a3c9
 800a3ec:	0800a3c9 	.word	0x0800a3c9
 800a3f0:	0800a3c9 	.word	0x0800a3c9
 800a3f4:	0800a3c9 	.word	0x0800a3c9
 800a3f8:	0800a44d 	.word	0x0800a44d
 800a3fc:	0800a3c9 	.word	0x0800a3c9
 800a400:	0800a3c9 	.word	0x0800a3c9
 800a404:	0800a3c9 	.word	0x0800a3c9
 800a408:	0800a3c9 	.word	0x0800a3c9
 800a40c:	0800a54d 	.word	0x0800a54d
 800a410:	0800a477 	.word	0x0800a477
 800a414:	0800a507 	.word	0x0800a507
 800a418:	0800a3c9 	.word	0x0800a3c9
 800a41c:	0800a3c9 	.word	0x0800a3c9
 800a420:	0800a56f 	.word	0x0800a56f
 800a424:	0800a3c9 	.word	0x0800a3c9
 800a428:	0800a477 	.word	0x0800a477
 800a42c:	0800a3c9 	.word	0x0800a3c9
 800a430:	0800a3c9 	.word	0x0800a3c9
 800a434:	0800a50f 	.word	0x0800a50f
 800a438:	6833      	ldr	r3, [r6, #0]
 800a43a:	1d1a      	adds	r2, r3, #4
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	6032      	str	r2, [r6, #0]
 800a440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a444:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a448:	2301      	movs	r3, #1
 800a44a:	e09d      	b.n	800a588 <_printf_i+0x1e8>
 800a44c:	6833      	ldr	r3, [r6, #0]
 800a44e:	6820      	ldr	r0, [r4, #0]
 800a450:	1d19      	adds	r1, r3, #4
 800a452:	6031      	str	r1, [r6, #0]
 800a454:	0606      	lsls	r6, r0, #24
 800a456:	d501      	bpl.n	800a45c <_printf_i+0xbc>
 800a458:	681d      	ldr	r5, [r3, #0]
 800a45a:	e003      	b.n	800a464 <_printf_i+0xc4>
 800a45c:	0645      	lsls	r5, r0, #25
 800a45e:	d5fb      	bpl.n	800a458 <_printf_i+0xb8>
 800a460:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a464:	2d00      	cmp	r5, #0
 800a466:	da03      	bge.n	800a470 <_printf_i+0xd0>
 800a468:	232d      	movs	r3, #45	@ 0x2d
 800a46a:	426d      	negs	r5, r5
 800a46c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a470:	4859      	ldr	r0, [pc, #356]	@ (800a5d8 <_printf_i+0x238>)
 800a472:	230a      	movs	r3, #10
 800a474:	e011      	b.n	800a49a <_printf_i+0xfa>
 800a476:	6821      	ldr	r1, [r4, #0]
 800a478:	6833      	ldr	r3, [r6, #0]
 800a47a:	0608      	lsls	r0, r1, #24
 800a47c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a480:	d402      	bmi.n	800a488 <_printf_i+0xe8>
 800a482:	0649      	lsls	r1, r1, #25
 800a484:	bf48      	it	mi
 800a486:	b2ad      	uxthmi	r5, r5
 800a488:	2f6f      	cmp	r7, #111	@ 0x6f
 800a48a:	4853      	ldr	r0, [pc, #332]	@ (800a5d8 <_printf_i+0x238>)
 800a48c:	6033      	str	r3, [r6, #0]
 800a48e:	bf14      	ite	ne
 800a490:	230a      	movne	r3, #10
 800a492:	2308      	moveq	r3, #8
 800a494:	2100      	movs	r1, #0
 800a496:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a49a:	6866      	ldr	r6, [r4, #4]
 800a49c:	60a6      	str	r6, [r4, #8]
 800a49e:	2e00      	cmp	r6, #0
 800a4a0:	bfa2      	ittt	ge
 800a4a2:	6821      	ldrge	r1, [r4, #0]
 800a4a4:	f021 0104 	bicge.w	r1, r1, #4
 800a4a8:	6021      	strge	r1, [r4, #0]
 800a4aa:	b90d      	cbnz	r5, 800a4b0 <_printf_i+0x110>
 800a4ac:	2e00      	cmp	r6, #0
 800a4ae:	d04b      	beq.n	800a548 <_printf_i+0x1a8>
 800a4b0:	4616      	mov	r6, r2
 800a4b2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a4b6:	fb03 5711 	mls	r7, r3, r1, r5
 800a4ba:	5dc7      	ldrb	r7, [r0, r7]
 800a4bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a4c0:	462f      	mov	r7, r5
 800a4c2:	42bb      	cmp	r3, r7
 800a4c4:	460d      	mov	r5, r1
 800a4c6:	d9f4      	bls.n	800a4b2 <_printf_i+0x112>
 800a4c8:	2b08      	cmp	r3, #8
 800a4ca:	d10b      	bne.n	800a4e4 <_printf_i+0x144>
 800a4cc:	6823      	ldr	r3, [r4, #0]
 800a4ce:	07df      	lsls	r7, r3, #31
 800a4d0:	d508      	bpl.n	800a4e4 <_printf_i+0x144>
 800a4d2:	6923      	ldr	r3, [r4, #16]
 800a4d4:	6861      	ldr	r1, [r4, #4]
 800a4d6:	4299      	cmp	r1, r3
 800a4d8:	bfde      	ittt	le
 800a4da:	2330      	movle	r3, #48	@ 0x30
 800a4dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a4e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a4e4:	1b92      	subs	r2, r2, r6
 800a4e6:	6122      	str	r2, [r4, #16]
 800a4e8:	f8cd a000 	str.w	sl, [sp]
 800a4ec:	464b      	mov	r3, r9
 800a4ee:	aa03      	add	r2, sp, #12
 800a4f0:	4621      	mov	r1, r4
 800a4f2:	4640      	mov	r0, r8
 800a4f4:	f7ff fee6 	bl	800a2c4 <_printf_common>
 800a4f8:	3001      	adds	r0, #1
 800a4fa:	d14a      	bne.n	800a592 <_printf_i+0x1f2>
 800a4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a500:	b004      	add	sp, #16
 800a502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a506:	6823      	ldr	r3, [r4, #0]
 800a508:	f043 0320 	orr.w	r3, r3, #32
 800a50c:	6023      	str	r3, [r4, #0]
 800a50e:	4833      	ldr	r0, [pc, #204]	@ (800a5dc <_printf_i+0x23c>)
 800a510:	2778      	movs	r7, #120	@ 0x78
 800a512:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a516:	6823      	ldr	r3, [r4, #0]
 800a518:	6831      	ldr	r1, [r6, #0]
 800a51a:	061f      	lsls	r7, r3, #24
 800a51c:	f851 5b04 	ldr.w	r5, [r1], #4
 800a520:	d402      	bmi.n	800a528 <_printf_i+0x188>
 800a522:	065f      	lsls	r7, r3, #25
 800a524:	bf48      	it	mi
 800a526:	b2ad      	uxthmi	r5, r5
 800a528:	6031      	str	r1, [r6, #0]
 800a52a:	07d9      	lsls	r1, r3, #31
 800a52c:	bf44      	itt	mi
 800a52e:	f043 0320 	orrmi.w	r3, r3, #32
 800a532:	6023      	strmi	r3, [r4, #0]
 800a534:	b11d      	cbz	r5, 800a53e <_printf_i+0x19e>
 800a536:	2310      	movs	r3, #16
 800a538:	e7ac      	b.n	800a494 <_printf_i+0xf4>
 800a53a:	4827      	ldr	r0, [pc, #156]	@ (800a5d8 <_printf_i+0x238>)
 800a53c:	e7e9      	b.n	800a512 <_printf_i+0x172>
 800a53e:	6823      	ldr	r3, [r4, #0]
 800a540:	f023 0320 	bic.w	r3, r3, #32
 800a544:	6023      	str	r3, [r4, #0]
 800a546:	e7f6      	b.n	800a536 <_printf_i+0x196>
 800a548:	4616      	mov	r6, r2
 800a54a:	e7bd      	b.n	800a4c8 <_printf_i+0x128>
 800a54c:	6833      	ldr	r3, [r6, #0]
 800a54e:	6825      	ldr	r5, [r4, #0]
 800a550:	6961      	ldr	r1, [r4, #20]
 800a552:	1d18      	adds	r0, r3, #4
 800a554:	6030      	str	r0, [r6, #0]
 800a556:	062e      	lsls	r6, r5, #24
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	d501      	bpl.n	800a560 <_printf_i+0x1c0>
 800a55c:	6019      	str	r1, [r3, #0]
 800a55e:	e002      	b.n	800a566 <_printf_i+0x1c6>
 800a560:	0668      	lsls	r0, r5, #25
 800a562:	d5fb      	bpl.n	800a55c <_printf_i+0x1bc>
 800a564:	8019      	strh	r1, [r3, #0]
 800a566:	2300      	movs	r3, #0
 800a568:	6123      	str	r3, [r4, #16]
 800a56a:	4616      	mov	r6, r2
 800a56c:	e7bc      	b.n	800a4e8 <_printf_i+0x148>
 800a56e:	6833      	ldr	r3, [r6, #0]
 800a570:	1d1a      	adds	r2, r3, #4
 800a572:	6032      	str	r2, [r6, #0]
 800a574:	681e      	ldr	r6, [r3, #0]
 800a576:	6862      	ldr	r2, [r4, #4]
 800a578:	2100      	movs	r1, #0
 800a57a:	4630      	mov	r0, r6
 800a57c:	f7f5 fe38 	bl	80001f0 <memchr>
 800a580:	b108      	cbz	r0, 800a586 <_printf_i+0x1e6>
 800a582:	1b80      	subs	r0, r0, r6
 800a584:	6060      	str	r0, [r4, #4]
 800a586:	6863      	ldr	r3, [r4, #4]
 800a588:	6123      	str	r3, [r4, #16]
 800a58a:	2300      	movs	r3, #0
 800a58c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a590:	e7aa      	b.n	800a4e8 <_printf_i+0x148>
 800a592:	6923      	ldr	r3, [r4, #16]
 800a594:	4632      	mov	r2, r6
 800a596:	4649      	mov	r1, r9
 800a598:	4640      	mov	r0, r8
 800a59a:	47d0      	blx	sl
 800a59c:	3001      	adds	r0, #1
 800a59e:	d0ad      	beq.n	800a4fc <_printf_i+0x15c>
 800a5a0:	6823      	ldr	r3, [r4, #0]
 800a5a2:	079b      	lsls	r3, r3, #30
 800a5a4:	d413      	bmi.n	800a5ce <_printf_i+0x22e>
 800a5a6:	68e0      	ldr	r0, [r4, #12]
 800a5a8:	9b03      	ldr	r3, [sp, #12]
 800a5aa:	4298      	cmp	r0, r3
 800a5ac:	bfb8      	it	lt
 800a5ae:	4618      	movlt	r0, r3
 800a5b0:	e7a6      	b.n	800a500 <_printf_i+0x160>
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	4632      	mov	r2, r6
 800a5b6:	4649      	mov	r1, r9
 800a5b8:	4640      	mov	r0, r8
 800a5ba:	47d0      	blx	sl
 800a5bc:	3001      	adds	r0, #1
 800a5be:	d09d      	beq.n	800a4fc <_printf_i+0x15c>
 800a5c0:	3501      	adds	r5, #1
 800a5c2:	68e3      	ldr	r3, [r4, #12]
 800a5c4:	9903      	ldr	r1, [sp, #12]
 800a5c6:	1a5b      	subs	r3, r3, r1
 800a5c8:	42ab      	cmp	r3, r5
 800a5ca:	dcf2      	bgt.n	800a5b2 <_printf_i+0x212>
 800a5cc:	e7eb      	b.n	800a5a6 <_printf_i+0x206>
 800a5ce:	2500      	movs	r5, #0
 800a5d0:	f104 0619 	add.w	r6, r4, #25
 800a5d4:	e7f5      	b.n	800a5c2 <_printf_i+0x222>
 800a5d6:	bf00      	nop
 800a5d8:	0800b6a1 	.word	0x0800b6a1
 800a5dc:	0800b6b2 	.word	0x0800b6b2

0800a5e0 <memmove>:
 800a5e0:	4288      	cmp	r0, r1
 800a5e2:	b510      	push	{r4, lr}
 800a5e4:	eb01 0402 	add.w	r4, r1, r2
 800a5e8:	d902      	bls.n	800a5f0 <memmove+0x10>
 800a5ea:	4284      	cmp	r4, r0
 800a5ec:	4623      	mov	r3, r4
 800a5ee:	d807      	bhi.n	800a600 <memmove+0x20>
 800a5f0:	1e43      	subs	r3, r0, #1
 800a5f2:	42a1      	cmp	r1, r4
 800a5f4:	d008      	beq.n	800a608 <memmove+0x28>
 800a5f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5fe:	e7f8      	b.n	800a5f2 <memmove+0x12>
 800a600:	4402      	add	r2, r0
 800a602:	4601      	mov	r1, r0
 800a604:	428a      	cmp	r2, r1
 800a606:	d100      	bne.n	800a60a <memmove+0x2a>
 800a608:	bd10      	pop	{r4, pc}
 800a60a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a60e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a612:	e7f7      	b.n	800a604 <memmove+0x24>

0800a614 <_sbrk_r>:
 800a614:	b538      	push	{r3, r4, r5, lr}
 800a616:	4d06      	ldr	r5, [pc, #24]	@ (800a630 <_sbrk_r+0x1c>)
 800a618:	2300      	movs	r3, #0
 800a61a:	4604      	mov	r4, r0
 800a61c:	4608      	mov	r0, r1
 800a61e:	602b      	str	r3, [r5, #0]
 800a620:	f7f7 fb1c 	bl	8001c5c <_sbrk>
 800a624:	1c43      	adds	r3, r0, #1
 800a626:	d102      	bne.n	800a62e <_sbrk_r+0x1a>
 800a628:	682b      	ldr	r3, [r5, #0]
 800a62a:	b103      	cbz	r3, 800a62e <_sbrk_r+0x1a>
 800a62c:	6023      	str	r3, [r4, #0]
 800a62e:	bd38      	pop	{r3, r4, r5, pc}
 800a630:	200022b0 	.word	0x200022b0

0800a634 <memcpy>:
 800a634:	440a      	add	r2, r1
 800a636:	4291      	cmp	r1, r2
 800a638:	f100 33ff 	add.w	r3, r0, #4294967295
 800a63c:	d100      	bne.n	800a640 <memcpy+0xc>
 800a63e:	4770      	bx	lr
 800a640:	b510      	push	{r4, lr}
 800a642:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a646:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a64a:	4291      	cmp	r1, r2
 800a64c:	d1f9      	bne.n	800a642 <memcpy+0xe>
 800a64e:	bd10      	pop	{r4, pc}

0800a650 <_realloc_r>:
 800a650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a654:	4680      	mov	r8, r0
 800a656:	4615      	mov	r5, r2
 800a658:	460c      	mov	r4, r1
 800a65a:	b921      	cbnz	r1, 800a666 <_realloc_r+0x16>
 800a65c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a660:	4611      	mov	r1, r2
 800a662:	f7ff bc4b 	b.w	8009efc <_malloc_r>
 800a666:	b92a      	cbnz	r2, 800a674 <_realloc_r+0x24>
 800a668:	f7ff fbdc 	bl	8009e24 <_free_r>
 800a66c:	2400      	movs	r4, #0
 800a66e:	4620      	mov	r0, r4
 800a670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a674:	f000 f81a 	bl	800a6ac <_malloc_usable_size_r>
 800a678:	4285      	cmp	r5, r0
 800a67a:	4606      	mov	r6, r0
 800a67c:	d802      	bhi.n	800a684 <_realloc_r+0x34>
 800a67e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a682:	d8f4      	bhi.n	800a66e <_realloc_r+0x1e>
 800a684:	4629      	mov	r1, r5
 800a686:	4640      	mov	r0, r8
 800a688:	f7ff fc38 	bl	8009efc <_malloc_r>
 800a68c:	4607      	mov	r7, r0
 800a68e:	2800      	cmp	r0, #0
 800a690:	d0ec      	beq.n	800a66c <_realloc_r+0x1c>
 800a692:	42b5      	cmp	r5, r6
 800a694:	462a      	mov	r2, r5
 800a696:	4621      	mov	r1, r4
 800a698:	bf28      	it	cs
 800a69a:	4632      	movcs	r2, r6
 800a69c:	f7ff ffca 	bl	800a634 <memcpy>
 800a6a0:	4621      	mov	r1, r4
 800a6a2:	4640      	mov	r0, r8
 800a6a4:	f7ff fbbe 	bl	8009e24 <_free_r>
 800a6a8:	463c      	mov	r4, r7
 800a6aa:	e7e0      	b.n	800a66e <_realloc_r+0x1e>

0800a6ac <_malloc_usable_size_r>:
 800a6ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6b0:	1f18      	subs	r0, r3, #4
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	bfbc      	itt	lt
 800a6b6:	580b      	ldrlt	r3, [r1, r0]
 800a6b8:	18c0      	addlt	r0, r0, r3
 800a6ba:	4770      	bx	lr

0800a6bc <pow>:
 800a6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6be:	ed2d 8b02 	vpush	{d8}
 800a6c2:	eeb0 8a40 	vmov.f32	s16, s0
 800a6c6:	eef0 8a60 	vmov.f32	s17, s1
 800a6ca:	ec55 4b11 	vmov	r4, r5, d1
 800a6ce:	f000 f8b7 	bl	800a840 <__ieee754_pow>
 800a6d2:	4622      	mov	r2, r4
 800a6d4:	462b      	mov	r3, r5
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	4629      	mov	r1, r5
 800a6da:	ec57 6b10 	vmov	r6, r7, d0
 800a6de:	f7f6 fa2d 	bl	8000b3c <__aeabi_dcmpun>
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	d13b      	bne.n	800a75e <pow+0xa2>
 800a6e6:	ec51 0b18 	vmov	r0, r1, d8
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	f7f6 f9f3 	bl	8000ad8 <__aeabi_dcmpeq>
 800a6f2:	b1b8      	cbz	r0, 800a724 <pow+0x68>
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	f7f6 f9ec 	bl	8000ad8 <__aeabi_dcmpeq>
 800a700:	2800      	cmp	r0, #0
 800a702:	d146      	bne.n	800a792 <pow+0xd6>
 800a704:	ec45 4b10 	vmov	d0, r4, r5
 800a708:	f000 f848 	bl	800a79c <finite>
 800a70c:	b338      	cbz	r0, 800a75e <pow+0xa2>
 800a70e:	2200      	movs	r2, #0
 800a710:	2300      	movs	r3, #0
 800a712:	4620      	mov	r0, r4
 800a714:	4629      	mov	r1, r5
 800a716:	f7f6 f9e9 	bl	8000aec <__aeabi_dcmplt>
 800a71a:	b300      	cbz	r0, 800a75e <pow+0xa2>
 800a71c:	f7ff fb56 	bl	8009dcc <__errno>
 800a720:	2322      	movs	r3, #34	@ 0x22
 800a722:	e01b      	b.n	800a75c <pow+0xa0>
 800a724:	ec47 6b10 	vmov	d0, r6, r7
 800a728:	f000 f838 	bl	800a79c <finite>
 800a72c:	b9e0      	cbnz	r0, 800a768 <pow+0xac>
 800a72e:	eeb0 0a48 	vmov.f32	s0, s16
 800a732:	eef0 0a68 	vmov.f32	s1, s17
 800a736:	f000 f831 	bl	800a79c <finite>
 800a73a:	b1a8      	cbz	r0, 800a768 <pow+0xac>
 800a73c:	ec45 4b10 	vmov	d0, r4, r5
 800a740:	f000 f82c 	bl	800a79c <finite>
 800a744:	b180      	cbz	r0, 800a768 <pow+0xac>
 800a746:	4632      	mov	r2, r6
 800a748:	463b      	mov	r3, r7
 800a74a:	4630      	mov	r0, r6
 800a74c:	4639      	mov	r1, r7
 800a74e:	f7f6 f9f5 	bl	8000b3c <__aeabi_dcmpun>
 800a752:	2800      	cmp	r0, #0
 800a754:	d0e2      	beq.n	800a71c <pow+0x60>
 800a756:	f7ff fb39 	bl	8009dcc <__errno>
 800a75a:	2321      	movs	r3, #33	@ 0x21
 800a75c:	6003      	str	r3, [r0, #0]
 800a75e:	ecbd 8b02 	vpop	{d8}
 800a762:	ec47 6b10 	vmov	d0, r6, r7
 800a766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a768:	2200      	movs	r2, #0
 800a76a:	2300      	movs	r3, #0
 800a76c:	4630      	mov	r0, r6
 800a76e:	4639      	mov	r1, r7
 800a770:	f7f6 f9b2 	bl	8000ad8 <__aeabi_dcmpeq>
 800a774:	2800      	cmp	r0, #0
 800a776:	d0f2      	beq.n	800a75e <pow+0xa2>
 800a778:	eeb0 0a48 	vmov.f32	s0, s16
 800a77c:	eef0 0a68 	vmov.f32	s1, s17
 800a780:	f000 f80c 	bl	800a79c <finite>
 800a784:	2800      	cmp	r0, #0
 800a786:	d0ea      	beq.n	800a75e <pow+0xa2>
 800a788:	ec45 4b10 	vmov	d0, r4, r5
 800a78c:	f000 f806 	bl	800a79c <finite>
 800a790:	e7c3      	b.n	800a71a <pow+0x5e>
 800a792:	4f01      	ldr	r7, [pc, #4]	@ (800a798 <pow+0xdc>)
 800a794:	2600      	movs	r6, #0
 800a796:	e7e2      	b.n	800a75e <pow+0xa2>
 800a798:	3ff00000 	.word	0x3ff00000

0800a79c <finite>:
 800a79c:	b082      	sub	sp, #8
 800a79e:	ed8d 0b00 	vstr	d0, [sp]
 800a7a2:	9801      	ldr	r0, [sp, #4]
 800a7a4:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800a7a8:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800a7ac:	0fc0      	lsrs	r0, r0, #31
 800a7ae:	b002      	add	sp, #8
 800a7b0:	4770      	bx	lr
	...

0800a7b4 <round>:
 800a7b4:	ec51 0b10 	vmov	r0, r1, d0
 800a7b8:	b570      	push	{r4, r5, r6, lr}
 800a7ba:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800a7be:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800a7c2:	2a13      	cmp	r2, #19
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	4605      	mov	r5, r0
 800a7c8:	dc1b      	bgt.n	800a802 <round+0x4e>
 800a7ca:	2a00      	cmp	r2, #0
 800a7cc:	da0b      	bge.n	800a7e6 <round+0x32>
 800a7ce:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800a7d2:	3201      	adds	r2, #1
 800a7d4:	bf04      	itt	eq
 800a7d6:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800a7da:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800a7de:	2200      	movs	r2, #0
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	4610      	mov	r0, r2
 800a7e4:	e015      	b.n	800a812 <round+0x5e>
 800a7e6:	4c15      	ldr	r4, [pc, #84]	@ (800a83c <round+0x88>)
 800a7e8:	4114      	asrs	r4, r2
 800a7ea:	ea04 0601 	and.w	r6, r4, r1
 800a7ee:	4306      	orrs	r6, r0
 800a7f0:	d00f      	beq.n	800a812 <round+0x5e>
 800a7f2:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800a7f6:	fa41 f202 	asr.w	r2, r1, r2
 800a7fa:	4413      	add	r3, r2
 800a7fc:	ea23 0304 	bic.w	r3, r3, r4
 800a800:	e7ed      	b.n	800a7de <round+0x2a>
 800a802:	2a33      	cmp	r2, #51	@ 0x33
 800a804:	dd08      	ble.n	800a818 <round+0x64>
 800a806:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800a80a:	d102      	bne.n	800a812 <round+0x5e>
 800a80c:	4602      	mov	r2, r0
 800a80e:	f7f5 fd45 	bl	800029c <__adddf3>
 800a812:	ec41 0b10 	vmov	d0, r0, r1
 800a816:	bd70      	pop	{r4, r5, r6, pc}
 800a818:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800a81c:	f04f 34ff 	mov.w	r4, #4294967295
 800a820:	40f4      	lsrs	r4, r6
 800a822:	4204      	tst	r4, r0
 800a824:	d0f5      	beq.n	800a812 <round+0x5e>
 800a826:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800a82a:	2201      	movs	r2, #1
 800a82c:	408a      	lsls	r2, r1
 800a82e:	1952      	adds	r2, r2, r5
 800a830:	bf28      	it	cs
 800a832:	3301      	addcs	r3, #1
 800a834:	ea22 0204 	bic.w	r2, r2, r4
 800a838:	e7d2      	b.n	800a7e0 <round+0x2c>
 800a83a:	bf00      	nop
 800a83c:	000fffff 	.word	0x000fffff

0800a840 <__ieee754_pow>:
 800a840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a844:	b091      	sub	sp, #68	@ 0x44
 800a846:	ed8d 1b00 	vstr	d1, [sp]
 800a84a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800a84e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800a852:	ea5a 0001 	orrs.w	r0, sl, r1
 800a856:	ec57 6b10 	vmov	r6, r7, d0
 800a85a:	d113      	bne.n	800a884 <__ieee754_pow+0x44>
 800a85c:	19b3      	adds	r3, r6, r6
 800a85e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800a862:	4152      	adcs	r2, r2
 800a864:	4298      	cmp	r0, r3
 800a866:	4b98      	ldr	r3, [pc, #608]	@ (800aac8 <__ieee754_pow+0x288>)
 800a868:	4193      	sbcs	r3, r2
 800a86a:	f080 84ea 	bcs.w	800b242 <__ieee754_pow+0xa02>
 800a86e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a872:	4630      	mov	r0, r6
 800a874:	4639      	mov	r1, r7
 800a876:	f7f5 fd11 	bl	800029c <__adddf3>
 800a87a:	ec41 0b10 	vmov	d0, r0, r1
 800a87e:	b011      	add	sp, #68	@ 0x44
 800a880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a884:	4a91      	ldr	r2, [pc, #580]	@ (800aacc <__ieee754_pow+0x28c>)
 800a886:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a88a:	4590      	cmp	r8, r2
 800a88c:	463d      	mov	r5, r7
 800a88e:	4633      	mov	r3, r6
 800a890:	d806      	bhi.n	800a8a0 <__ieee754_pow+0x60>
 800a892:	d101      	bne.n	800a898 <__ieee754_pow+0x58>
 800a894:	2e00      	cmp	r6, #0
 800a896:	d1ea      	bne.n	800a86e <__ieee754_pow+0x2e>
 800a898:	4592      	cmp	sl, r2
 800a89a:	d801      	bhi.n	800a8a0 <__ieee754_pow+0x60>
 800a89c:	d10e      	bne.n	800a8bc <__ieee754_pow+0x7c>
 800a89e:	b169      	cbz	r1, 800a8bc <__ieee754_pow+0x7c>
 800a8a0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800a8a4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800a8a8:	431d      	orrs	r5, r3
 800a8aa:	d1e0      	bne.n	800a86e <__ieee754_pow+0x2e>
 800a8ac:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a8b0:	18db      	adds	r3, r3, r3
 800a8b2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800a8b6:	4152      	adcs	r2, r2
 800a8b8:	429d      	cmp	r5, r3
 800a8ba:	e7d4      	b.n	800a866 <__ieee754_pow+0x26>
 800a8bc:	2d00      	cmp	r5, #0
 800a8be:	46c3      	mov	fp, r8
 800a8c0:	da3a      	bge.n	800a938 <__ieee754_pow+0xf8>
 800a8c2:	4a83      	ldr	r2, [pc, #524]	@ (800aad0 <__ieee754_pow+0x290>)
 800a8c4:	4592      	cmp	sl, r2
 800a8c6:	d84d      	bhi.n	800a964 <__ieee754_pow+0x124>
 800a8c8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800a8cc:	4592      	cmp	sl, r2
 800a8ce:	f240 84c7 	bls.w	800b260 <__ieee754_pow+0xa20>
 800a8d2:	ea4f 522a 	mov.w	r2, sl, asr #20
 800a8d6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a8da:	2a14      	cmp	r2, #20
 800a8dc:	dd0f      	ble.n	800a8fe <__ieee754_pow+0xbe>
 800a8de:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800a8e2:	fa21 f402 	lsr.w	r4, r1, r2
 800a8e6:	fa04 f202 	lsl.w	r2, r4, r2
 800a8ea:	428a      	cmp	r2, r1
 800a8ec:	f040 84b8 	bne.w	800b260 <__ieee754_pow+0xa20>
 800a8f0:	f004 0401 	and.w	r4, r4, #1
 800a8f4:	f1c4 0402 	rsb	r4, r4, #2
 800a8f8:	2900      	cmp	r1, #0
 800a8fa:	d158      	bne.n	800a9ae <__ieee754_pow+0x16e>
 800a8fc:	e00e      	b.n	800a91c <__ieee754_pow+0xdc>
 800a8fe:	2900      	cmp	r1, #0
 800a900:	d154      	bne.n	800a9ac <__ieee754_pow+0x16c>
 800a902:	f1c2 0214 	rsb	r2, r2, #20
 800a906:	fa4a f402 	asr.w	r4, sl, r2
 800a90a:	fa04 f202 	lsl.w	r2, r4, r2
 800a90e:	4552      	cmp	r2, sl
 800a910:	f040 84a3 	bne.w	800b25a <__ieee754_pow+0xa1a>
 800a914:	f004 0401 	and.w	r4, r4, #1
 800a918:	f1c4 0402 	rsb	r4, r4, #2
 800a91c:	4a6d      	ldr	r2, [pc, #436]	@ (800aad4 <__ieee754_pow+0x294>)
 800a91e:	4592      	cmp	sl, r2
 800a920:	d12e      	bne.n	800a980 <__ieee754_pow+0x140>
 800a922:	f1b9 0f00 	cmp.w	r9, #0
 800a926:	f280 8494 	bge.w	800b252 <__ieee754_pow+0xa12>
 800a92a:	496a      	ldr	r1, [pc, #424]	@ (800aad4 <__ieee754_pow+0x294>)
 800a92c:	4632      	mov	r2, r6
 800a92e:	463b      	mov	r3, r7
 800a930:	2000      	movs	r0, #0
 800a932:	f7f5 ff93 	bl	800085c <__aeabi_ddiv>
 800a936:	e7a0      	b.n	800a87a <__ieee754_pow+0x3a>
 800a938:	2400      	movs	r4, #0
 800a93a:	bbc1      	cbnz	r1, 800a9ae <__ieee754_pow+0x16e>
 800a93c:	4a63      	ldr	r2, [pc, #396]	@ (800aacc <__ieee754_pow+0x28c>)
 800a93e:	4592      	cmp	sl, r2
 800a940:	d1ec      	bne.n	800a91c <__ieee754_pow+0xdc>
 800a942:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800a946:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800a94a:	431a      	orrs	r2, r3
 800a94c:	f000 8479 	beq.w	800b242 <__ieee754_pow+0xa02>
 800a950:	4b61      	ldr	r3, [pc, #388]	@ (800aad8 <__ieee754_pow+0x298>)
 800a952:	4598      	cmp	r8, r3
 800a954:	d908      	bls.n	800a968 <__ieee754_pow+0x128>
 800a956:	f1b9 0f00 	cmp.w	r9, #0
 800a95a:	f2c0 8476 	blt.w	800b24a <__ieee754_pow+0xa0a>
 800a95e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a962:	e78a      	b.n	800a87a <__ieee754_pow+0x3a>
 800a964:	2402      	movs	r4, #2
 800a966:	e7e8      	b.n	800a93a <__ieee754_pow+0xfa>
 800a968:	f1b9 0f00 	cmp.w	r9, #0
 800a96c:	f04f 0000 	mov.w	r0, #0
 800a970:	f04f 0100 	mov.w	r1, #0
 800a974:	da81      	bge.n	800a87a <__ieee754_pow+0x3a>
 800a976:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a97a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a97e:	e77c      	b.n	800a87a <__ieee754_pow+0x3a>
 800a980:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800a984:	d106      	bne.n	800a994 <__ieee754_pow+0x154>
 800a986:	4632      	mov	r2, r6
 800a988:	463b      	mov	r3, r7
 800a98a:	4630      	mov	r0, r6
 800a98c:	4639      	mov	r1, r7
 800a98e:	f7f5 fe3b 	bl	8000608 <__aeabi_dmul>
 800a992:	e772      	b.n	800a87a <__ieee754_pow+0x3a>
 800a994:	4a51      	ldr	r2, [pc, #324]	@ (800aadc <__ieee754_pow+0x29c>)
 800a996:	4591      	cmp	r9, r2
 800a998:	d109      	bne.n	800a9ae <__ieee754_pow+0x16e>
 800a99a:	2d00      	cmp	r5, #0
 800a99c:	db07      	blt.n	800a9ae <__ieee754_pow+0x16e>
 800a99e:	ec47 6b10 	vmov	d0, r6, r7
 800a9a2:	b011      	add	sp, #68	@ 0x44
 800a9a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a8:	f000 bd52 	b.w	800b450 <__ieee754_sqrt>
 800a9ac:	2400      	movs	r4, #0
 800a9ae:	ec47 6b10 	vmov	d0, r6, r7
 800a9b2:	9302      	str	r3, [sp, #8]
 800a9b4:	f000 fc88 	bl	800b2c8 <fabs>
 800a9b8:	9b02      	ldr	r3, [sp, #8]
 800a9ba:	ec51 0b10 	vmov	r0, r1, d0
 800a9be:	bb53      	cbnz	r3, 800aa16 <__ieee754_pow+0x1d6>
 800a9c0:	4b44      	ldr	r3, [pc, #272]	@ (800aad4 <__ieee754_pow+0x294>)
 800a9c2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d002      	beq.n	800a9d0 <__ieee754_pow+0x190>
 800a9ca:	f1b8 0f00 	cmp.w	r8, #0
 800a9ce:	d122      	bne.n	800aa16 <__ieee754_pow+0x1d6>
 800a9d0:	f1b9 0f00 	cmp.w	r9, #0
 800a9d4:	da05      	bge.n	800a9e2 <__ieee754_pow+0x1a2>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	460b      	mov	r3, r1
 800a9da:	2000      	movs	r0, #0
 800a9dc:	493d      	ldr	r1, [pc, #244]	@ (800aad4 <__ieee754_pow+0x294>)
 800a9de:	f7f5 ff3d 	bl	800085c <__aeabi_ddiv>
 800a9e2:	2d00      	cmp	r5, #0
 800a9e4:	f6bf af49 	bge.w	800a87a <__ieee754_pow+0x3a>
 800a9e8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800a9ec:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800a9f0:	ea58 0804 	orrs.w	r8, r8, r4
 800a9f4:	d108      	bne.n	800aa08 <__ieee754_pow+0x1c8>
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	4610      	mov	r0, r2
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	f7f5 fc4b 	bl	8000298 <__aeabi_dsub>
 800aa02:	4602      	mov	r2, r0
 800aa04:	460b      	mov	r3, r1
 800aa06:	e794      	b.n	800a932 <__ieee754_pow+0xf2>
 800aa08:	2c01      	cmp	r4, #1
 800aa0a:	f47f af36 	bne.w	800a87a <__ieee754_pow+0x3a>
 800aa0e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aa12:	4619      	mov	r1, r3
 800aa14:	e731      	b.n	800a87a <__ieee754_pow+0x3a>
 800aa16:	0feb      	lsrs	r3, r5, #31
 800aa18:	3b01      	subs	r3, #1
 800aa1a:	ea53 0204 	orrs.w	r2, r3, r4
 800aa1e:	d102      	bne.n	800aa26 <__ieee754_pow+0x1e6>
 800aa20:	4632      	mov	r2, r6
 800aa22:	463b      	mov	r3, r7
 800aa24:	e7e9      	b.n	800a9fa <__ieee754_pow+0x1ba>
 800aa26:	3c01      	subs	r4, #1
 800aa28:	431c      	orrs	r4, r3
 800aa2a:	d016      	beq.n	800aa5a <__ieee754_pow+0x21a>
 800aa2c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800aab8 <__ieee754_pow+0x278>
 800aa30:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800aa34:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aa38:	f240 8112 	bls.w	800ac60 <__ieee754_pow+0x420>
 800aa3c:	4b28      	ldr	r3, [pc, #160]	@ (800aae0 <__ieee754_pow+0x2a0>)
 800aa3e:	459a      	cmp	sl, r3
 800aa40:	4b25      	ldr	r3, [pc, #148]	@ (800aad8 <__ieee754_pow+0x298>)
 800aa42:	d916      	bls.n	800aa72 <__ieee754_pow+0x232>
 800aa44:	4598      	cmp	r8, r3
 800aa46:	d80b      	bhi.n	800aa60 <__ieee754_pow+0x220>
 800aa48:	f1b9 0f00 	cmp.w	r9, #0
 800aa4c:	da0b      	bge.n	800aa66 <__ieee754_pow+0x226>
 800aa4e:	2000      	movs	r0, #0
 800aa50:	b011      	add	sp, #68	@ 0x44
 800aa52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa56:	f000 bcf3 	b.w	800b440 <__math_oflow>
 800aa5a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800aac0 <__ieee754_pow+0x280>
 800aa5e:	e7e7      	b.n	800aa30 <__ieee754_pow+0x1f0>
 800aa60:	f1b9 0f00 	cmp.w	r9, #0
 800aa64:	dcf3      	bgt.n	800aa4e <__ieee754_pow+0x20e>
 800aa66:	2000      	movs	r0, #0
 800aa68:	b011      	add	sp, #68	@ 0x44
 800aa6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa6e:	f000 bcdf 	b.w	800b430 <__math_uflow>
 800aa72:	4598      	cmp	r8, r3
 800aa74:	d20c      	bcs.n	800aa90 <__ieee754_pow+0x250>
 800aa76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	f7f6 f835 	bl	8000aec <__aeabi_dcmplt>
 800aa82:	3800      	subs	r0, #0
 800aa84:	bf18      	it	ne
 800aa86:	2001      	movne	r0, #1
 800aa88:	f1b9 0f00 	cmp.w	r9, #0
 800aa8c:	daec      	bge.n	800aa68 <__ieee754_pow+0x228>
 800aa8e:	e7df      	b.n	800aa50 <__ieee754_pow+0x210>
 800aa90:	4b10      	ldr	r3, [pc, #64]	@ (800aad4 <__ieee754_pow+0x294>)
 800aa92:	4598      	cmp	r8, r3
 800aa94:	f04f 0200 	mov.w	r2, #0
 800aa98:	d924      	bls.n	800aae4 <__ieee754_pow+0x2a4>
 800aa9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	f7f6 f824 	bl	8000aec <__aeabi_dcmplt>
 800aaa4:	3800      	subs	r0, #0
 800aaa6:	bf18      	it	ne
 800aaa8:	2001      	movne	r0, #1
 800aaaa:	f1b9 0f00 	cmp.w	r9, #0
 800aaae:	dccf      	bgt.n	800aa50 <__ieee754_pow+0x210>
 800aab0:	e7da      	b.n	800aa68 <__ieee754_pow+0x228>
 800aab2:	bf00      	nop
 800aab4:	f3af 8000 	nop.w
 800aab8:	00000000 	.word	0x00000000
 800aabc:	3ff00000 	.word	0x3ff00000
 800aac0:	00000000 	.word	0x00000000
 800aac4:	bff00000 	.word	0xbff00000
 800aac8:	fff00000 	.word	0xfff00000
 800aacc:	7ff00000 	.word	0x7ff00000
 800aad0:	433fffff 	.word	0x433fffff
 800aad4:	3ff00000 	.word	0x3ff00000
 800aad8:	3fefffff 	.word	0x3fefffff
 800aadc:	3fe00000 	.word	0x3fe00000
 800aae0:	43f00000 	.word	0x43f00000
 800aae4:	4b5a      	ldr	r3, [pc, #360]	@ (800ac50 <__ieee754_pow+0x410>)
 800aae6:	f7f5 fbd7 	bl	8000298 <__aeabi_dsub>
 800aaea:	a351      	add	r3, pc, #324	@ (adr r3, 800ac30 <__ieee754_pow+0x3f0>)
 800aaec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf0:	4604      	mov	r4, r0
 800aaf2:	460d      	mov	r5, r1
 800aaf4:	f7f5 fd88 	bl	8000608 <__aeabi_dmul>
 800aaf8:	a34f      	add	r3, pc, #316	@ (adr r3, 800ac38 <__ieee754_pow+0x3f8>)
 800aafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafe:	4606      	mov	r6, r0
 800ab00:	460f      	mov	r7, r1
 800ab02:	4620      	mov	r0, r4
 800ab04:	4629      	mov	r1, r5
 800ab06:	f7f5 fd7f 	bl	8000608 <__aeabi_dmul>
 800ab0a:	4b52      	ldr	r3, [pc, #328]	@ (800ac54 <__ieee754_pow+0x414>)
 800ab0c:	4682      	mov	sl, r0
 800ab0e:	468b      	mov	fp, r1
 800ab10:	2200      	movs	r2, #0
 800ab12:	4620      	mov	r0, r4
 800ab14:	4629      	mov	r1, r5
 800ab16:	f7f5 fd77 	bl	8000608 <__aeabi_dmul>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	a148      	add	r1, pc, #288	@ (adr r1, 800ac40 <__ieee754_pow+0x400>)
 800ab20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab24:	f7f5 fbb8 	bl	8000298 <__aeabi_dsub>
 800ab28:	4622      	mov	r2, r4
 800ab2a:	462b      	mov	r3, r5
 800ab2c:	f7f5 fd6c 	bl	8000608 <__aeabi_dmul>
 800ab30:	4602      	mov	r2, r0
 800ab32:	460b      	mov	r3, r1
 800ab34:	2000      	movs	r0, #0
 800ab36:	4948      	ldr	r1, [pc, #288]	@ (800ac58 <__ieee754_pow+0x418>)
 800ab38:	f7f5 fbae 	bl	8000298 <__aeabi_dsub>
 800ab3c:	4622      	mov	r2, r4
 800ab3e:	4680      	mov	r8, r0
 800ab40:	4689      	mov	r9, r1
 800ab42:	462b      	mov	r3, r5
 800ab44:	4620      	mov	r0, r4
 800ab46:	4629      	mov	r1, r5
 800ab48:	f7f5 fd5e 	bl	8000608 <__aeabi_dmul>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	460b      	mov	r3, r1
 800ab50:	4640      	mov	r0, r8
 800ab52:	4649      	mov	r1, r9
 800ab54:	f7f5 fd58 	bl	8000608 <__aeabi_dmul>
 800ab58:	a33b      	add	r3, pc, #236	@ (adr r3, 800ac48 <__ieee754_pow+0x408>)
 800ab5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5e:	f7f5 fd53 	bl	8000608 <__aeabi_dmul>
 800ab62:	4602      	mov	r2, r0
 800ab64:	460b      	mov	r3, r1
 800ab66:	4650      	mov	r0, sl
 800ab68:	4659      	mov	r1, fp
 800ab6a:	f7f5 fb95 	bl	8000298 <__aeabi_dsub>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	460b      	mov	r3, r1
 800ab72:	4680      	mov	r8, r0
 800ab74:	4689      	mov	r9, r1
 800ab76:	4630      	mov	r0, r6
 800ab78:	4639      	mov	r1, r7
 800ab7a:	f7f5 fb8f 	bl	800029c <__adddf3>
 800ab7e:	2400      	movs	r4, #0
 800ab80:	4632      	mov	r2, r6
 800ab82:	463b      	mov	r3, r7
 800ab84:	4620      	mov	r0, r4
 800ab86:	460d      	mov	r5, r1
 800ab88:	f7f5 fb86 	bl	8000298 <__aeabi_dsub>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	460b      	mov	r3, r1
 800ab90:	4640      	mov	r0, r8
 800ab92:	4649      	mov	r1, r9
 800ab94:	f7f5 fb80 	bl	8000298 <__aeabi_dsub>
 800ab98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aba0:	2300      	movs	r3, #0
 800aba2:	9304      	str	r3, [sp, #16]
 800aba4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800aba8:	4606      	mov	r6, r0
 800abaa:	460f      	mov	r7, r1
 800abac:	4652      	mov	r2, sl
 800abae:	465b      	mov	r3, fp
 800abb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abb4:	f7f5 fb70 	bl	8000298 <__aeabi_dsub>
 800abb8:	4622      	mov	r2, r4
 800abba:	462b      	mov	r3, r5
 800abbc:	f7f5 fd24 	bl	8000608 <__aeabi_dmul>
 800abc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abc4:	4680      	mov	r8, r0
 800abc6:	4689      	mov	r9, r1
 800abc8:	4630      	mov	r0, r6
 800abca:	4639      	mov	r1, r7
 800abcc:	f7f5 fd1c 	bl	8000608 <__aeabi_dmul>
 800abd0:	4602      	mov	r2, r0
 800abd2:	460b      	mov	r3, r1
 800abd4:	4640      	mov	r0, r8
 800abd6:	4649      	mov	r1, r9
 800abd8:	f7f5 fb60 	bl	800029c <__adddf3>
 800abdc:	4652      	mov	r2, sl
 800abde:	465b      	mov	r3, fp
 800abe0:	4606      	mov	r6, r0
 800abe2:	460f      	mov	r7, r1
 800abe4:	4620      	mov	r0, r4
 800abe6:	4629      	mov	r1, r5
 800abe8:	f7f5 fd0e 	bl	8000608 <__aeabi_dmul>
 800abec:	460b      	mov	r3, r1
 800abee:	4602      	mov	r2, r0
 800abf0:	4680      	mov	r8, r0
 800abf2:	4689      	mov	r9, r1
 800abf4:	4630      	mov	r0, r6
 800abf6:	4639      	mov	r1, r7
 800abf8:	f7f5 fb50 	bl	800029c <__adddf3>
 800abfc:	4b17      	ldr	r3, [pc, #92]	@ (800ac5c <__ieee754_pow+0x41c>)
 800abfe:	4299      	cmp	r1, r3
 800ac00:	4604      	mov	r4, r0
 800ac02:	460d      	mov	r5, r1
 800ac04:	468a      	mov	sl, r1
 800ac06:	468b      	mov	fp, r1
 800ac08:	f340 82ef 	ble.w	800b1ea <__ieee754_pow+0x9aa>
 800ac0c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800ac10:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800ac14:	4303      	orrs	r3, r0
 800ac16:	f000 81e8 	beq.w	800afea <__ieee754_pow+0x7aa>
 800ac1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	2300      	movs	r3, #0
 800ac22:	f7f5 ff63 	bl	8000aec <__aeabi_dcmplt>
 800ac26:	3800      	subs	r0, #0
 800ac28:	bf18      	it	ne
 800ac2a:	2001      	movne	r0, #1
 800ac2c:	e710      	b.n	800aa50 <__ieee754_pow+0x210>
 800ac2e:	bf00      	nop
 800ac30:	60000000 	.word	0x60000000
 800ac34:	3ff71547 	.word	0x3ff71547
 800ac38:	f85ddf44 	.word	0xf85ddf44
 800ac3c:	3e54ae0b 	.word	0x3e54ae0b
 800ac40:	55555555 	.word	0x55555555
 800ac44:	3fd55555 	.word	0x3fd55555
 800ac48:	652b82fe 	.word	0x652b82fe
 800ac4c:	3ff71547 	.word	0x3ff71547
 800ac50:	3ff00000 	.word	0x3ff00000
 800ac54:	3fd00000 	.word	0x3fd00000
 800ac58:	3fe00000 	.word	0x3fe00000
 800ac5c:	408fffff 	.word	0x408fffff
 800ac60:	4bd5      	ldr	r3, [pc, #852]	@ (800afb8 <__ieee754_pow+0x778>)
 800ac62:	402b      	ands	r3, r5
 800ac64:	2200      	movs	r2, #0
 800ac66:	b92b      	cbnz	r3, 800ac74 <__ieee754_pow+0x434>
 800ac68:	4bd4      	ldr	r3, [pc, #848]	@ (800afbc <__ieee754_pow+0x77c>)
 800ac6a:	f7f5 fccd 	bl	8000608 <__aeabi_dmul>
 800ac6e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800ac72:	468b      	mov	fp, r1
 800ac74:	ea4f 532b 	mov.w	r3, fp, asr #20
 800ac78:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ac7c:	4413      	add	r3, r2
 800ac7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac80:	4bcf      	ldr	r3, [pc, #828]	@ (800afc0 <__ieee754_pow+0x780>)
 800ac82:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800ac86:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800ac8a:	459b      	cmp	fp, r3
 800ac8c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ac90:	dd08      	ble.n	800aca4 <__ieee754_pow+0x464>
 800ac92:	4bcc      	ldr	r3, [pc, #816]	@ (800afc4 <__ieee754_pow+0x784>)
 800ac94:	459b      	cmp	fp, r3
 800ac96:	f340 81a5 	ble.w	800afe4 <__ieee754_pow+0x7a4>
 800ac9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800aca0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800aca4:	f04f 0a00 	mov.w	sl, #0
 800aca8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800acac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800acae:	4bc6      	ldr	r3, [pc, #792]	@ (800afc8 <__ieee754_pow+0x788>)
 800acb0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800acb4:	ed93 7b00 	vldr	d7, [r3]
 800acb8:	4629      	mov	r1, r5
 800acba:	ec53 2b17 	vmov	r2, r3, d7
 800acbe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800acc2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800acc6:	f7f5 fae7 	bl	8000298 <__aeabi_dsub>
 800acca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800acce:	4606      	mov	r6, r0
 800acd0:	460f      	mov	r7, r1
 800acd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acd6:	f7f5 fae1 	bl	800029c <__adddf3>
 800acda:	4602      	mov	r2, r0
 800acdc:	460b      	mov	r3, r1
 800acde:	2000      	movs	r0, #0
 800ace0:	49ba      	ldr	r1, [pc, #744]	@ (800afcc <__ieee754_pow+0x78c>)
 800ace2:	f7f5 fdbb 	bl	800085c <__aeabi_ddiv>
 800ace6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800acea:	4602      	mov	r2, r0
 800acec:	460b      	mov	r3, r1
 800acee:	4630      	mov	r0, r6
 800acf0:	4639      	mov	r1, r7
 800acf2:	f7f5 fc89 	bl	8000608 <__aeabi_dmul>
 800acf6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800acfa:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800acfe:	106d      	asrs	r5, r5, #1
 800ad00:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800ad04:	f04f 0b00 	mov.w	fp, #0
 800ad08:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800ad0c:	4661      	mov	r1, ip
 800ad0e:	2200      	movs	r2, #0
 800ad10:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800ad14:	4658      	mov	r0, fp
 800ad16:	46e1      	mov	r9, ip
 800ad18:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800ad1c:	4614      	mov	r4, r2
 800ad1e:	461d      	mov	r5, r3
 800ad20:	f7f5 fc72 	bl	8000608 <__aeabi_dmul>
 800ad24:	4602      	mov	r2, r0
 800ad26:	460b      	mov	r3, r1
 800ad28:	4630      	mov	r0, r6
 800ad2a:	4639      	mov	r1, r7
 800ad2c:	f7f5 fab4 	bl	8000298 <__aeabi_dsub>
 800ad30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad34:	4606      	mov	r6, r0
 800ad36:	460f      	mov	r7, r1
 800ad38:	4620      	mov	r0, r4
 800ad3a:	4629      	mov	r1, r5
 800ad3c:	f7f5 faac 	bl	8000298 <__aeabi_dsub>
 800ad40:	4602      	mov	r2, r0
 800ad42:	460b      	mov	r3, r1
 800ad44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ad48:	f7f5 faa6 	bl	8000298 <__aeabi_dsub>
 800ad4c:	465a      	mov	r2, fp
 800ad4e:	464b      	mov	r3, r9
 800ad50:	f7f5 fc5a 	bl	8000608 <__aeabi_dmul>
 800ad54:	4602      	mov	r2, r0
 800ad56:	460b      	mov	r3, r1
 800ad58:	4630      	mov	r0, r6
 800ad5a:	4639      	mov	r1, r7
 800ad5c:	f7f5 fa9c 	bl	8000298 <__aeabi_dsub>
 800ad60:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ad64:	f7f5 fc50 	bl	8000608 <__aeabi_dmul>
 800ad68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ad70:	4610      	mov	r0, r2
 800ad72:	4619      	mov	r1, r3
 800ad74:	f7f5 fc48 	bl	8000608 <__aeabi_dmul>
 800ad78:	a37d      	add	r3, pc, #500	@ (adr r3, 800af70 <__ieee754_pow+0x730>)
 800ad7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7e:	4604      	mov	r4, r0
 800ad80:	460d      	mov	r5, r1
 800ad82:	f7f5 fc41 	bl	8000608 <__aeabi_dmul>
 800ad86:	a37c      	add	r3, pc, #496	@ (adr r3, 800af78 <__ieee754_pow+0x738>)
 800ad88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8c:	f7f5 fa86 	bl	800029c <__adddf3>
 800ad90:	4622      	mov	r2, r4
 800ad92:	462b      	mov	r3, r5
 800ad94:	f7f5 fc38 	bl	8000608 <__aeabi_dmul>
 800ad98:	a379      	add	r3, pc, #484	@ (adr r3, 800af80 <__ieee754_pow+0x740>)
 800ad9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9e:	f7f5 fa7d 	bl	800029c <__adddf3>
 800ada2:	4622      	mov	r2, r4
 800ada4:	462b      	mov	r3, r5
 800ada6:	f7f5 fc2f 	bl	8000608 <__aeabi_dmul>
 800adaa:	a377      	add	r3, pc, #476	@ (adr r3, 800af88 <__ieee754_pow+0x748>)
 800adac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb0:	f7f5 fa74 	bl	800029c <__adddf3>
 800adb4:	4622      	mov	r2, r4
 800adb6:	462b      	mov	r3, r5
 800adb8:	f7f5 fc26 	bl	8000608 <__aeabi_dmul>
 800adbc:	a374      	add	r3, pc, #464	@ (adr r3, 800af90 <__ieee754_pow+0x750>)
 800adbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc2:	f7f5 fa6b 	bl	800029c <__adddf3>
 800adc6:	4622      	mov	r2, r4
 800adc8:	462b      	mov	r3, r5
 800adca:	f7f5 fc1d 	bl	8000608 <__aeabi_dmul>
 800adce:	a372      	add	r3, pc, #456	@ (adr r3, 800af98 <__ieee754_pow+0x758>)
 800add0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add4:	f7f5 fa62 	bl	800029c <__adddf3>
 800add8:	4622      	mov	r2, r4
 800adda:	4606      	mov	r6, r0
 800addc:	460f      	mov	r7, r1
 800adde:	462b      	mov	r3, r5
 800ade0:	4620      	mov	r0, r4
 800ade2:	4629      	mov	r1, r5
 800ade4:	f7f5 fc10 	bl	8000608 <__aeabi_dmul>
 800ade8:	4602      	mov	r2, r0
 800adea:	460b      	mov	r3, r1
 800adec:	4630      	mov	r0, r6
 800adee:	4639      	mov	r1, r7
 800adf0:	f7f5 fc0a 	bl	8000608 <__aeabi_dmul>
 800adf4:	465a      	mov	r2, fp
 800adf6:	4604      	mov	r4, r0
 800adf8:	460d      	mov	r5, r1
 800adfa:	464b      	mov	r3, r9
 800adfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae00:	f7f5 fa4c 	bl	800029c <__adddf3>
 800ae04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae08:	f7f5 fbfe 	bl	8000608 <__aeabi_dmul>
 800ae0c:	4622      	mov	r2, r4
 800ae0e:	462b      	mov	r3, r5
 800ae10:	f7f5 fa44 	bl	800029c <__adddf3>
 800ae14:	465a      	mov	r2, fp
 800ae16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ae1a:	464b      	mov	r3, r9
 800ae1c:	4658      	mov	r0, fp
 800ae1e:	4649      	mov	r1, r9
 800ae20:	f7f5 fbf2 	bl	8000608 <__aeabi_dmul>
 800ae24:	4b6a      	ldr	r3, [pc, #424]	@ (800afd0 <__ieee754_pow+0x790>)
 800ae26:	2200      	movs	r2, #0
 800ae28:	4606      	mov	r6, r0
 800ae2a:	460f      	mov	r7, r1
 800ae2c:	f7f5 fa36 	bl	800029c <__adddf3>
 800ae30:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ae34:	f7f5 fa32 	bl	800029c <__adddf3>
 800ae38:	46d8      	mov	r8, fp
 800ae3a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800ae3e:	460d      	mov	r5, r1
 800ae40:	465a      	mov	r2, fp
 800ae42:	460b      	mov	r3, r1
 800ae44:	4640      	mov	r0, r8
 800ae46:	4649      	mov	r1, r9
 800ae48:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800ae4c:	f7f5 fbdc 	bl	8000608 <__aeabi_dmul>
 800ae50:	465c      	mov	r4, fp
 800ae52:	4680      	mov	r8, r0
 800ae54:	4689      	mov	r9, r1
 800ae56:	4b5e      	ldr	r3, [pc, #376]	@ (800afd0 <__ieee754_pow+0x790>)
 800ae58:	2200      	movs	r2, #0
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	4629      	mov	r1, r5
 800ae5e:	f7f5 fa1b 	bl	8000298 <__aeabi_dsub>
 800ae62:	4632      	mov	r2, r6
 800ae64:	463b      	mov	r3, r7
 800ae66:	f7f5 fa17 	bl	8000298 <__aeabi_dsub>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ae72:	f7f5 fa11 	bl	8000298 <__aeabi_dsub>
 800ae76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae7a:	f7f5 fbc5 	bl	8000608 <__aeabi_dmul>
 800ae7e:	4622      	mov	r2, r4
 800ae80:	4606      	mov	r6, r0
 800ae82:	460f      	mov	r7, r1
 800ae84:	462b      	mov	r3, r5
 800ae86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae8a:	f7f5 fbbd 	bl	8000608 <__aeabi_dmul>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	460b      	mov	r3, r1
 800ae92:	4630      	mov	r0, r6
 800ae94:	4639      	mov	r1, r7
 800ae96:	f7f5 fa01 	bl	800029c <__adddf3>
 800ae9a:	4606      	mov	r6, r0
 800ae9c:	460f      	mov	r7, r1
 800ae9e:	4602      	mov	r2, r0
 800aea0:	460b      	mov	r3, r1
 800aea2:	4640      	mov	r0, r8
 800aea4:	4649      	mov	r1, r9
 800aea6:	f7f5 f9f9 	bl	800029c <__adddf3>
 800aeaa:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800aeae:	a33c      	add	r3, pc, #240	@ (adr r3, 800afa0 <__ieee754_pow+0x760>)
 800aeb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb4:	4658      	mov	r0, fp
 800aeb6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800aeba:	460d      	mov	r5, r1
 800aebc:	f7f5 fba4 	bl	8000608 <__aeabi_dmul>
 800aec0:	465c      	mov	r4, fp
 800aec2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aec6:	4642      	mov	r2, r8
 800aec8:	464b      	mov	r3, r9
 800aeca:	4620      	mov	r0, r4
 800aecc:	4629      	mov	r1, r5
 800aece:	f7f5 f9e3 	bl	8000298 <__aeabi_dsub>
 800aed2:	4602      	mov	r2, r0
 800aed4:	460b      	mov	r3, r1
 800aed6:	4630      	mov	r0, r6
 800aed8:	4639      	mov	r1, r7
 800aeda:	f7f5 f9dd 	bl	8000298 <__aeabi_dsub>
 800aede:	a332      	add	r3, pc, #200	@ (adr r3, 800afa8 <__ieee754_pow+0x768>)
 800aee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee4:	f7f5 fb90 	bl	8000608 <__aeabi_dmul>
 800aee8:	a331      	add	r3, pc, #196	@ (adr r3, 800afb0 <__ieee754_pow+0x770>)
 800aeea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeee:	4606      	mov	r6, r0
 800aef0:	460f      	mov	r7, r1
 800aef2:	4620      	mov	r0, r4
 800aef4:	4629      	mov	r1, r5
 800aef6:	f7f5 fb87 	bl	8000608 <__aeabi_dmul>
 800aefa:	4602      	mov	r2, r0
 800aefc:	460b      	mov	r3, r1
 800aefe:	4630      	mov	r0, r6
 800af00:	4639      	mov	r1, r7
 800af02:	f7f5 f9cb 	bl	800029c <__adddf3>
 800af06:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800af08:	4b32      	ldr	r3, [pc, #200]	@ (800afd4 <__ieee754_pow+0x794>)
 800af0a:	4413      	add	r3, r2
 800af0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af10:	f7f5 f9c4 	bl	800029c <__adddf3>
 800af14:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800af18:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800af1a:	f7f5 fb0b 	bl	8000534 <__aeabi_i2d>
 800af1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800af20:	4b2d      	ldr	r3, [pc, #180]	@ (800afd8 <__ieee754_pow+0x798>)
 800af22:	4413      	add	r3, r2
 800af24:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af28:	4606      	mov	r6, r0
 800af2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800af2e:	460f      	mov	r7, r1
 800af30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af34:	f7f5 f9b2 	bl	800029c <__adddf3>
 800af38:	4642      	mov	r2, r8
 800af3a:	464b      	mov	r3, r9
 800af3c:	f7f5 f9ae 	bl	800029c <__adddf3>
 800af40:	4632      	mov	r2, r6
 800af42:	463b      	mov	r3, r7
 800af44:	f7f5 f9aa 	bl	800029c <__adddf3>
 800af48:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800af4c:	4632      	mov	r2, r6
 800af4e:	463b      	mov	r3, r7
 800af50:	4658      	mov	r0, fp
 800af52:	460d      	mov	r5, r1
 800af54:	f7f5 f9a0 	bl	8000298 <__aeabi_dsub>
 800af58:	4642      	mov	r2, r8
 800af5a:	464b      	mov	r3, r9
 800af5c:	f7f5 f99c 	bl	8000298 <__aeabi_dsub>
 800af60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af64:	f7f5 f998 	bl	8000298 <__aeabi_dsub>
 800af68:	465c      	mov	r4, fp
 800af6a:	4602      	mov	r2, r0
 800af6c:	e036      	b.n	800afdc <__ieee754_pow+0x79c>
 800af6e:	bf00      	nop
 800af70:	4a454eef 	.word	0x4a454eef
 800af74:	3fca7e28 	.word	0x3fca7e28
 800af78:	93c9db65 	.word	0x93c9db65
 800af7c:	3fcd864a 	.word	0x3fcd864a
 800af80:	a91d4101 	.word	0xa91d4101
 800af84:	3fd17460 	.word	0x3fd17460
 800af88:	518f264d 	.word	0x518f264d
 800af8c:	3fd55555 	.word	0x3fd55555
 800af90:	db6fabff 	.word	0xdb6fabff
 800af94:	3fdb6db6 	.word	0x3fdb6db6
 800af98:	33333303 	.word	0x33333303
 800af9c:	3fe33333 	.word	0x3fe33333
 800afa0:	e0000000 	.word	0xe0000000
 800afa4:	3feec709 	.word	0x3feec709
 800afa8:	dc3a03fd 	.word	0xdc3a03fd
 800afac:	3feec709 	.word	0x3feec709
 800afb0:	145b01f5 	.word	0x145b01f5
 800afb4:	be3e2fe0 	.word	0xbe3e2fe0
 800afb8:	7ff00000 	.word	0x7ff00000
 800afbc:	43400000 	.word	0x43400000
 800afc0:	0003988e 	.word	0x0003988e
 800afc4:	000bb679 	.word	0x000bb679
 800afc8:	0800b6e8 	.word	0x0800b6e8
 800afcc:	3ff00000 	.word	0x3ff00000
 800afd0:	40080000 	.word	0x40080000
 800afd4:	0800b6c8 	.word	0x0800b6c8
 800afd8:	0800b6d8 	.word	0x0800b6d8
 800afdc:	460b      	mov	r3, r1
 800afde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afe2:	e5d7      	b.n	800ab94 <__ieee754_pow+0x354>
 800afe4:	f04f 0a01 	mov.w	sl, #1
 800afe8:	e65e      	b.n	800aca8 <__ieee754_pow+0x468>
 800afea:	a3b4      	add	r3, pc, #720	@ (adr r3, 800b2bc <__ieee754_pow+0xa7c>)
 800afec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff0:	4630      	mov	r0, r6
 800aff2:	4639      	mov	r1, r7
 800aff4:	f7f5 f952 	bl	800029c <__adddf3>
 800aff8:	4642      	mov	r2, r8
 800affa:	e9cd 0100 	strd	r0, r1, [sp]
 800affe:	464b      	mov	r3, r9
 800b000:	4620      	mov	r0, r4
 800b002:	4629      	mov	r1, r5
 800b004:	f7f5 f948 	bl	8000298 <__aeabi_dsub>
 800b008:	4602      	mov	r2, r0
 800b00a:	460b      	mov	r3, r1
 800b00c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b010:	f7f5 fd8a 	bl	8000b28 <__aeabi_dcmpgt>
 800b014:	2800      	cmp	r0, #0
 800b016:	f47f ae00 	bne.w	800ac1a <__ieee754_pow+0x3da>
 800b01a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800b01e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b022:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800b026:	fa43 fa0a 	asr.w	sl, r3, sl
 800b02a:	44da      	add	sl, fp
 800b02c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b030:	489d      	ldr	r0, [pc, #628]	@ (800b2a8 <__ieee754_pow+0xa68>)
 800b032:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800b036:	4108      	asrs	r0, r1
 800b038:	ea00 030a 	and.w	r3, r0, sl
 800b03c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b040:	f1c1 0114 	rsb	r1, r1, #20
 800b044:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800b048:	fa4a fa01 	asr.w	sl, sl, r1
 800b04c:	f1bb 0f00 	cmp.w	fp, #0
 800b050:	4640      	mov	r0, r8
 800b052:	4649      	mov	r1, r9
 800b054:	f04f 0200 	mov.w	r2, #0
 800b058:	bfb8      	it	lt
 800b05a:	f1ca 0a00 	rsblt	sl, sl, #0
 800b05e:	f7f5 f91b 	bl	8000298 <__aeabi_dsub>
 800b062:	4680      	mov	r8, r0
 800b064:	4689      	mov	r9, r1
 800b066:	4632      	mov	r2, r6
 800b068:	463b      	mov	r3, r7
 800b06a:	4640      	mov	r0, r8
 800b06c:	4649      	mov	r1, r9
 800b06e:	f7f5 f915 	bl	800029c <__adddf3>
 800b072:	2400      	movs	r4, #0
 800b074:	a37c      	add	r3, pc, #496	@ (adr r3, 800b268 <__ieee754_pow+0xa28>)
 800b076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07a:	4620      	mov	r0, r4
 800b07c:	460d      	mov	r5, r1
 800b07e:	f7f5 fac3 	bl	8000608 <__aeabi_dmul>
 800b082:	4642      	mov	r2, r8
 800b084:	e9cd 0100 	strd	r0, r1, [sp]
 800b088:	464b      	mov	r3, r9
 800b08a:	4620      	mov	r0, r4
 800b08c:	4629      	mov	r1, r5
 800b08e:	f7f5 f903 	bl	8000298 <__aeabi_dsub>
 800b092:	4602      	mov	r2, r0
 800b094:	460b      	mov	r3, r1
 800b096:	4630      	mov	r0, r6
 800b098:	4639      	mov	r1, r7
 800b09a:	f7f5 f8fd 	bl	8000298 <__aeabi_dsub>
 800b09e:	a374      	add	r3, pc, #464	@ (adr r3, 800b270 <__ieee754_pow+0xa30>)
 800b0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a4:	f7f5 fab0 	bl	8000608 <__aeabi_dmul>
 800b0a8:	a373      	add	r3, pc, #460	@ (adr r3, 800b278 <__ieee754_pow+0xa38>)
 800b0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ae:	4680      	mov	r8, r0
 800b0b0:	4689      	mov	r9, r1
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	4629      	mov	r1, r5
 800b0b6:	f7f5 faa7 	bl	8000608 <__aeabi_dmul>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	460b      	mov	r3, r1
 800b0be:	4640      	mov	r0, r8
 800b0c0:	4649      	mov	r1, r9
 800b0c2:	f7f5 f8eb 	bl	800029c <__adddf3>
 800b0c6:	4604      	mov	r4, r0
 800b0c8:	460d      	mov	r5, r1
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b0d2:	f7f5 f8e3 	bl	800029c <__adddf3>
 800b0d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0da:	4680      	mov	r8, r0
 800b0dc:	4689      	mov	r9, r1
 800b0de:	f7f5 f8db 	bl	8000298 <__aeabi_dsub>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	460b      	mov	r3, r1
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	4629      	mov	r1, r5
 800b0ea:	f7f5 f8d5 	bl	8000298 <__aeabi_dsub>
 800b0ee:	4642      	mov	r2, r8
 800b0f0:	4606      	mov	r6, r0
 800b0f2:	460f      	mov	r7, r1
 800b0f4:	464b      	mov	r3, r9
 800b0f6:	4640      	mov	r0, r8
 800b0f8:	4649      	mov	r1, r9
 800b0fa:	f7f5 fa85 	bl	8000608 <__aeabi_dmul>
 800b0fe:	a360      	add	r3, pc, #384	@ (adr r3, 800b280 <__ieee754_pow+0xa40>)
 800b100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b104:	4604      	mov	r4, r0
 800b106:	460d      	mov	r5, r1
 800b108:	f7f5 fa7e 	bl	8000608 <__aeabi_dmul>
 800b10c:	a35e      	add	r3, pc, #376	@ (adr r3, 800b288 <__ieee754_pow+0xa48>)
 800b10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b112:	f7f5 f8c1 	bl	8000298 <__aeabi_dsub>
 800b116:	4622      	mov	r2, r4
 800b118:	462b      	mov	r3, r5
 800b11a:	f7f5 fa75 	bl	8000608 <__aeabi_dmul>
 800b11e:	a35c      	add	r3, pc, #368	@ (adr r3, 800b290 <__ieee754_pow+0xa50>)
 800b120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b124:	f7f5 f8ba 	bl	800029c <__adddf3>
 800b128:	4622      	mov	r2, r4
 800b12a:	462b      	mov	r3, r5
 800b12c:	f7f5 fa6c 	bl	8000608 <__aeabi_dmul>
 800b130:	a359      	add	r3, pc, #356	@ (adr r3, 800b298 <__ieee754_pow+0xa58>)
 800b132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b136:	f7f5 f8af 	bl	8000298 <__aeabi_dsub>
 800b13a:	4622      	mov	r2, r4
 800b13c:	462b      	mov	r3, r5
 800b13e:	f7f5 fa63 	bl	8000608 <__aeabi_dmul>
 800b142:	a357      	add	r3, pc, #348	@ (adr r3, 800b2a0 <__ieee754_pow+0xa60>)
 800b144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b148:	f7f5 f8a8 	bl	800029c <__adddf3>
 800b14c:	4622      	mov	r2, r4
 800b14e:	462b      	mov	r3, r5
 800b150:	f7f5 fa5a 	bl	8000608 <__aeabi_dmul>
 800b154:	4602      	mov	r2, r0
 800b156:	460b      	mov	r3, r1
 800b158:	4640      	mov	r0, r8
 800b15a:	4649      	mov	r1, r9
 800b15c:	f7f5 f89c 	bl	8000298 <__aeabi_dsub>
 800b160:	4604      	mov	r4, r0
 800b162:	460d      	mov	r5, r1
 800b164:	4602      	mov	r2, r0
 800b166:	460b      	mov	r3, r1
 800b168:	4640      	mov	r0, r8
 800b16a:	4649      	mov	r1, r9
 800b16c:	f7f5 fa4c 	bl	8000608 <__aeabi_dmul>
 800b170:	2200      	movs	r2, #0
 800b172:	e9cd 0100 	strd	r0, r1, [sp]
 800b176:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b17a:	4620      	mov	r0, r4
 800b17c:	4629      	mov	r1, r5
 800b17e:	f7f5 f88b 	bl	8000298 <__aeabi_dsub>
 800b182:	4602      	mov	r2, r0
 800b184:	460b      	mov	r3, r1
 800b186:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b18a:	f7f5 fb67 	bl	800085c <__aeabi_ddiv>
 800b18e:	4632      	mov	r2, r6
 800b190:	4604      	mov	r4, r0
 800b192:	460d      	mov	r5, r1
 800b194:	463b      	mov	r3, r7
 800b196:	4640      	mov	r0, r8
 800b198:	4649      	mov	r1, r9
 800b19a:	f7f5 fa35 	bl	8000608 <__aeabi_dmul>
 800b19e:	4632      	mov	r2, r6
 800b1a0:	463b      	mov	r3, r7
 800b1a2:	f7f5 f87b 	bl	800029c <__adddf3>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	4629      	mov	r1, r5
 800b1ae:	f7f5 f873 	bl	8000298 <__aeabi_dsub>
 800b1b2:	4642      	mov	r2, r8
 800b1b4:	464b      	mov	r3, r9
 800b1b6:	f7f5 f86f 	bl	8000298 <__aeabi_dsub>
 800b1ba:	460b      	mov	r3, r1
 800b1bc:	4602      	mov	r2, r0
 800b1be:	493b      	ldr	r1, [pc, #236]	@ (800b2ac <__ieee754_pow+0xa6c>)
 800b1c0:	2000      	movs	r0, #0
 800b1c2:	f7f5 f869 	bl	8000298 <__aeabi_dsub>
 800b1c6:	ec41 0b10 	vmov	d0, r0, r1
 800b1ca:	ee10 3a90 	vmov	r3, s1
 800b1ce:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b1d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1d6:	da30      	bge.n	800b23a <__ieee754_pow+0x9fa>
 800b1d8:	4650      	mov	r0, sl
 800b1da:	f000 f87d 	bl	800b2d8 <scalbn>
 800b1de:	ec51 0b10 	vmov	r0, r1, d0
 800b1e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b1e6:	f7ff bbd2 	b.w	800a98e <__ieee754_pow+0x14e>
 800b1ea:	4c31      	ldr	r4, [pc, #196]	@ (800b2b0 <__ieee754_pow+0xa70>)
 800b1ec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b1f0:	42a3      	cmp	r3, r4
 800b1f2:	d91a      	bls.n	800b22a <__ieee754_pow+0x9ea>
 800b1f4:	4b2f      	ldr	r3, [pc, #188]	@ (800b2b4 <__ieee754_pow+0xa74>)
 800b1f6:	440b      	add	r3, r1
 800b1f8:	4303      	orrs	r3, r0
 800b1fa:	d009      	beq.n	800b210 <__ieee754_pow+0x9d0>
 800b1fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b200:	2200      	movs	r2, #0
 800b202:	2300      	movs	r3, #0
 800b204:	f7f5 fc72 	bl	8000aec <__aeabi_dcmplt>
 800b208:	3800      	subs	r0, #0
 800b20a:	bf18      	it	ne
 800b20c:	2001      	movne	r0, #1
 800b20e:	e42b      	b.n	800aa68 <__ieee754_pow+0x228>
 800b210:	4642      	mov	r2, r8
 800b212:	464b      	mov	r3, r9
 800b214:	f7f5 f840 	bl	8000298 <__aeabi_dsub>
 800b218:	4632      	mov	r2, r6
 800b21a:	463b      	mov	r3, r7
 800b21c:	f7f5 fc7a 	bl	8000b14 <__aeabi_dcmpge>
 800b220:	2800      	cmp	r0, #0
 800b222:	d1eb      	bne.n	800b1fc <__ieee754_pow+0x9bc>
 800b224:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800b2c4 <__ieee754_pow+0xa84>
 800b228:	e6f7      	b.n	800b01a <__ieee754_pow+0x7da>
 800b22a:	469a      	mov	sl, r3
 800b22c:	4b22      	ldr	r3, [pc, #136]	@ (800b2b8 <__ieee754_pow+0xa78>)
 800b22e:	459a      	cmp	sl, r3
 800b230:	f63f aef3 	bhi.w	800b01a <__ieee754_pow+0x7da>
 800b234:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b238:	e715      	b.n	800b066 <__ieee754_pow+0x826>
 800b23a:	ec51 0b10 	vmov	r0, r1, d0
 800b23e:	4619      	mov	r1, r3
 800b240:	e7cf      	b.n	800b1e2 <__ieee754_pow+0x9a2>
 800b242:	491a      	ldr	r1, [pc, #104]	@ (800b2ac <__ieee754_pow+0xa6c>)
 800b244:	2000      	movs	r0, #0
 800b246:	f7ff bb18 	b.w	800a87a <__ieee754_pow+0x3a>
 800b24a:	2000      	movs	r0, #0
 800b24c:	2100      	movs	r1, #0
 800b24e:	f7ff bb14 	b.w	800a87a <__ieee754_pow+0x3a>
 800b252:	4630      	mov	r0, r6
 800b254:	4639      	mov	r1, r7
 800b256:	f7ff bb10 	b.w	800a87a <__ieee754_pow+0x3a>
 800b25a:	460c      	mov	r4, r1
 800b25c:	f7ff bb5e 	b.w	800a91c <__ieee754_pow+0xdc>
 800b260:	2400      	movs	r4, #0
 800b262:	f7ff bb49 	b.w	800a8f8 <__ieee754_pow+0xb8>
 800b266:	bf00      	nop
 800b268:	00000000 	.word	0x00000000
 800b26c:	3fe62e43 	.word	0x3fe62e43
 800b270:	fefa39ef 	.word	0xfefa39ef
 800b274:	3fe62e42 	.word	0x3fe62e42
 800b278:	0ca86c39 	.word	0x0ca86c39
 800b27c:	be205c61 	.word	0xbe205c61
 800b280:	72bea4d0 	.word	0x72bea4d0
 800b284:	3e663769 	.word	0x3e663769
 800b288:	c5d26bf1 	.word	0xc5d26bf1
 800b28c:	3ebbbd41 	.word	0x3ebbbd41
 800b290:	af25de2c 	.word	0xaf25de2c
 800b294:	3f11566a 	.word	0x3f11566a
 800b298:	16bebd93 	.word	0x16bebd93
 800b29c:	3f66c16c 	.word	0x3f66c16c
 800b2a0:	5555553e 	.word	0x5555553e
 800b2a4:	3fc55555 	.word	0x3fc55555
 800b2a8:	fff00000 	.word	0xfff00000
 800b2ac:	3ff00000 	.word	0x3ff00000
 800b2b0:	4090cbff 	.word	0x4090cbff
 800b2b4:	3f6f3400 	.word	0x3f6f3400
 800b2b8:	3fe00000 	.word	0x3fe00000
 800b2bc:	652b82fe 	.word	0x652b82fe
 800b2c0:	3c971547 	.word	0x3c971547
 800b2c4:	4090cc00 	.word	0x4090cc00

0800b2c8 <fabs>:
 800b2c8:	ec51 0b10 	vmov	r0, r1, d0
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b2d2:	ec43 2b10 	vmov	d0, r2, r3
 800b2d6:	4770      	bx	lr

0800b2d8 <scalbn>:
 800b2d8:	b570      	push	{r4, r5, r6, lr}
 800b2da:	ec55 4b10 	vmov	r4, r5, d0
 800b2de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b2e2:	4606      	mov	r6, r0
 800b2e4:	462b      	mov	r3, r5
 800b2e6:	b991      	cbnz	r1, 800b30e <scalbn+0x36>
 800b2e8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b2ec:	4323      	orrs	r3, r4
 800b2ee:	d03d      	beq.n	800b36c <scalbn+0x94>
 800b2f0:	4b35      	ldr	r3, [pc, #212]	@ (800b3c8 <scalbn+0xf0>)
 800b2f2:	4620      	mov	r0, r4
 800b2f4:	4629      	mov	r1, r5
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f7f5 f986 	bl	8000608 <__aeabi_dmul>
 800b2fc:	4b33      	ldr	r3, [pc, #204]	@ (800b3cc <scalbn+0xf4>)
 800b2fe:	429e      	cmp	r6, r3
 800b300:	4604      	mov	r4, r0
 800b302:	460d      	mov	r5, r1
 800b304:	da0f      	bge.n	800b326 <scalbn+0x4e>
 800b306:	a328      	add	r3, pc, #160	@ (adr r3, 800b3a8 <scalbn+0xd0>)
 800b308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30c:	e01e      	b.n	800b34c <scalbn+0x74>
 800b30e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800b312:	4291      	cmp	r1, r2
 800b314:	d10b      	bne.n	800b32e <scalbn+0x56>
 800b316:	4622      	mov	r2, r4
 800b318:	4620      	mov	r0, r4
 800b31a:	4629      	mov	r1, r5
 800b31c:	f7f4 ffbe 	bl	800029c <__adddf3>
 800b320:	4604      	mov	r4, r0
 800b322:	460d      	mov	r5, r1
 800b324:	e022      	b.n	800b36c <scalbn+0x94>
 800b326:	460b      	mov	r3, r1
 800b328:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b32c:	3936      	subs	r1, #54	@ 0x36
 800b32e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800b332:	4296      	cmp	r6, r2
 800b334:	dd0d      	ble.n	800b352 <scalbn+0x7a>
 800b336:	2d00      	cmp	r5, #0
 800b338:	a11d      	add	r1, pc, #116	@ (adr r1, 800b3b0 <scalbn+0xd8>)
 800b33a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b33e:	da02      	bge.n	800b346 <scalbn+0x6e>
 800b340:	a11d      	add	r1, pc, #116	@ (adr r1, 800b3b8 <scalbn+0xe0>)
 800b342:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b346:	a31a      	add	r3, pc, #104	@ (adr r3, 800b3b0 <scalbn+0xd8>)
 800b348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34c:	f7f5 f95c 	bl	8000608 <__aeabi_dmul>
 800b350:	e7e6      	b.n	800b320 <scalbn+0x48>
 800b352:	1872      	adds	r2, r6, r1
 800b354:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b358:	428a      	cmp	r2, r1
 800b35a:	dcec      	bgt.n	800b336 <scalbn+0x5e>
 800b35c:	2a00      	cmp	r2, #0
 800b35e:	dd08      	ble.n	800b372 <scalbn+0x9a>
 800b360:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b364:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b368:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b36c:	ec45 4b10 	vmov	d0, r4, r5
 800b370:	bd70      	pop	{r4, r5, r6, pc}
 800b372:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b376:	da08      	bge.n	800b38a <scalbn+0xb2>
 800b378:	2d00      	cmp	r5, #0
 800b37a:	a10b      	add	r1, pc, #44	@ (adr r1, 800b3a8 <scalbn+0xd0>)
 800b37c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b380:	dac1      	bge.n	800b306 <scalbn+0x2e>
 800b382:	a10f      	add	r1, pc, #60	@ (adr r1, 800b3c0 <scalbn+0xe8>)
 800b384:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b388:	e7bd      	b.n	800b306 <scalbn+0x2e>
 800b38a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b38e:	3236      	adds	r2, #54	@ 0x36
 800b390:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b394:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b398:	4620      	mov	r0, r4
 800b39a:	4b0d      	ldr	r3, [pc, #52]	@ (800b3d0 <scalbn+0xf8>)
 800b39c:	4629      	mov	r1, r5
 800b39e:	2200      	movs	r2, #0
 800b3a0:	e7d4      	b.n	800b34c <scalbn+0x74>
 800b3a2:	bf00      	nop
 800b3a4:	f3af 8000 	nop.w
 800b3a8:	c2f8f359 	.word	0xc2f8f359
 800b3ac:	01a56e1f 	.word	0x01a56e1f
 800b3b0:	8800759c 	.word	0x8800759c
 800b3b4:	7e37e43c 	.word	0x7e37e43c
 800b3b8:	8800759c 	.word	0x8800759c
 800b3bc:	fe37e43c 	.word	0xfe37e43c
 800b3c0:	c2f8f359 	.word	0xc2f8f359
 800b3c4:	81a56e1f 	.word	0x81a56e1f
 800b3c8:	43500000 	.word	0x43500000
 800b3cc:	ffff3cb0 	.word	0xffff3cb0
 800b3d0:	3c900000 	.word	0x3c900000

0800b3d4 <with_errno>:
 800b3d4:	b510      	push	{r4, lr}
 800b3d6:	ed2d 8b02 	vpush	{d8}
 800b3da:	eeb0 8a40 	vmov.f32	s16, s0
 800b3de:	eef0 8a60 	vmov.f32	s17, s1
 800b3e2:	4604      	mov	r4, r0
 800b3e4:	f7fe fcf2 	bl	8009dcc <__errno>
 800b3e8:	eeb0 0a48 	vmov.f32	s0, s16
 800b3ec:	eef0 0a68 	vmov.f32	s1, s17
 800b3f0:	ecbd 8b02 	vpop	{d8}
 800b3f4:	6004      	str	r4, [r0, #0]
 800b3f6:	bd10      	pop	{r4, pc}

0800b3f8 <xflow>:
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	b507      	push	{r0, r1, r2, lr}
 800b3fc:	ec51 0b10 	vmov	r0, r1, d0
 800b400:	b183      	cbz	r3, 800b424 <xflow+0x2c>
 800b402:	4602      	mov	r2, r0
 800b404:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b408:	e9cd 2300 	strd	r2, r3, [sp]
 800b40c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b410:	f7f5 f8fa 	bl	8000608 <__aeabi_dmul>
 800b414:	ec41 0b10 	vmov	d0, r0, r1
 800b418:	2022      	movs	r0, #34	@ 0x22
 800b41a:	b003      	add	sp, #12
 800b41c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b420:	f7ff bfd8 	b.w	800b3d4 <with_errno>
 800b424:	4602      	mov	r2, r0
 800b426:	460b      	mov	r3, r1
 800b428:	e7ee      	b.n	800b408 <xflow+0x10>
 800b42a:	0000      	movs	r0, r0
 800b42c:	0000      	movs	r0, r0
	...

0800b430 <__math_uflow>:
 800b430:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b438 <__math_uflow+0x8>
 800b434:	f7ff bfe0 	b.w	800b3f8 <xflow>
 800b438:	00000000 	.word	0x00000000
 800b43c:	10000000 	.word	0x10000000

0800b440 <__math_oflow>:
 800b440:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b448 <__math_oflow+0x8>
 800b444:	f7ff bfd8 	b.w	800b3f8 <xflow>
 800b448:	00000000 	.word	0x00000000
 800b44c:	70000000 	.word	0x70000000

0800b450 <__ieee754_sqrt>:
 800b450:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b454:	4a68      	ldr	r2, [pc, #416]	@ (800b5f8 <__ieee754_sqrt+0x1a8>)
 800b456:	ec55 4b10 	vmov	r4, r5, d0
 800b45a:	43aa      	bics	r2, r5
 800b45c:	462b      	mov	r3, r5
 800b45e:	4621      	mov	r1, r4
 800b460:	d110      	bne.n	800b484 <__ieee754_sqrt+0x34>
 800b462:	4622      	mov	r2, r4
 800b464:	4620      	mov	r0, r4
 800b466:	4629      	mov	r1, r5
 800b468:	f7f5 f8ce 	bl	8000608 <__aeabi_dmul>
 800b46c:	4602      	mov	r2, r0
 800b46e:	460b      	mov	r3, r1
 800b470:	4620      	mov	r0, r4
 800b472:	4629      	mov	r1, r5
 800b474:	f7f4 ff12 	bl	800029c <__adddf3>
 800b478:	4604      	mov	r4, r0
 800b47a:	460d      	mov	r5, r1
 800b47c:	ec45 4b10 	vmov	d0, r4, r5
 800b480:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b484:	2d00      	cmp	r5, #0
 800b486:	dc0e      	bgt.n	800b4a6 <__ieee754_sqrt+0x56>
 800b488:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b48c:	4322      	orrs	r2, r4
 800b48e:	d0f5      	beq.n	800b47c <__ieee754_sqrt+0x2c>
 800b490:	b19d      	cbz	r5, 800b4ba <__ieee754_sqrt+0x6a>
 800b492:	4622      	mov	r2, r4
 800b494:	4620      	mov	r0, r4
 800b496:	4629      	mov	r1, r5
 800b498:	f7f4 fefe 	bl	8000298 <__aeabi_dsub>
 800b49c:	4602      	mov	r2, r0
 800b49e:	460b      	mov	r3, r1
 800b4a0:	f7f5 f9dc 	bl	800085c <__aeabi_ddiv>
 800b4a4:	e7e8      	b.n	800b478 <__ieee754_sqrt+0x28>
 800b4a6:	152a      	asrs	r2, r5, #20
 800b4a8:	d115      	bne.n	800b4d6 <__ieee754_sqrt+0x86>
 800b4aa:	2000      	movs	r0, #0
 800b4ac:	e009      	b.n	800b4c2 <__ieee754_sqrt+0x72>
 800b4ae:	0acb      	lsrs	r3, r1, #11
 800b4b0:	3a15      	subs	r2, #21
 800b4b2:	0549      	lsls	r1, r1, #21
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d0fa      	beq.n	800b4ae <__ieee754_sqrt+0x5e>
 800b4b8:	e7f7      	b.n	800b4aa <__ieee754_sqrt+0x5a>
 800b4ba:	462a      	mov	r2, r5
 800b4bc:	e7fa      	b.n	800b4b4 <__ieee754_sqrt+0x64>
 800b4be:	005b      	lsls	r3, r3, #1
 800b4c0:	3001      	adds	r0, #1
 800b4c2:	02dc      	lsls	r4, r3, #11
 800b4c4:	d5fb      	bpl.n	800b4be <__ieee754_sqrt+0x6e>
 800b4c6:	1e44      	subs	r4, r0, #1
 800b4c8:	1b12      	subs	r2, r2, r4
 800b4ca:	f1c0 0420 	rsb	r4, r0, #32
 800b4ce:	fa21 f404 	lsr.w	r4, r1, r4
 800b4d2:	4323      	orrs	r3, r4
 800b4d4:	4081      	lsls	r1, r0
 800b4d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4da:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800b4de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b4e2:	07d2      	lsls	r2, r2, #31
 800b4e4:	bf5c      	itt	pl
 800b4e6:	005b      	lslpl	r3, r3, #1
 800b4e8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800b4ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b4f0:	bf58      	it	pl
 800b4f2:	0049      	lslpl	r1, r1, #1
 800b4f4:	2600      	movs	r6, #0
 800b4f6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800b4fa:	106d      	asrs	r5, r5, #1
 800b4fc:	0049      	lsls	r1, r1, #1
 800b4fe:	2016      	movs	r0, #22
 800b500:	4632      	mov	r2, r6
 800b502:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800b506:	1917      	adds	r7, r2, r4
 800b508:	429f      	cmp	r7, r3
 800b50a:	bfde      	ittt	le
 800b50c:	193a      	addle	r2, r7, r4
 800b50e:	1bdb      	suble	r3, r3, r7
 800b510:	1936      	addle	r6, r6, r4
 800b512:	0fcf      	lsrs	r7, r1, #31
 800b514:	3801      	subs	r0, #1
 800b516:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800b51a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b51e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b522:	d1f0      	bne.n	800b506 <__ieee754_sqrt+0xb6>
 800b524:	4604      	mov	r4, r0
 800b526:	2720      	movs	r7, #32
 800b528:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800b52c:	429a      	cmp	r2, r3
 800b52e:	eb00 0e0c 	add.w	lr, r0, ip
 800b532:	db02      	blt.n	800b53a <__ieee754_sqrt+0xea>
 800b534:	d113      	bne.n	800b55e <__ieee754_sqrt+0x10e>
 800b536:	458e      	cmp	lr, r1
 800b538:	d811      	bhi.n	800b55e <__ieee754_sqrt+0x10e>
 800b53a:	f1be 0f00 	cmp.w	lr, #0
 800b53e:	eb0e 000c 	add.w	r0, lr, ip
 800b542:	da42      	bge.n	800b5ca <__ieee754_sqrt+0x17a>
 800b544:	2800      	cmp	r0, #0
 800b546:	db40      	blt.n	800b5ca <__ieee754_sqrt+0x17a>
 800b548:	f102 0801 	add.w	r8, r2, #1
 800b54c:	1a9b      	subs	r3, r3, r2
 800b54e:	458e      	cmp	lr, r1
 800b550:	bf88      	it	hi
 800b552:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b556:	eba1 010e 	sub.w	r1, r1, lr
 800b55a:	4464      	add	r4, ip
 800b55c:	4642      	mov	r2, r8
 800b55e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800b562:	3f01      	subs	r7, #1
 800b564:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b568:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b56c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b570:	d1dc      	bne.n	800b52c <__ieee754_sqrt+0xdc>
 800b572:	4319      	orrs	r1, r3
 800b574:	d01b      	beq.n	800b5ae <__ieee754_sqrt+0x15e>
 800b576:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800b5fc <__ieee754_sqrt+0x1ac>
 800b57a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800b600 <__ieee754_sqrt+0x1b0>
 800b57e:	e9da 0100 	ldrd	r0, r1, [sl]
 800b582:	e9db 2300 	ldrd	r2, r3, [fp]
 800b586:	f7f4 fe87 	bl	8000298 <__aeabi_dsub>
 800b58a:	e9da 8900 	ldrd	r8, r9, [sl]
 800b58e:	4602      	mov	r2, r0
 800b590:	460b      	mov	r3, r1
 800b592:	4640      	mov	r0, r8
 800b594:	4649      	mov	r1, r9
 800b596:	f7f5 fab3 	bl	8000b00 <__aeabi_dcmple>
 800b59a:	b140      	cbz	r0, 800b5ae <__ieee754_sqrt+0x15e>
 800b59c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b5a0:	e9da 0100 	ldrd	r0, r1, [sl]
 800b5a4:	e9db 2300 	ldrd	r2, r3, [fp]
 800b5a8:	d111      	bne.n	800b5ce <__ieee754_sqrt+0x17e>
 800b5aa:	3601      	adds	r6, #1
 800b5ac:	463c      	mov	r4, r7
 800b5ae:	1072      	asrs	r2, r6, #1
 800b5b0:	0863      	lsrs	r3, r4, #1
 800b5b2:	07f1      	lsls	r1, r6, #31
 800b5b4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b5b8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b5bc:	bf48      	it	mi
 800b5be:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b5c2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	e756      	b.n	800b478 <__ieee754_sqrt+0x28>
 800b5ca:	4690      	mov	r8, r2
 800b5cc:	e7be      	b.n	800b54c <__ieee754_sqrt+0xfc>
 800b5ce:	f7f4 fe65 	bl	800029c <__adddf3>
 800b5d2:	e9da 8900 	ldrd	r8, r9, [sl]
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	460b      	mov	r3, r1
 800b5da:	4640      	mov	r0, r8
 800b5dc:	4649      	mov	r1, r9
 800b5de:	f7f5 fa85 	bl	8000aec <__aeabi_dcmplt>
 800b5e2:	b120      	cbz	r0, 800b5ee <__ieee754_sqrt+0x19e>
 800b5e4:	1ca0      	adds	r0, r4, #2
 800b5e6:	bf08      	it	eq
 800b5e8:	3601      	addeq	r6, #1
 800b5ea:	3402      	adds	r4, #2
 800b5ec:	e7df      	b.n	800b5ae <__ieee754_sqrt+0x15e>
 800b5ee:	1c63      	adds	r3, r4, #1
 800b5f0:	f023 0401 	bic.w	r4, r3, #1
 800b5f4:	e7db      	b.n	800b5ae <__ieee754_sqrt+0x15e>
 800b5f6:	bf00      	nop
 800b5f8:	7ff00000 	.word	0x7ff00000
 800b5fc:	20000190 	.word	0x20000190
 800b600:	20000188 	.word	0x20000188

0800b604 <_init>:
 800b604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b606:	bf00      	nop
 800b608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b60a:	bc08      	pop	{r3}
 800b60c:	469e      	mov	lr, r3
 800b60e:	4770      	bx	lr

0800b610 <_fini>:
 800b610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b612:	bf00      	nop
 800b614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b616:	bc08      	pop	{r3}
 800b618:	469e      	mov	lr, r3
 800b61a:	4770      	bx	lr
